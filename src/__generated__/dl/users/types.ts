export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601Date: { input: string; output: string; }
  ISO8601DateTime: { input: string; output: string; }
};

export type Abilities = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type AcademyCourse = {
  category: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  endDate: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
  progress: Maybe<AcademyCourseProgress>;
  startDate: Maybe<Scalars['ISO8601Date']['output']>;
};

export type AcademyCourseProgress = {
  completed: Maybe<Scalars['Int']['output']>;
  total: Maybe<Scalars['Int']['output']>;
};

export type AdminDashboard = {
  entities: EntityDataPage;
  entity: Maybe<EntityData>;
  users: UserDataPage;
};


export type AdminDashboardEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type AdminDashboardEntityArgs = {
  uuid: InputMaybe<Scalars['ID']['input']>;
};


export type AdminDashboardUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export enum AggregationPeriod {
  /** monthly aggregation period */
  MONTH = 'MONTH',
  /** quarterly aggregation period */
  QUARTER = 'QUARTER',
  /** semesterly aggregation period */
  SEMESTER = 'SEMESTER'
}

export type Announcement = ConversationContext & {
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AnswerPlanGroupStatementQuestionMutation */
export type AnswerPlanGroupStatementQuestionMutationInput = {
  answer: Array<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  questionId: Scalars['ID']['input'];
};

/** Autogenerated return type of AnswerPlanGroupStatementQuestionMutation. */
export type AnswerPlanGroupStatementQuestionMutationPayload = {
  answer: PlanGroupStatementQuestionAnswer;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AppendCheckInItemsToTaskMutation */
export type AppendCheckInItemsToTaskMutationInput = {
  checkInItems: Array<CheckInItemAttributesWithoutStep>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of AppendCheckInItemsToTaskMutation. */
export type AppendCheckInItemsToTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

export enum ArchivableStatus {
  /** Active records only */
  ACTIVE = 'ACTIVE',
  /** All records */
  ALL = 'ALL',
  /** Archived records only */
  ARCHIVED = 'ARCHIVED'
}

/** Autogenerated input type of ArchiveCheckInQuestionMutation */
export type ArchiveCheckInQuestionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveCheckInQuestionMutation. */
export type ArchiveCheckInQuestionMutationPayload = {
  checkInQuestion: CheckInQuestion;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ArchivePresentationMutation */
export type ArchivePresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchivePresentationMutation. */
export type ArchivePresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  presentation: Presentation;
};

/** Autogenerated input type of ArchiveSlideBackgroundImageMutation */
export type ArchiveSlideBackgroundImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveSlideBackgroundImageMutation. */
export type ArchiveSlideBackgroundImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideBackgroundImage: SlideBackgroundImage;
};

/** Autogenerated input type of ArchiveSlideImageMutation */
export type ArchiveSlideImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveSlideImageMutation. */
export type ArchiveSlideImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideImage: SlideImage;
};

/** Autogenerated input type of ArchiveSlideMutation */
export type ArchiveSlideMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveSlideMutation. */
export type ArchiveSlideMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slide: Slide;
};

/** Autogenerated input type of ArchiveSlideVideoMutation */
export type ArchiveSlideVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveSlideVideoMutation. */
export type ArchiveSlideVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideVideo: SlideVideo;
};

/** Autogenerated input type of ArchiveTaskMutation */
export type ArchiveTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveTaskMutation. */
export type ArchiveTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

/** Autogenerated input type of ArchiveTeamMutation */
export type ArchiveTeamMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveTeamMutation. */
export type ArchiveTeamMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  team: Team;
};

export enum Asset {
  /** File asset type */
  FILE = 'FILE',
  /** Image asset type */
  IMAGE = 'IMAGE',
  /** Video asset type */
  VIDEO = 'VIDEO'
}

/** Autogenerated input type of AssignSchoolClassToTaskMutation */
export type AssignSchoolClassToTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  schoolClassUuid: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignSchoolClassToTaskMutation. */
export type AssignSchoolClassToTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of AssignStudentToTaskMutation */
export type AssignStudentToTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  studentUuids: Array<Scalars['ID']['input']>;
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignStudentToTaskMutation. */
export type AssignStudentToTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of AssignTeamsToTaskMutation */
export type AssignTeamsToTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  taskId: Scalars['ID']['input'];
  teamUuids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of AssignTeamsToTaskMutation. */
export type AssignTeamsToTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  teams: Array<Team>;
};

export type Assignment = ConversationContext & StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
};

export type AvailableResources = {
  catalogs: Array<Catalog>;
  tasks: Array<Task>;
  tracks: Array<Track>;
  units: Array<Unit>;
};

export type BrightOutlookEntry = {
  category: Array<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
};

export type CareerExperienceEntry = {
  clusterId: Scalars['ID']['output'];
  clusterName: Scalars['String']['output'];
  submissions: Array<CareerExperienceSubmissionEntry>;
  submissionsCount: Scalars['Int']['output'];
};

export type CareerExperienceSubmissionEntry = {
  contextName: Scalars['String']['output'];
  isTeamSubmission: Scalars['Boolean']['output'];
  service: ServiceNames;
  submissionName: Scalars['String']['output'];
  submittedAt: Scalars['ISO8601DateTime']['output'];
};

export type Catalog = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  tasksCount: Scalars['Int']['output'];
  thumbnailUrl: Scalars['String']['output'];
  tracks: TrackPage;
  tracksCount: Scalars['Int']['output'];
};


export type CatalogTracksArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type CatalogPage = {
  nodes: Array<Catalog>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type CheckInGroup = StudentBadgeResource & {
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  questions: Array<CheckInQuestion>;
  step: Maybe<Scalars['Int']['output']>;
};

/** Attributes for creating and updating check-in items */
export type CheckInItemAttributes = {
  itemId: Scalars['ID']['input'];
  itemType: CheckInItemTypes;
  step?: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for appending check-in items */
export type CheckInItemAttributesWithoutStep = {
  itemId: Scalars['ID']['input'];
  itemType: CheckInItemTypes;
};

export enum CheckInItemTypes {
  /** Group of check-in questions */
  CHECK_IN_GROUP = 'CHECK_IN_GROUP',
  /** Single check-in question */
  CHECK_IN_QUESTION = 'CHECK_IN_QUESTION'
}

export type CheckInQuestion = {
  answer: Maybe<CheckInQuestionAnswer>;
  /** Number of students (belonging to current user's classes) + teams (assigned to Task by current user) awaiting grading */
  gradingNeededCount: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  isArchived: Scalars['Boolean']['output'];
  isHidden: Scalars['Boolean']['output'];
  owner: Maybe<CheckInQuestionOwner>;
  question: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
  tasks: Array<Task>;
  teamSubmission: Maybe<TeamCheckInSubmission>;
};


export type CheckInQuestionAnswerArgs = {
  studentUuid: Scalars['ID']['input'];
};


export type CheckInQuestionTeamSubmissionArgs = {
  teamUuid: Scalars['ID']['input'];
};

export type CheckInQuestionAnswer = ConversationContext & {
  answer: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  grade: Maybe<SubmissionGrade>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Attributes for filtering CheckInQuestions */
export type CheckInQuestionFilter = {
  questionCont?: InputMaybe<Scalars['String']['input']>;
};

/** Check-in question owner */
export type CheckInQuestionOwner = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type CheckInQuestionPage = {
  nodes: Array<CheckInQuestion>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type Cluster = {
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  pathways: Array<Pathway>;
  thumbnailUrl: Scalars['String']['output'];
};

export type ClusterVisitCount = {
  cluster: Cluster;
  pathwayVisitCounts: Array<PathwayVisitCount>;
  visitsCount: Scalars['Int']['output'];
};

export type ContactLink = {
  id: Scalars['ID']['output'];
  type: ContactLinkTypes;
  value: Scalars['String']['output'];
};

export enum ContactLinkTypes {
  /** Behance Contact Link */
  BEHANCE = 'BEHANCE',
  /** Custom Contact Link */
  CUSTOM = 'CUSTOM',
  /** Dribbble Contact Link */
  DRIBBBLE = 'DRIBBBLE',
  /** Email Contact Link */
  EMAIL = 'EMAIL',
  /** Instagram Contact Link */
  INSTAGRAM = 'INSTAGRAM',
  /** Linkedin Contact Link */
  LINKEDIN = 'LINKEDIN',
  /** Phone Contact Link */
  PHONE = 'PHONE'
}

export type Conversation = {
  conversationContext: Maybe<ConversationContext>;
  id: Scalars['ID']['output'];
  messages: MessageConnection;
  messagesRead: Scalars['Boolean']['output'];
  participant: ConversationParticipant;
  recentMessage: Maybe<Message>;
  serviceName: Maybe<Scalars['String']['output']>;
  type: ConversationTypes;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type ConversationMessagesArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Conversation. */
export type ConversationConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Conversation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** Conversation Context */
export type ConversationContext = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export enum ConversationContextTypes {
  /** Check-in answer conversation context type */
  CHECK_IN_ANSWER = 'CHECK_IN_ANSWER',
  /**
   * Product conversation context type
   * @deprecated Use PRODUCT_SUBMISSION instead
   */
  PRODUCT = 'PRODUCT',
  /** Product conversation context type */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION',
  /** Task conversation context type */
  TASK = 'TASK',
  /** Team check-in submission conversation context type */
  TEAM_CHECK_IN_SUBMISSION = 'TEAM_CHECK_IN_SUBMISSION'
}

/** An edge in a connection. */
export type ConversationEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Conversation>;
};

export type ConversationGroup = {
  hasUnreadConversation: Scalars['Boolean']['output'];
  participant: ConversationParticipant;
  recentConversation: Conversation;
};

/** The connection type for ConversationGroup. */
export type ConversationGroupConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationGroupEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<ConversationGroup>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ConversationGroupEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<ConversationGroup>;
};

/** Conversation Member - a single member of a conversation (either as a direct participant or as a member of a group participant, e.g. student from a team.) */
export type ConversationMember = {
  email: Maybe<Scalars['String']['output']>;
  name: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Conversation Participant - can be a single member (User or Student) or a group of members (Team). Group participants return additional attributes: owner and members. */
export type ConversationParticipant = {
  email: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering conversation participants */
export type ConversationParticipantFilter = {
  participantType?: InputMaybe<ConversationParticipantTypes>;
  participantUuid?: InputMaybe<Scalars['ID']['input']>;
};

export enum ConversationParticipantTypes {
  /** Student conversation participant type */
  STUDENT = 'STUDENT',
  /** Team conversation participant type */
  TEAM = 'TEAM',
  /** User conversation participant type */
  USER = 'USER'
}

export type ConversationRecipient = {
  name: Scalars['String']['output'];
  recipientType: ConversationParticipantTypes;
  recipientUuid: Scalars['ID']['output'];
};

/** The connection type for ConversationRecipient. */
export type ConversationRecipientConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationRecipientEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<ConversationRecipient>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ConversationRecipientEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<ConversationRecipient>;
};

/** Attributes for filtering conversation recipients */
export type ConversationRecipientFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<ConversationRecipientTypes>;
};

export enum ConversationRecipientTypes {
  /** Student conversation recipient type */
  STUDENT = 'STUDENT',
  /** Team conversation recipient type */
  TEAM = 'TEAM',
  /** User conversation recipient type */
  USER = 'USER'
}

export enum ConversationTypes {
  /** Contextual conversation type */
  CONTEXTUAL = 'CONTEXTUAL',
  /** General conversation type */
  GENERAL = 'GENERAL'
}

export type Course = ConversationContext & StudentBadgeResource & {
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Maybe<Scalars['String']['output']>;
  onetData: Maybe<CourseOnetData>;
  pathwayName: Maybe<Scalars['String']['output']>;
  thumbnailUrl: Scalars['String']['output'];
  type: CourseTypes;
};

export type CourseOnetData = {
  abilities: Array<Abilities>;
  alignedCourses: Array<Course>;
  alsoCalled: Array<Scalars['String']['output']>;
  code: Scalars['String']['output'];
  education: Array<Scalars['String']['output']>;
  jobOutlook: Maybe<JobOutlook>;
  knowledge: Array<Knowledge>;
  onTheJob: Array<Scalars['String']['output']>;
  personality: Maybe<Personality>;
  skills: Array<Skills>;
  technology: Array<Technology>;
  title: Scalars['String']['output'];
  whatTheyDo: Scalars['String']['output'];
};

export enum CourseTypes {
  /** Courses of high school type */
  HIGH_SCHOOL = 'HIGH_SCHOOL',
  /** Courses of middle school type */
  MIDDLE_SCHOOL = 'MIDDLE_SCHOOL'
}

/** Autogenerated input type of CreateCheckInQuestionMutation */
export type CreateCheckInQuestionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  question: Scalars['String']['input'];
};

/** Autogenerated return type of CreateCheckInQuestionMutation. */
export type CreateCheckInQuestionMutationPayload = {
  checkInQuestion: Maybe<CheckInQuestion>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateEvaluationCommentMutation */
export type CreateEvaluationCommentMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  statementId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEvaluationCommentMutation. */
export type CreateEvaluationCommentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
};

/** Autogenerated input type of CreateEvaluationMutation */
export type CreateEvaluationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  planId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEvaluationMutation. */
export type CreateEvaluationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
};

/** Autogenerated input type of CreatePlanGroupStatementEvidenceMutation */
export type CreatePlanGroupStatementEvidenceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evidences: Array<PlanGroupStatementEvidenceItemAttributes>;
  planGroupStatementId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePlanGroupStatementEvidenceMutation. */
export type CreatePlanGroupStatementEvidenceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of CreatePresentationMutation */
export type CreatePresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  status: PresentationStatuses;
  taskId: Scalars['ID']['input'];
  transition?: InputMaybe<Scalars['String']['input']>;
  typography?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreatePresentationMutation. */
export type CreatePresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  presentation: Maybe<Presentation>;
};

/** Autogenerated input type of CreateProductMutation */
export type CreateProductMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  displayName: Scalars['String']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateProductMutation. */
export type CreateProductMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  product: Maybe<Product>;
};

/** Autogenerated input type of CreateProductSubmissionFileFromGoogleDriveMutation */
export type CreateProductSubmissionFileFromGoogleDriveMutationInput = {
  accessToken: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileId: Scalars['String']['input'];
  productSubmissionId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateProductSubmissionFileFromGoogleDriveMutation. */
export type CreateProductSubmissionFileFromGoogleDriveMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmissionFile: Maybe<ProductSubmissionFile>;
};

/** Autogenerated input type of CreateProductSubmissionFileMutation */
export type CreateProductSubmissionFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
  productSubmissionId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateProductSubmissionFileMutation. */
export type CreateProductSubmissionFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmissionFile: Maybe<ProductSubmissionFile>;
};

/** Autogenerated input type of CreatePublicResourceMutation */
export type CreatePublicResourceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  filename: Scalars['String']['input'];
  type: Asset;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePublicResourceMutation. */
export type CreatePublicResourceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  publicResource: Maybe<PublicResource>;
};

/** Autogenerated input type of CreateQuickTaskMutation */
export type CreateQuickTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateQuickTaskMutation. */
export type CreateQuickTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

/** Autogenerated input type of CreateRubricCriteriaLabelMutation */
export type CreateRubricCriteriaLabelMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  rubricId: Scalars['ID']['input'];
  score: Scalars['Int']['input'];
};

/** Autogenerated return type of CreateRubricCriteriaLabelMutation. */
export type CreateRubricCriteriaLabelMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricCriteriaLabel: RubricCriteriaLabel;
};

/** Autogenerated input type of CreateRubricCriteriaMutation */
export type CreateRubricCriteriaMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  rubricCriteriaLabelId: Scalars['ID']['input'];
  rubricHeadingId: Scalars['ID']['input'];
  text: Scalars['String']['input'];
};

/** Autogenerated return type of CreateRubricCriteriaMutation. */
export type CreateRubricCriteriaMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricCriteria: Maybe<RubricCriteria>;
};

/** Autogenerated input type of CreateRubricHeadingMutation */
export type CreateRubricHeadingMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  multiplier?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  rubricId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateRubricHeadingMutation. */
export type CreateRubricHeadingMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricHeading: Maybe<RubricHeading>;
};

/** Autogenerated input type of CreateSharedSessionTokenMutation */
export type CreateSharedSessionTokenMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateSharedSessionTokenMutation. */
export type CreateSharedSessionTokenMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  token: Scalars['String']['output'];
};

/** Autogenerated input type of CreateSlideBackgroundImageMutation */
export type CreateSlideBackgroundImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  slideId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateSlideBackgroundImageMutation. */
export type CreateSlideBackgroundImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideBackgroundImage: Maybe<SlideBackgroundImage>;
};

/** Autogenerated input type of CreateSlideImageMutation */
export type CreateSlideImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contentId: Scalars['ID']['input'];
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  position?: InputMaybe<Scalars['String']['input']>;
  slideId: Scalars['ID']['input'];
  style: Scalars['String']['input'];
};

/** Autogenerated return type of CreateSlideImageMutation. */
export type CreateSlideImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideImage: Maybe<SlideImage>;
};

/** Autogenerated input type of CreateSlideMutation */
export type CreateSlideMutationInput = {
  backgroundColor?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  iframeUrl?: InputMaybe<Scalars['String']['input']>;
  isShared?: InputMaybe<Scalars['Boolean']['input']>;
  links?: InputMaybe<Array<SlideLinksAttributes>>;
  name: Scalars['String']['input'];
  notes?: InputMaybe<Scalars['String']['input']>;
  presentation?: InputMaybe<PresentationAttributes>;
  slide?: InputMaybe<SlideAttributes>;
  template: Scalars['String']['input'];
  textItems?: InputMaybe<Array<SlideTextItemsAttributes>>;
};

/** Autogenerated return type of CreateSlideMutation. */
export type CreateSlideMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slide: Maybe<Slide>;
};

/** Autogenerated input type of CreateSlideVideoMutation */
export type CreateSlideVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contentId: Scalars['ID']['input'];
  slideId: Scalars['ID']['input'];
  videoFilename?: InputMaybe<Scalars['String']['input']>;
  videoUrl?: InputMaybe<Scalars['String']['input']>;
  videoUuid?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of CreateSlideVideoMutation. */
export type CreateSlideVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideVideo: Maybe<SlideVideo>;
};

/** Autogenerated input type of CreateStudentSubmissionMutation */
export type CreateStudentSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateStudentSubmissionMutation. */
export type CreateStudentSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmission: ProductSubmission;
};

/** Autogenerated input type of CreateTaskFileMutation */
export type CreateTaskFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['String']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTaskFileMutation. */
export type CreateTaskFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  taskFile: Maybe<TaskFile>;
};

/** Autogenerated input type of CreateTeamMutation */
export type CreateTeamMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  schoolClassUuid: Scalars['ID']['input'];
  studentUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of CreateTeamMutation. */
export type CreateTeamMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  team: Team;
};

/** Autogenerated input type of CreateTeamSubmissionMutation */
export type CreateTeamSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
  teamUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTeamSubmissionMutation. */
export type CreateTeamSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmission: ProductSubmission;
};

/** Attributes for updating entity school year start date */
export type DateAttributes = {
  day: Scalars['Int']['input'];
  month: Scalars['Int']['input'];
};

/** Autogenerated input type of DeletePlanGroupStatementEvidenceMutation */
export type DeletePlanGroupStatementEvidenceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePlanGroupStatementEvidenceMutation. */
export type DeletePlanGroupStatementEvidenceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of DeleteProductSubmissionFileMutation */
export type DeleteProductSubmissionFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteProductSubmissionFileMutation. */
export type DeleteProductSubmissionFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmission: Maybe<ProductSubmission>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeletePublicResourcesMutation */
export type DeletePublicResourcesMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  type: Asset;
  uuids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of DeletePublicResourcesMutation. */
export type DeletePublicResourcesMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteRubricCriteriaLabelMutation */
export type DeleteRubricCriteriaLabelMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteRubricCriteriaLabelMutation. */
export type DeleteRubricCriteriaLabelMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of DeleteRubricHeadingMutation */
export type DeleteRubricHeadingMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteRubricHeadingMutation. */
export type DeleteRubricHeadingMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of DeleteTaskFileMutation */
export type DeleteTaskFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteTaskFileMutation. */
export type DeleteTaskFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DuplicateTaskMutation */
export type DuplicateTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of DuplicateTaskMutation. */
export type DuplicateTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

export type Entity = {
  children: EntityPage;
  name: Maybe<Scalars['String']['output']>;
  reportTypes: Maybe<Array<ReportTypes>>;
  schoolClasses: SchoolClassPage;
  settings: EntitySettings;
  uuid: Scalars['ID']['output'];
};


export type EntityChildrenArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type EntitySchoolClassesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type EntityData = {
  catalogs: Maybe<Array<Catalog>>;
  children: EntityDataPage;
  hasChildren: Scalars['Boolean']['output'];
  hierarchyMetrics: Maybe<HierarchyMetrics>;
  name: Scalars['String']['output'];
  parent: Maybe<EntityData>;
  plans: Maybe<Array<Plan>>;
  settings: EntitySettings;
  standardSets: Maybe<Array<StandardSet>>;
  users: UserDataPage;
  uuid: Scalars['ID']['output'];
};


export type EntityDataChildrenArgs = {
  filter: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type EntityDataUsersArgs = {
  filter: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type EntityDataPage = {
  nodes: Array<EntityData>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for filtering Entities */
export type EntityFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type EntityPage = {
  nodes: Array<Entity>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type EntitySettings = {
  classManagementEnabled: Scalars['Boolean']['output'];
  schoolYearStartDate: SchoolYearStartDate;
  selfEvaluationEnabled: Scalars['Boolean']['output'];
};

/** Attributes for updating entity settings */
export type EntitySettingsAttributes = {
  schoolYearStartDate?: InputMaybe<SchoolYearStartDateAttributes>;
  selfEvaluationEnabled?: InputMaybe<SettingsAttributes>;
};

/** Autogenerated input type of EvaluateStudentMutation */
export type EvaluateStudentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  results: Array<EvaluationResultAttributes>;
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of EvaluateStudentMutation. */
export type EvaluateStudentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
  student: Maybe<Student>;
};

export type Evaluation = {
  /** @deprecated Use comments from `statement` instead */
  comments: Array<EvaluationComment>;
  id: Scalars['ID']['output'];
  plan: Plan;
  results: Array<EvaluationResult>;
  resultsHistory: Array<EvaluationResult>;
  student: Student;
};


export type EvaluationResultsHistoryArgs = {
  statementId: Scalars['ID']['input'];
};

export type EvaluationComment = {
  author: Evaluator;
  body: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  statement: PlanGroupStatement;
};

export type EvaluationResult = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  evaluation: Evaluation;
  evaluator: Evaluator;
  result: EvaluationResultValues;
  statement: PlanGroupStatement;
};

/** Attributes for evaluating students */
export type EvaluationResultAttributes = {
  result: EvaluationResultValues;
  statementId: Scalars['ID']['input'];
};

export enum EvaluationResultValues {
  /** Evaluation result with the  */
  COMPLETED = 'COMPLETED',
  /** Evaluation result with the  */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Evaluation result with the  */
  NOT_MET = 'NOT_MET',
  /** Evaluation with no result yet */
  NOT_STARTED = 'NOT_STARTED'
}

/** Evaluator */
export type Evaluator = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export enum EvidenceContextKind {
  /** Course */
  COURSE = 'COURSE',
  /** Virtual Internship */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum EvidenceKind {
  /** Assignment submission */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** Opportunity application */
  OPPORTUNITY_APPLICATION = 'OPPORTUNITY_APPLICATION',
  /** Personal Portfolio Project */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Product submission */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION',
  /** Rubric Grade */
  RUBRIC_GRADE = 'RUBRIC_GRADE'
}

export type ExternalResume = {
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};


export type ExternalResumeUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Autogenerated input type of FindOrCreateConversationMutation */
export type FindOrCreateConversationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contextId?: InputMaybe<Scalars['ID']['input']>;
  contextType?: InputMaybe<ConversationContextTypes>;
  receiverType: ConversationParticipantTypes;
  receiverUuid: Scalars['ID']['input'];
  type: ConversationTypes;
};

/** Autogenerated return type of FindOrCreateConversationMutation. */
export type FindOrCreateConversationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  conversation: Conversation;
};

/** Autogenerated input type of GenerateGoalsPerformanceIndicatorsReportMutation */
export type GenerateGoalsPerformanceIndicatorsReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  tagIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GenerateGoalsPerformanceIndicatorsReportMutation. */
export type GenerateGoalsPerformanceIndicatorsReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  performanceIndicatorsReport: Maybe<GoalsPerformanceIndicatorsReport>;
};

/** Autogenerated input type of GenerateGoalsPlanReportMutation */
export type GenerateGoalsPlanReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  planId: Scalars['ID']['input'];
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  statementId: Scalars['ID']['input'];
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GenerateGoalsPlanReportMutation. */
export type GenerateGoalsPlanReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planReport: Maybe<GoalsPlanReport>;
};

/** Autogenerated input type of GeneratePathwayReportMutation */
export type GeneratePathwayReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GeneratePathwayReportMutation. */
export type GeneratePathwayReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  pathwayReport: Maybe<PathwayReportFile>;
};

/** Autogenerated input type of GeneratePresignedUploadUrlMutation */
export type GeneratePresignedUploadUrlMutationInput = {
  assetType: Asset;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  filename: Scalars['String']['input'];
  resourceClass: ResourceClass;
};

/** Autogenerated return type of GeneratePresignedUploadUrlMutation. */
export type GeneratePresignedUploadUrlMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  url: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type GoalPerformanceData = {
  averageScore: Scalars['Float']['output'];
  results: Array<Result>;
  tag: Tag;
};

export type GoalsPerformanceIndicatorsReport = {
  id: Scalars['ID']['output'];
  schoolYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportFileUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type GoalsPerformanceIndicatorsReportUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

export type GoalsPlanReport = {
  id: Scalars['ID']['output'];
  schoolYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportFileUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type GoalsPlanReportUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Autogenerated input type of GradeCheckInSubmissionMutation */
export type GradeCheckInSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  status: SubmissionGradeStatuses;
  submissionId: Scalars['ID']['input'];
  submissionType: SubmissionTypes;
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of GradeCheckInSubmissionMutation. */
export type GradeCheckInSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  submissionGrade: SubmissionGrade;
};

/** Autogenerated input type of GradeProductSubmissionMutation */
export type GradeProductSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  results: Array<RubricGradeResultAttributes>;
  rubricId: Scalars['ID']['input'];
  submissionId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of GradeProductSubmissionMutation. */
export type GradeProductSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  grade: Maybe<ProductSubmissionRubricGrade>;
};

/** Autogenerated input type of GradeSubmissionMutation */
export type GradeSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  status: SubmissionGradeStatuses;
  submissionId: Scalars['ID']['input'];
  submissionType: SubmissionTypes;
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of GradeSubmissionMutation. */
export type GradeSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  submissionGrade: SubmissionGrade;
};

export enum GradingItemTypes {
  /**
   * Check In Questions grading status
   * @deprecated Use CHECK_IN_QUESTION instead
   */
  CHECK_IN_ANSWER = 'CHECK_IN_ANSWER',
  /** Check In Questions grading status */
  CHECK_IN_QUESTION = 'CHECK_IN_QUESTION',
  /** Product grading status */
  PRODUCT = 'PRODUCT'
}

/** Attributes for filtering students who need grading */
export type GradingNeededFilter = {
  itemId: Scalars['ID']['input'];
  itemType: GradingItemTypes;
  taskId?: InputMaybe<Scalars['ID']['input']>;
};

export enum GradingStatuses {
  /** Submissions that have already been graded */
  ALREADY_GRADED = 'ALREADY_GRADED',
  /** Submissions that have not yet been submitted */
  NOT_YET_SUBMITTED = 'NOT_YET_SUBMITTED',
  /** Submissions that are waiting for grading */
  WAITING_FOR_GRADING = 'WAITING_FOR_GRADING'
}

export type HierarchyMetrics = {
  entitiesCount: Scalars['Int']['output'];
  schoolClassesCount: Scalars['Int']['output'];
  studentsCount: Scalars['Int']['output'];
  teachersCount: Scalars['Int']['output'];
};

export type JobOutlook = {
  brightOutlook: Maybe<BrightOutlookEntry>;
  outlook: Maybe<OutlookEntry>;
  salaryMedian: Maybe<Scalars['Int']['output']>;
};

export type Knowledge = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

/** All mutations for User */
export type LearningMutationsUserRoot = {
  /** Mutation for answering a plan group statement question */
  answerPlanGroupStatementQuestion: Maybe<AnswerPlanGroupStatementQuestionMutationPayload>;
  /** Mutation for appending CheckInItems to a Task */
  appendCheckInItemsToTask: Maybe<AppendCheckInItemsToTaskMutationPayload>;
  /** Mutation for archiving a CheckInQuestion */
  archiveCheckInQuestion: Maybe<ArchiveCheckInQuestionMutationPayload>;
  /** Mutation for archiving a Presentation */
  archivePresentation: Maybe<ArchivePresentationMutationPayload>;
  /** Mutation for archiving a Slide */
  archiveSlide: Maybe<ArchiveSlideMutationPayload>;
  /** Mutation for archiving a SlideBackgroundImage */
  archiveSlideBackgroundImage: Maybe<ArchiveSlideBackgroundImageMutationPayload>;
  /** Mutation for archiving a SlideImage */
  archiveSlideImage: Maybe<ArchiveSlideImageMutationPayload>;
  /** Mutation for archiving a SlideVideo */
  archiveSlideVideo: Maybe<ArchiveSlideVideoMutationPayload>;
  /** Mutation for archiving a Task */
  archiveTask: Maybe<ArchiveTaskMutationPayload>;
  /** Mutation for archiving a Team */
  archiveTeam: Maybe<ArchiveTeamMutationPayload>;
  /** Mutation for assigning SchoolClass to Task */
  assignSchoolClassToTask: Maybe<AssignSchoolClassToTaskMutationPayload>;
  /** Mutation for assigning Student to Task */
  assignStudentToTask: Maybe<AssignStudentToTaskMutationPayload>;
  /** Mutation for assigning multiple teams to a task */
  assignTeamsToTask: Maybe<AssignTeamsToTaskMutationPayload>;
  /** Mutation for creating a CheckInQuestion */
  createCheckInQuestion: Maybe<CreateCheckInQuestionMutationPayload>;
  /** Mutation for creating a evaluation */
  createEvaluation: Maybe<CreateEvaluationMutationPayload>;
  /** Mutation for creating a EvaluationComment */
  createEvaluationComment: Maybe<CreateEvaluationCommentMutationPayload>;
  /** Mutation for creating a plan group statement evidence */
  createPlanGroupStatementEvidence: Maybe<CreatePlanGroupStatementEvidenceMutationPayload>;
  /** Mutation for creating a Presentation */
  createPresentation: Maybe<CreatePresentationMutationPayload>;
  /** Mutation for creating a Product */
  createProduct: Maybe<CreateProductMutationPayload>;
  /** Mutation for creating an Product Submission File */
  createProductSubmissionFile: Maybe<CreateProductSubmissionFileMutationPayload>;
  /** Mutation for creating an Product Submission File from Google Drive */
  createProductSubmissionFileFromGoogleDrive: Maybe<CreateProductSubmissionFileFromGoogleDriveMutationPayload>;
  /** Mutation for creating a PublicResource */
  createPublicResource: Maybe<CreatePublicResourceMutationPayload>;
  /** Mutation for creating a quick task */
  createQuickTask: Maybe<CreateQuickTaskMutationPayload>;
  /** Mutation to create a rubric criteria */
  createRubricCriteria: Maybe<CreateRubricCriteriaMutationPayload>;
  /** Mutation to create a rubric criteria label */
  createRubricCriteriaLabel: Maybe<CreateRubricCriteriaLabelMutationPayload>;
  /** Mutation for creating a Rubric Heading */
  createRubricHeading: Maybe<CreateRubricHeadingMutationPayload>;
  /** Mutation for creating a shared session token */
  createSharedSessionToken: Maybe<CreateSharedSessionTokenMutationPayload>;
  createSlide: Maybe<CreateSlideMutationPayload>;
  /** Mutation for creating a SlideBackgroundImage */
  createSlideBackgroundImage: Maybe<CreateSlideBackgroundImageMutationPayload>;
  /** Mutation for creating a SlideImage */
  createSlideImage: Maybe<CreateSlideImageMutationPayload>;
  /** Mutation for creating a SlideVideo */
  createSlideVideo: Maybe<CreateSlideVideoMutationPayload>;
  /** Mutation to create product submission for student */
  createStudentSubmission: Maybe<CreateStudentSubmissionMutationPayload>;
  /** Mutation for creating a TaskFile */
  createTaskFile: Maybe<CreateTaskFileMutationPayload>;
  /** Mutation for creating a Team */
  createTeam: Maybe<CreateTeamMutationPayload>;
  /** Mutation to create product submission for team */
  createTeamSubmission: Maybe<CreateTeamSubmissionMutationPayload>;
  /** Mutation for deleting a plan group statement evidence */
  deletePlanGroupStatementEvidence: Maybe<DeletePlanGroupStatementEvidenceMutationPayload>;
  /** Mutation for deleting an Product Submission File */
  deleteProductSubmissionFile: Maybe<DeleteProductSubmissionFileMutationPayload>;
  /** Mutation for deleting Public Resources asynchronously */
  deletePublicResources: Maybe<DeletePublicResourcesMutationPayload>;
  /** Mutation to delete a rubric criteria label */
  deleteRubricCriteriaLabel: Maybe<DeleteRubricCriteriaLabelMutationPayload>;
  /** Mutation for deleting a Rubric Heading */
  deleteRubricHeading: Maybe<DeleteRubricHeadingMutationPayload>;
  /** Mutation for deleting a Task File */
  deleteTaskFile: Maybe<DeleteTaskFileMutationPayload>;
  /** Mutation for creating a deep copy of Task and its related resources */
  duplicateTask: Maybe<DuplicateTaskMutationPayload>;
  /** Mutation for evaluating a student */
  evaluateStudent: Maybe<EvaluateStudentMutationPayload>;
  /** Mutation for finding or creating Conversation */
  findOrCreateConversation: Maybe<FindOrCreateConversationMutationPayload>;
  /** Mutation for generating Goals Performance Indicators Report */
  generateGoalsPerformanceIndicatorsReport: Maybe<GenerateGoalsPerformanceIndicatorsReportMutationPayload>;
  /** Mutation for generating Goals Plan Report */
  generateGoalsPlanReport: Maybe<GenerateGoalsPlanReportMutationPayload>;
  /** Mutation for generating Pathway Report */
  generatePathwayReport: Maybe<GeneratePathwayReportMutationPayload>;
  /** Mutation for creating a presigned upload URL */
  generatePresignedUploadUrl: Maybe<GeneratePresignedUploadUrlMutationPayload>;
  /** Mutation for grading student's or team's submission */
  gradeCheckInSubmission: Maybe<GradeCheckInSubmissionMutationPayload>;
  /** Mutation for grading student's product submission */
  gradeProductSubmission: Maybe<GradeProductSubmissionMutationPayload>;
  gradeSubmission: Maybe<GradeSubmissionMutationPayload>;
  /** Mutation to lock statement */
  lockStatement: Maybe<LockStatementMutationPayload>;
  /** Mutation for restoring a Task */
  restoreTask: Maybe<RestoreTaskMutationPayload>;
  /** Mutation for sending Message */
  sendMessage: Maybe<SendMessageMutationPayload>;
  /** Mutation for sharing a resource */
  shareResource: Maybe<ShareResourceMutationPayload>;
  /** Toggle check in question hidden */
  toggleCheckInQuestionHidden: Maybe<ToggleCheckInQuestionHiddenMutationPayload>;
  /** Mutation for toggling product hidden */
  toggleProductHidden: Maybe<ToggleProductHiddenMutationPayload>;
  /** Mutation for tracking slide visits */
  trackSlideVisit: Maybe<TrackSlideVisitMutationPayload>;
  /** Mutation for unassigning SchoolClass from Task */
  unassignSchoolClassFromTask: Maybe<UnassignSchoolClassFromTaskMutationPayload>;
  /** Mutation for unassigning Student from Task */
  unassignStudentFromTask: Maybe<UnassignStudentFromTaskMutationPayload>;
  /** Mutation for unassigning multiple teams from a task */
  unassignTeamsFromTask: Maybe<UnassignTeamsFromTaskMutationPayload>;
  /** Mutation to unlock statement */
  unlockStatement: Maybe<UnlockStatementMutationPayload>;
  /** Mutation for updating a CheckInQuestion */
  updateCheckInQuestion: Maybe<UpdateCheckInQuestionMutationPayload>;
  /** Mutation for updating an Entity settings */
  updateEntitySettings: Maybe<UpdateEntitySettingsMutationPayload>;
  /** Mutation for updating a Lti Resource */
  updateLtiResource: Maybe<UpdateLtiResourceMutationPayload>;
  /** Mutation for updating a Lti Resource */
  updateLtiResourceGrade: Maybe<UpdateLtiResourceGradeMutationPayload>;
  /** Mutation for updating a Presentation */
  updatePresentation: Maybe<UpdatePresentationMutationPayload>;
  /** Mutation for updating a Product */
  updateProduct: Maybe<UpdateProductMutationPayload>;
  /** Mutation for updating a Rubric */
  updateRubric: Maybe<UpdateRubricMutationPayload>;
  /** Mutation for updating a Rubric Criteria */
  updateRubricCriteria: Maybe<UpdateRubricCriteriaMutationPayload>;
  /** Mutation for updating a Rubric Criteria Label */
  updateRubricCriteriaLabel: Maybe<UpdateRubricCriteriaLabelMutationPayload>;
  /** Mutation for updating a Rubric Heading */
  updateRubricHeading: Maybe<UpdateRubricHeadingMutationPayload>;
  /** Mutation for updating a Slide */
  updateSlide: Maybe<UpdateSlideMutationPayload>;
  /** Mutation for updating a SlideImage */
  updateSlideImage: Maybe<UpdateSlideImageMutationPayload>;
  /** Mutation for updating a SlideVideo */
  updateSlideVideo: Maybe<UpdateSlideVideoMutationPayload>;
  /** Mutation for updating a Task */
  updateTask: Maybe<UpdateTaskMutationPayload>;
  /** Mutation for updating a Team */
  updateTeam: Maybe<UpdateTeamMutationPayload>;
};


/** All mutations for User */
export type LearningMutationsUserRootAnswerPlanGroupStatementQuestionArgs = {
  input: AnswerPlanGroupStatementQuestionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootAppendCheckInItemsToTaskArgs = {
  input: AppendCheckInItemsToTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootArchiveCheckInQuestionArgs = {
  input: ArchiveCheckInQuestionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootArchivePresentationArgs = {
  input: ArchivePresentationMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootArchiveSlideArgs = {
  input: ArchiveSlideMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootArchiveSlideBackgroundImageArgs = {
  input: ArchiveSlideBackgroundImageMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootArchiveSlideImageArgs = {
  input: ArchiveSlideImageMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootArchiveSlideVideoArgs = {
  input: ArchiveSlideVideoMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootArchiveTaskArgs = {
  input: ArchiveTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootArchiveTeamArgs = {
  input: ArchiveTeamMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootAssignSchoolClassToTaskArgs = {
  input: AssignSchoolClassToTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootAssignStudentToTaskArgs = {
  input: AssignStudentToTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootAssignTeamsToTaskArgs = {
  input: AssignTeamsToTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateCheckInQuestionArgs = {
  input: CreateCheckInQuestionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateEvaluationArgs = {
  input: CreateEvaluationMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateEvaluationCommentArgs = {
  input: CreateEvaluationCommentMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreatePlanGroupStatementEvidenceArgs = {
  input: CreatePlanGroupStatementEvidenceMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreatePresentationArgs = {
  input: CreatePresentationMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateProductArgs = {
  input: CreateProductMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateProductSubmissionFileArgs = {
  input: CreateProductSubmissionFileMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateProductSubmissionFileFromGoogleDriveArgs = {
  input: CreateProductSubmissionFileFromGoogleDriveMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreatePublicResourceArgs = {
  input: CreatePublicResourceMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateQuickTaskArgs = {
  input: CreateQuickTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateRubricCriteriaArgs = {
  input: CreateRubricCriteriaMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateRubricCriteriaLabelArgs = {
  input: CreateRubricCriteriaLabelMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateRubricHeadingArgs = {
  input: CreateRubricHeadingMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateSharedSessionTokenArgs = {
  input: CreateSharedSessionTokenMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateSlideArgs = {
  input: CreateSlideMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateSlideBackgroundImageArgs = {
  input: CreateSlideBackgroundImageMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateSlideImageArgs = {
  input: CreateSlideImageMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateSlideVideoArgs = {
  input: CreateSlideVideoMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateStudentSubmissionArgs = {
  input: CreateStudentSubmissionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateTaskFileArgs = {
  input: CreateTaskFileMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateTeamArgs = {
  input: CreateTeamMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootCreateTeamSubmissionArgs = {
  input: CreateTeamSubmissionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootDeletePlanGroupStatementEvidenceArgs = {
  input: DeletePlanGroupStatementEvidenceMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootDeleteProductSubmissionFileArgs = {
  input: DeleteProductSubmissionFileMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootDeletePublicResourcesArgs = {
  input: DeletePublicResourcesMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootDeleteRubricCriteriaLabelArgs = {
  input: DeleteRubricCriteriaLabelMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootDeleteRubricHeadingArgs = {
  input: DeleteRubricHeadingMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootDeleteTaskFileArgs = {
  input: DeleteTaskFileMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootDuplicateTaskArgs = {
  input: DuplicateTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootEvaluateStudentArgs = {
  input: EvaluateStudentMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootFindOrCreateConversationArgs = {
  input: FindOrCreateConversationMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootGenerateGoalsPerformanceIndicatorsReportArgs = {
  input: GenerateGoalsPerformanceIndicatorsReportMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootGenerateGoalsPlanReportArgs = {
  input: GenerateGoalsPlanReportMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootGeneratePathwayReportArgs = {
  input: GeneratePathwayReportMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootGeneratePresignedUploadUrlArgs = {
  input: GeneratePresignedUploadUrlMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootGradeCheckInSubmissionArgs = {
  input: GradeCheckInSubmissionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootGradeProductSubmissionArgs = {
  input: GradeProductSubmissionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootGradeSubmissionArgs = {
  input: GradeSubmissionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootLockStatementArgs = {
  input: LockStatementMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootRestoreTaskArgs = {
  input: RestoreTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootSendMessageArgs = {
  input: SendMessageMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootShareResourceArgs = {
  input: ShareResourceMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootToggleCheckInQuestionHiddenArgs = {
  input: ToggleCheckInQuestionHiddenMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootToggleProductHiddenArgs = {
  input: ToggleProductHiddenMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootTrackSlideVisitArgs = {
  input: TrackSlideVisitMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUnassignSchoolClassFromTaskArgs = {
  input: UnassignSchoolClassFromTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUnassignStudentFromTaskArgs = {
  input: UnassignStudentFromTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUnassignTeamsFromTaskArgs = {
  input: UnassignTeamsFromTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUnlockStatementArgs = {
  input: UnlockStatementMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateCheckInQuestionArgs = {
  input: UpdateCheckInQuestionMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateEntitySettingsArgs = {
  input: UpdateEntitySettingsMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateLtiResourceArgs = {
  input: UpdateLtiResourceMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateLtiResourceGradeArgs = {
  input: UpdateLtiResourceGradeMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdatePresentationArgs = {
  input: UpdatePresentationMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateProductArgs = {
  input: UpdateProductMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateRubricArgs = {
  input: UpdateRubricMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateRubricCriteriaArgs = {
  input: UpdateRubricCriteriaMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateRubricCriteriaLabelArgs = {
  input: UpdateRubricCriteriaLabelMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateRubricHeadingArgs = {
  input: UpdateRubricHeadingMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateSlideArgs = {
  input: UpdateSlideMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateSlideImageArgs = {
  input: UpdateSlideImageMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateSlideVideoArgs = {
  input: UpdateSlideVideoMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateTaskArgs = {
  input: UpdateTaskMutationInput;
};


/** All mutations for User */
export type LearningMutationsUserRootUpdateTeamArgs = {
  input: UpdateTeamMutationInput;
};

export type Lesson = ConversationContext & StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of LockStatementMutation */
export type LockStatementMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  statementId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of LockStatementMutation. */
export type LockStatementMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  student: Student;
};

export type LtiDetails = {
  isLti: Scalars['Boolean']['output'];
  isLtiSearch: Maybe<Scalars['Boolean']['output']>;
  ltiConsumerKey: Maybe<Scalars['String']['output']>;
  ltiContextId: Maybe<Scalars['String']['output']>;
  ltiResourceLinkId: Maybe<Scalars['String']['output']>;
};

export type LtiResource = {
  consumerKey: Maybe<Scalars['String']['output']>;
  contextId: Maybe<Scalars['String']['output']>;
  grade: Maybe<Scalars['Int']['output']>;
  ltiResourceLinkId: Maybe<Scalars['String']['output']>;
  productId: Maybe<Scalars['ID']['output']>;
  studentId: Maybe<Scalars['ID']['output']>;
  taskId: Maybe<Scalars['ID']['output']>;
  userId: Maybe<Scalars['ID']['output']>;
};

export type Message = {
  author: ConversationMember;
  body: Scalars['String']['output'];
  conversation: Conversation;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
};

/** The connection type for Message. */
export type MessageConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<MessageEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Message>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type MessageEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Message>;
};

/** Opportunity */
export type Opportunity = ConversationContext & {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type OutlookEntry = {
  category: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
};

export type OverallData = {
  completed: Scalars['Int']['output'];
  inProgress: Scalars['Int']['output'];
  notMet: Scalars['Int']['output'];
  notStarted: Scalars['Int']['output'];
  /** @deprecated Use plan { name } instead */
  planName: Scalars['String']['output'];
  /** @deprecated Use student { full_name } instead */
  studentFullName: Scalars['String']['output'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor: Maybe<Scalars['String']['output']>;
};

export type Pathway = {
  cluster: Cluster;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
};

export type PathwayReport = {
  clusterVisitCounts: Array<ClusterVisitCount>;
  pathwayVisitCounts: Array<PathwayVisitCount>;
  summary: PathwayVisitSummary;
  /** @deprecated Use clusterVisitCounts instead */
  visitCounts: Array<ClusterVisitCount>;
  visitResults: PathwayVisitResultPage;
};


export type PathwayReportVisitResultsArgs = {
  filter?: InputMaybe<PathwayVisitResultFilter>;
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
};

export type PathwayReportFile = {
  id: Scalars['ID']['output'];
  schoolYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type PathwayReportFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering pathway reports */
export type PathwayReportFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type PathwayReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type PathwayReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type PathwayReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type PathwayReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type PathwayVisitCount = {
  pathway: Pathway;
  visitsCount: Scalars['Int']['output'];
};

export type PathwayVisitResult = {
  clusterNames: Array<Scalars['String']['output']>;
  isEnrolled: Scalars['Boolean']['output'];
  pathwayNames: Array<Scalars['String']['output']>;
  resourceId: Scalars['ID']['output'];
  resourceName: Scalars['String']['output'];
  resourceType: Scalars['String']['output'];
  visitorEmail: Scalars['String']['output'];
  visitorId: Scalars['ID']['output'];
  visitorName: Scalars['String']['output'];
  visitorSisId: Maybe<Scalars['String']['output']>;
  visitorType: Scalars['String']['output'];
  visitsCount: Scalars['Int']['output'];
};

export type PathwayVisitResultFilter = {
  clusterIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  fullNameOrSisIdCont?: InputMaybe<Scalars['String']['input']>;
  pathwayIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type PathwayVisitResultPage = {
  nodes: Array<PathwayVisitResult>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type PathwayVisitSummary = {
  clustersCount: Scalars['Int']['output'];
  engagementsCount: Scalars['Int']['output'];
  pathwaysCount: Scalars['Int']['output'];
  resourcesCount: Scalars['Int']['output'];
  studentsCount: Scalars['Int']['output'];
  usersCount: Scalars['Int']['output'];
};

export type Personality = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type Plan = {
  description: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `results` and `coments` in `PlanGroupStatment` instead */
  evaluation: Maybe<Evaluation>;
  groups: Array<PlanGroup>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  progress: PlanProgress;
};

/** Attributes for filtering Plans */
export type PlanFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type PlanGroup = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  statements: Array<PlanGroupStatement>;
  step: Maybe<Scalars['Int']['output']>;
};

export type PlanGroupBreakdown = {
  completed: Scalars['Int']['output'];
  group: PlanGroup;
  inProgress: Scalars['Int']['output'];
  notMet: Scalars['Int']['output'];
  notStarted: Scalars['Int']['output'];
};

export type PlanGroupStatement = {
  comments: Array<EvaluationComment>;
  evidences: Array<PlanGroupStatementEvidence>;
  id: Scalars['ID']['output'];
  isLocked: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  question: Maybe<PlanGroupStatementQuestion>;
  results: Array<EvaluationResult>;
  step: Maybe<Scalars['Int']['output']>;
};

export type PlanGroupStatementBreakdown = {
  completed: Scalars['Int']['output'];
  inProgress: Scalars['Int']['output'];
  notMet: Scalars['Int']['output'];
  notStarted: Scalars['Int']['output'];
};

export type PlanGroupStatementEvidence = {
  contextType: Maybe<EvidenceContextKind>;
  id: Maybe<Scalars['ID']['output']>;
  isTeamSubmission: Scalars['Boolean']['output'];
  itemId: Maybe<Scalars['ID']['output']>;
  label: Scalars['String']['output'];
  rubricScores: Maybe<Array<RubricScore>>;
  service: ServiceNames;
  type: EvidenceKind;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type PlanGroupStatementEvidenceItemAttributes = {
  itemId: Scalars['ID']['input'];
  itemType: EvidenceKind;
};

export type PlanGroupStatementQuestion = {
  answer: Maybe<PlanGroupStatementQuestionAnswer>;
  id: Scalars['ID']['output'];
  options: Array<PlanGroupStatementQuestionOption>;
  questionType: PlanGroupStatementQuestionTypes;
  text: Scalars['String']['output'];
};

export type PlanGroupStatementQuestionAnswer = {
  answer: Array<Scalars['String']['output']>;
  author: Maybe<Evaluator>;
  id: Scalars['ID']['output'];
};

export type PlanGroupStatementQuestionOption = {
  id: Scalars['ID']['output'];
  option: Scalars['String']['output'];
  step: Scalars['Int']['output'];
};

export enum PlanGroupStatementQuestionTypes {
  /** Long text question type */
  LONG_TEXT = 'LONG_TEXT',
  /** Multiple choice question type */
  MULTIPLE_CHOICE = 'MULTIPLE_CHOICE',
  /** Multiple choice dropdown question type */
  MULTIPLE_CHOICE_DROPDOWN = 'MULTIPLE_CHOICE_DROPDOWN',
  /** Short text question type */
  SHORT_TEXT = 'SHORT_TEXT',
  /** Single choice question type */
  SINGLE_CHOICE = 'SINGLE_CHOICE'
}

export type PlanGroupStatementResult = {
  answer: Maybe<Array<Scalars['String']['output']>>;
  evidencesCount: Scalars['Int']['output'];
  lastUpdatedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  status: EvaluationResultValues;
  studentName: Scalars['String']['output'];
  studentSisId: Maybe<Scalars['String']['output']>;
};

export type PlanGroupStatementResultFilter = {
  fullNameOrSisIdCont?: InputMaybe<Scalars['String']['input']>;
  resultEq?: InputMaybe<EvaluationResultValues>;
};

export type PlanGroupStatementResultPage = {
  nodes: Array<PlanGroupStatementResult>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type PlanGroupStatementResultSortAttributes = {
  column?: InputMaybe<PlanGroupStatementResultSortColumns>;
  order?: InputMaybe<SortOrders>;
};

export enum PlanGroupStatementResultSortColumns {
  /** Sorting by Evidences count */
  EVIDENCES_COUNT = 'EVIDENCES_COUNT',
  /** Sorting by Last updated at */
  LAST_UPDATED_AT = 'LAST_UPDATED_AT',
  /** Sorting by Status */
  STATUS = 'STATUS',
  /** Sorting by Student name */
  STUDENT_NAME = 'STUDENT_NAME',
  /** Sorting by Student sis id */
  STUDENT_SIS_ID = 'STUDENT_SIS_ID'
}

export type PlanPage = {
  nodes: Array<Plan>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type PlanProgress = {
  completed: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export type PlanReport = {
  groups: Array<PlanGroupBreakdown>;
  statementBreakdown: PlanGroupStatementBreakdown;
  statementResults: PlanGroupStatementResultPage;
  summary: Summary;
};


export type PlanReportStatementBreakdownArgs = {
  statementId: Scalars['ID']['input'];
};


export type PlanReportStatementResultsArgs = {
  filter?: InputMaybe<PlanGroupStatementResultFilter>;
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<PlanGroupStatementResultSortAttributes>;
  statementId: Scalars['ID']['input'];
};

/** Attributes for filtering plan reports */
export type PlanReportFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  planId: Scalars['ID']['input'];
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type PlanReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type PlanReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type PlanReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type PlanReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type Portfolio = {
  careerExperience: Maybe<CareerExperienceEntry>;
  careerExperiences: Array<CareerExperienceEntry>;
  plan: Plan;
  plans: Array<Plan>;
  projects: PortfolioProjectConnection;
  resumes: Array<ExternalResume>;
  sharedResume: Maybe<Resume>;
  studentId: Scalars['ID']['output'];
};


export type PortfolioCareerExperienceArgs = {
  id: Scalars['ID']['input'];
};


export type PortfolioPlanArgs = {
  id: Scalars['ID']['input'];
};


export type PortfolioProjectsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  type: PortfolioKind;
};

export enum PortfolioKind {
  /** Portfolio projects created in Careers */
  CAREERS = 'CAREERS',
  /** Portfolio projects created in Learning */
  LEARNING = 'LEARNING',
  /**
   * Portfolio projects created in Learning (PBL)
   * @deprecated {:reason=>"Use LEARNING instead"}
   */
  PBL = 'PBL',
  /** Personal portfolio projects */
  PERSONAL = 'PERSONAL'
}

export type PortfolioProject = {
  contextType: Maybe<PortfolioProjectKind>;
  description: Maybe<Scalars['String']['output']>;
  finishedAt: Scalars['ISO8601Date']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  isTeamSubmission: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  parentName: Maybe<Scalars['String']['output']>;
  portfolioKind: PortfolioKind;
  resourceClass: PortfolioResourceClass;
  startedAt: Maybe<Scalars['ISO8601Date']['output']>;
  submission: PortfolioSubmission;
  /** @deprecated Use `finished_at` instead */
  submittedAt: Scalars['ISO8601DateTime']['output'];
  /** @deprecated Use `is_team_submission` instead */
  teamSubmission: Scalars['Boolean']['output'];
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `context_type` instead */
  type: Maybe<PortfolioProjectKind>;
};

/** The connection type for PortfolioProject. */
export type PortfolioProjectConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<PortfolioProjectEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<PortfolioProject>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PortfolioProjectEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<PortfolioProject>;
};

export enum PortfolioProjectKind {
  /** Course */
  COURSE = 'COURSE',
  /**
   * Lesson
   * @deprecated Use `COURSE` instead
   */
  LESSON = 'LESSON',
  /** Opportunity */
  OPPORTUNITY = 'OPPORTUNITY',
  /** Virtual Internship */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum PortfolioResourceClass {
  /** Portfolio projects created in Careers */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** All portfolio projects */
  OPPORTUNITY_APPLICATION = 'OPPORTUNITY_APPLICATION',
  /** Personal portfolio projects */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Portfolio projects created in Learning */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION'
}

export type PortfolioSubmission = {
  files: Array<PortfolioSubmissionFile>;
  status: Maybe<SubmissionStatus>;
};

export type PortfolioSubmissionFile = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  googleWeblink: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  isOwner: Scalars['Boolean']['output'];
  source: Maybe<SubmissionFileSource>;
  submitter: Maybe<ProductSubmissionFileSubmitter>;
  url: Scalars['String']['output'];
};

export type Presentation = {
  color: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  slideBackgroundImages: Array<SlideBackgroundImage>;
  slides: Array<Slide>;
  status: PresentationStatuses;
  transition: Maybe<Scalars['String']['output']>;
  type: PresentationTypes;
  typography: Maybe<Scalars['String']['output']>;
};

export type PresentationAttributes = {
  id: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

/** Attributes for creating and updating presentation slides and their subslides */
export type PresentationSlideAttributes = {
  slideId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
  subslides?: InputMaybe<Array<PresentationSlideAttributes>>;
};

export enum PresentationStatuses {
  /** Status for draft presentations */
  DRAFT = 'DRAFT',
  /** Status for published presentations */
  PUBLISHED = 'PUBLISHED'
}

export enum PresentationTypes {
  /** Status for full screen presentations */
  FULL_SCREEN = 'FULL_SCREEN',
  /** Status for legacy presentations */
  LEGACY = 'LEGACY'
}

/** Options for AWS Presigned URLs */
export type PresignedUrlOptions = {
  responseContentDisposition?: InputMaybe<Scalars['String']['input']>;
};

export type Product = ConversationContext & StudentBadgeResource & {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  /** Number of students + teams (assigned to Task by current user) awaiting grading */
  gradingNeededCount: Scalars['Int']['output'];
  /** @deprecated Use `isHidden` instead */
  hidden: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  isHidden: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  quickTask: Maybe<Task>;
  rubrics: Array<Rubric>;
  rubricsUrl: Maybe<Scalars['String']['output']>;
  step: Maybe<Scalars['Int']['output']>;
  submission: Maybe<ProductSubmission>;
  /** @deprecated Use `gradingNeededCount` instead */
  submissionsGradingNeededCount: Scalars['Int']['output'];
};


export type ProductSubmissionArgs = {
  submitterType?: InputMaybe<ProductSubmissionSubmitterTypes>;
  submitterUuid: InputMaybe<Scalars['ID']['input']>;
};

export type ProductSubmission = ConversationContext & {
  createdAt: Scalars['ISO8601DateTime']['output'];
  files: Array<ProductSubmissionFile>;
  grade: Maybe<ProductSubmissionRubricGrade>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  productId: Scalars['ID']['output'];
  students: Array<Student>;
  team: Maybe<Team>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type ProductSubmissionFile = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  googleWeblink: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  source: Scalars['String']['output'];
  submitter: ProductSubmissionFileSubmitter;
  url: Scalars['String']['output'];
};


export type ProductSubmissionFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Returns who submitted the product submission file */
export type ProductSubmissionFileSubmitter = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type ProductSubmissionRubricGrade = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  lastGradedBy: Maybe<User>;
  pointsAvailable: Scalars['Int']['output'];
  pointsScored: Scalars['Int']['output'];
  results: Array<RubricGradeResult>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum ProductSubmissionSubmitterTypes {
  /** Submission made by single student */
  STUDENT = 'STUDENT',
  /** Submission made by team */
  TEAM = 'TEAM'
}

export type PublicResource = {
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};

export enum ReportFileUploadStatuses {
  /** Upload completed */
  COMPLETED = 'COMPLETED',
  /** Upload failed */
  FAILED = 'FAILED',
  /** Upload in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Upload not started */
  NOT_STARTED = 'NOT_STARTED'
}

/** Attributes for filtering reports filters query */
export type ReportFiltersFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export enum ReportTypes {
  /** Assessment */
  ASSESSMENT = 'ASSESSMENT',
  /** Career Pathway */
  CAREER_PATHWAY = 'CAREER_PATHWAY',
  /** Career Review Survey */
  CAREER_REVIEW_SURVEY = 'CAREER_REVIEW_SURVEY',
  /** College & Future */
  COLLEGE_AND_FUTURE = 'COLLEGE_AND_FUTURE',
  /** Goal Performance Indicators */
  GOAL_PERFORMANCE_INDICATORS = 'GOAL_PERFORMANCE_INDICATORS',
  /** Goal Plans */
  GOAL_PLANS = 'GOAL_PLANS',
  /** Opportunities */
  OPPORTUNITIES = 'OPPORTUNITIES'
}

export enum ReportUploadStatuses {
  /** Upload completed */
  COMPLETED = 'COMPLETED',
  /** Upload failed */
  FAILED = 'FAILED',
  /** Upload in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Upload not started */
  NOT_STARTED = 'NOT_STARTED'
}

export type Reports = {
  pathwayReport: Maybe<PathwayReport>;
  planReport: Maybe<PlanReport>;
  tagReport: Maybe<TagReport>;
};


export type ReportsPathwayReportArgs = {
  filter: InputMaybe<PathwayReportFilter>;
};


export type ReportsPlanReportArgs = {
  filter: PlanReportFilter;
};

export enum ResourceClass {
  /** ProductSubmissionFile resource */
  PRODUCT_SUBMISSION_FILE = 'PRODUCT_SUBMISSION_FILE',
  /** Public resource */
  PUBLIC_RESOURCE = 'PUBLIC_RESOURCE',
  /** SlideBackgroundImage resource */
  SLIDE_BACKGROUND_IMAGE = 'SLIDE_BACKGROUND_IMAGE',
  /** SlideImage resource */
  SLIDE_IMAGE = 'SLIDE_IMAGE',
  /** SlideVideo resource */
  SLIDE_VIDEO = 'SLIDE_VIDEO',
  /** Task resource */
  TASK = 'TASK',
  /** Task File resource */
  TASK_FILE = 'TASK_FILE'
}

/** Resource Duplicate Owner */
export type ResourceDuplicateOwner = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Autogenerated input type of RestoreTaskMutation */
export type RestoreTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RestoreTaskMutation. */
export type RestoreTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Task;
};

export type Result = {
  contextName: Scalars['String']['output'];
  gradedAt: Scalars['ISO8601Date']['output'];
  origin: ServiceNames;
  rubricName: Scalars['String']['output'];
  scoreEarned: Scalars['Int']['output'];
  tag: Tag;
};

export type Resume = {
  avatarUrl: Maybe<Scalars['String']['output']>;
  bio: Maybe<Scalars['String']['output']>;
  contactLinks: Array<ContactLink>;
  educations: Array<ResumeItem>;
  experiences: Array<ResumeItem>;
  externalResumes: Array<ExternalResume>;
  extraCurriculars: Array<ResumeItem>;
  highlightedBadges: Array<StudentBadge>;
  highlightedProjects: Array<PortfolioProject>;
  highlightedProjectsEnabled: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  shareCode: Maybe<Scalars['String']['output']>;
  sharedUrlEnabled: Scalars['Boolean']['output'];
  uuid: Scalars['ID']['output'];
};

export type ResumeItem = {
  description: Maybe<Scalars['String']['output']>;
  endedAt: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  startedAt: Scalars['ISO8601Date']['output'];
  type: ResumeItemTypes;
};

export enum ResumeItemTypes {
  /** Education Resume Item */
  EDUCATION = 'EDUCATION',
  /** Experience Resume Item */
  EXPERIENCE = 'EXPERIENCE',
  /** Extra curricular Resume Item */
  EXTRA_CURRICULAR = 'EXTRA_CURRICULAR'
}

/** All queries for User [Learning] */
export type Root = {
  academyCourses: Array<AcademyCourse>;
  adminDashboard: Maybe<AdminDashboard>;
  assignedTasks: TaskPage;
  catalog: Maybe<Catalog>;
  catalogs: CatalogPage;
  checkInQuestion: CheckInQuestion;
  checkInQuestions: CheckInQuestionPage;
  clusters: Array<Cluster>;
  conversation: Maybe<Conversation>;
  conversationGroup: ConversationGroup;
  conversationGroups: ConversationGroupConnection;
  conversationRecipients: ConversationRecipientConnection;
  conversations: ConversationConnection;
  goalsPerformanceIndicatorsReport: Maybe<GoalsPerformanceIndicatorsReport>;
  goalsPlanReport: Maybe<GoalsPlanReport>;
  ltiResource: Maybe<LtiResource>;
  myTasks: TaskPage;
  myTasksActivityLog: StudentActivityLogEntryConnection;
  pathwayReport: Maybe<PathwayReportFile>;
  pathwayReportFilters: PathwayReportFilters;
  plan: Plan;
  planReportFilters: PlanReportFilters;
  plans: PlanPage;
  reports: Maybe<Reports>;
  rubric: Maybe<Rubric>;
  schoolClass: Maybe<SchoolClass>;
  schoolClassActivityLog: SchoolClassActivityLogEntryConnection;
  schoolClasses: SchoolClassPage;
  schoolClassesAssignedToTask: SchoolClassPage;
  sharedResume: Resume;
  slide: Maybe<Slide>;
  slides: SlidePage;
  standardSetSubjects: Array<StandardSubject>;
  standardTasks: Array<Task>;
  standardsHierarchy: Array<Standard>;
  student: Maybe<Student>;
  studentActivityLog: StudentActivityLogEntryConnection;
  studentReport: StudentReport;
  students: StudentPage;
  studentsAssignedToTask: StudentConnection;
  tagReportFilters: TagReportFilters;
  tags: TagPage;
  task: Task;
  taskTemplates: Array<Task>;
  tasks: TaskPage;
  teacherDashboard: TeacherDashboard;
  track: Maybe<Track>;
  tracks: TrackPage;
  unit: Maybe<Unit>;
  userInfo: UserInfo;
};


/** All queries for User [Learning] */
export type RootAssignedTasksArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootCatalogArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootCatalogsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootCheckInQuestionArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootCheckInQuestionsArgs = {
  filter?: InputMaybe<CheckInQuestionFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootConversationArgs = {
  id: Scalars['ID']['input'];
  markAsRead?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User [Learning] */
export type RootConversationGroupArgs = {
  with: InputMaybe<ConversationParticipantFilter>;
};


/** All queries for User [Learning] */
export type RootConversationGroupsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootConversationRecipientsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConversationRecipientFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootConversationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  with?: InputMaybe<ConversationParticipantFilter>;
};


/** All queries for User [Learning] */
export type RootGoalsPerformanceIndicatorsReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootGoalsPlanReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootLtiResourceArgs = {
  contextId?: InputMaybe<Scalars['String']['input']>;
  ltiResourceLinkId?: InputMaybe<Scalars['String']['input']>;
};


/** All queries for User [Learning] */
export type RootMyTasksArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User [Learning] */
export type RootMyTasksActivityLogArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootPathwayReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootPathwayReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
};


/** All queries for User [Learning] */
export type RootPlanArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootPlanReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
  planId: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootPlansArgs = {
  filter: InputMaybe<PlanFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User [Learning] */
export type RootRubricArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootSchoolClassArgs = {
  uuid: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootSchoolClassActivityLogArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootSchoolClassesAssignedToTaskArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  taskId: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootSharedResumeArgs = {
  shareCode: Scalars['String']['input'];
};


/** All queries for User [Learning] */
export type RootSlideArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootSlidesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootStandardSetSubjectsArgs = {
  setId: Scalars['String']['input'];
};


/** All queries for User [Learning] */
export type RootStandardTasksArgs = {
  standardGuid: Scalars['String']['input'];
};


/** All queries for User [Learning] */
export type RootStandardsHierarchyArgs = {
  grade: Scalars['String']['input'];
  setId: Scalars['String']['input'];
  subject: Scalars['String']['input'];
};


/** All queries for User [Learning] */
export type RootStudentArgs = {
  uuid: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootStudentActivityLogArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootStudentReportArgs = {
  planId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootStudentsArgs = {
  filter?: InputMaybe<StudentFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootStudentsAssignedToTaskArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  excludeSchoolClassStudents?: InputMaybe<Scalars['Boolean']['input']>;
  filter?: InputMaybe<StudentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  taskId: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootTagReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
  tagIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};


/** All queries for User [Learning] */
export type RootTagsArgs = {
  filter?: InputMaybe<TagFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootTaskArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User [Learning] */
export type RootTasksArgs = {
  filter?: InputMaybe<TaskFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User [Learning] */
export type RootTeacherDashboardArgs = {
  userUuid?: InputMaybe<Scalars['ID']['input']>;
};


/** All queries for User [Learning] */
export type RootTrackArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User [Learning] */
export type RootTracksArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User [Learning] */
export type RootUnitArgs = {
  id: Scalars['ID']['input'];
};

export type Rubric = {
  canEdit: Scalars['Boolean']['output'];
  criteriaLabels: Array<RubricCriteriaLabel>;
  criterias: Array<RubricCriteria>;
  description: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  hasAlignedStatements: Scalars['Boolean']['output'];
  headings: Array<RubricHeading>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  pointsAvailable: Scalars['Int']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricCriteria = {
  id: Scalars['ID']['output'];
  rubricCriteriaLabelId: Scalars['ID']['output'];
  rubricHeadingId: Scalars['ID']['output'];
  text: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricCriteriaLabel = {
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  score: Scalars['Int']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricGradeResult = {
  criteriaId: Scalars['ID']['output'];
  trait: Maybe<Scalars['String']['output']>;
};

/** Attributes for creating and updating RubricGradeResult */
export type RubricGradeResultAttributes = {
  criteriaId: Scalars['ID']['input'];
  trait?: InputMaybe<Scalars['String']['input']>;
};

export type RubricHeading = {
  id: Scalars['ID']['output'];
  multiplier: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricHeadingPage = {
  nodes: Array<RubricHeading>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type RubricScore = {
  currentScore: Scalars['Int']['output'];
  label: Scalars['String']['output'];
  maxScore: Scalars['Int']['output'];
};

export type SchoolClass = {
  activityLog: SchoolClassActivityLogEntryConnection;
  currentTasksCount: Scalars['Int']['output'];
  entity: Entity;
  gradingNeeded: Scalars['Boolean']['output'];
  isDemo: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  students: StudentPage;
  studentsCount: Scalars['Int']['output'];
  team: Team;
  teams: Array<Team>;
  users: Maybe<UserPage>;
  uuid: Scalars['ID']['output'];
};


export type SchoolClassActivityLogArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


export type SchoolClassGradingNeededArgs = {
  filter: GradingNeededFilter;
};


export type SchoolClassStudentsArgs = {
  filter?: InputMaybe<StudentFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type SchoolClassTeamArgs = {
  uuid: Scalars['ID']['input'];
};


export type SchoolClassTeamsArgs = {
  filter?: InputMaybe<TeamFilter>;
  scope?: InputMaybe<ArchivableStatus>;
};


export type SchoolClassUsersArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** SchoolClassActivity Context */
export type SchoolClassActivityContext = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type SchoolClassActivityLogEntry = {
  context: Maybe<SchoolClassActivityContext>;
  /** @deprecated Use updatedAt instead */
  createdAt: Scalars['ISO8601DateTime']['output'];
  schoolClass: SchoolClass;
  target: SchoolClassActivityTarget;
  team: Maybe<Team>;
  type: SchoolClassActivityTypes;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for SchoolClassActivityLogEntry. */
export type SchoolClassActivityLogEntryConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<SchoolClassActivityLogEntryEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<SchoolClassActivityLogEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type SchoolClassActivityLogEntryEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<SchoolClassActivityLogEntry>;
};

/** SchoolClassActivity Target */
export type SchoolClassActivityTarget = {
  name: Scalars['String']['output'];
};

export enum SchoolClassActivityTypes {
  /** Check in question answer submitted activity type */
  CHECK_IN_QUESTION_ANSWER_SUBMITTED = 'CHECK_IN_QUESTION_ANSWER_SUBMITTED',
  /** Product submission submitted activity type */
  PRODUCT_SUBMISSION_SUBMITTED = 'PRODUCT_SUBMISSION_SUBMITTED',
  /** Student added activity type */
  STUDENT_ADDED = 'STUDENT_ADDED',
  /** Student removed activity type */
  STUDENT_REMOVED = 'STUDENT_REMOVED',
  /** User added activity type */
  USER_ADDED = 'USER_ADDED',
  /** User removed activity type */
  USER_REMOVED = 'USER_REMOVED'
}

export type SchoolClassData = {
  currentTasksCount: Scalars['Int']['output'];
  entityName: Scalars['String']['output'];
  isDemo: Scalars['Boolean']['output'];
  schoolClassName: Scalars['String']['output'];
  schoolClassUuid: Scalars['ID']['output'];
  studentsCount: Scalars['Int']['output'];
};

/** Attributes for filtering SchoolClasses */
export type SchoolClassFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type SchoolClassPage = {
  nodes: Array<SchoolClass>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type SchoolYearStartDate = {
  day: Scalars['Int']['output'];
  month: Scalars['Int']['output'];
};

/** Attributes for updating entity school year start date */
export type SchoolYearStartDateAttributes = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  force?: InputMaybe<Scalars['Boolean']['input']>;
  value: DateAttributes;
};

export type SelfEvaluationEnabledSettings = {
  origin: StudentSettingsOrigins;
  value: Scalars['Boolean']['output'];
};

/** Autogenerated input type of SendMessageMutation */
export type SendMessageMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  conversationId: Scalars['ID']['input'];
};

/** Autogenerated return type of SendMessageMutation. */
export type SendMessageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  message: Message;
};

export enum ServiceNames {
  /** Careers service */
  CAREERS = 'CAREERS',
  /** Learning service */
  LEARNING = 'LEARNING'
}

/** Attributes for settings */
export type SettingsAttributes = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  force?: InputMaybe<Scalars['Boolean']['input']>;
  value: Scalars['Boolean']['input'];
};

/** Autogenerated input type of ShareResourceMutation */
export type ShareResourceMutationInput = {
  allowLogin?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  resourceId: Scalars['ID']['input'];
  resourceType: SharedResourceTypes;
};

/** Autogenerated return type of ShareResourceMutation. */
export type ShareResourceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  sharedResource: SharedResource;
};

export type SharedResource = {
  allowLogin: Scalars['Boolean']['output'];
  code: Scalars['String']['output'];
};

export enum SharedResourceTypes {
  /** Task resource */
  TASK = 'TASK'
}

export type Skills = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type Slide = {
  backgroundColor: Maybe<Scalars['String']['output']>;
  backgroundImage: Maybe<Scalars['String']['output']>;
  checkInGroups: Array<CheckInGroup>;
  checkInQuestions: Array<CheckInQuestion>;
  content: SlideContent;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  iframeUrl: Maybe<Scalars['String']['output']>;
  isShared: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  notes: Maybe<Scalars['String']['output']>;
  products: Array<Product>;
  slideBackgroundImages: Array<SlideBackgroundImage>;
  step: Scalars['Int']['output'];
  subslides: Maybe<Array<Slide>>;
  template: Scalars['String']['output'];
};

export type SlideAttributes = {
  id: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type SlideBackgroundImage = {
  id: Scalars['ID']['output'];
  thumbnailUrl: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type SlideContent = {
  id: Scalars['ID']['output'];
  images: Array<SlideImage>;
  links: Array<SlideLink>;
  texts: Array<SlideTextItem>;
  videos: Array<SlideVideo>;
};

export type SlideImage = {
  contentId: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  position: Maybe<Scalars['String']['output']>;
  style: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type SlideLink = {
  contentId: Scalars['ID']['output'];
  targetId: Scalars['ID']['output'];
  targetName: Scalars['String']['output'];
  text: Scalars['String']['output'];
};

/** Attributes for creating and updating slide links */
export type SlideLinksAttributes = {
  contentId: Scalars['ID']['input'];
  targetId: Scalars['ID']['input'];
  targetName: Scalars['String']['input'];
  text: Scalars['String']['input'];
};

export type SlidePage = {
  nodes: Array<Slide>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for creating and updating slide products */
export type SlideProductAttributes = {
  productId: Scalars['ID']['input'];
  step?: InputMaybe<Scalars['Int']['input']>;
};

export type SlideTextItem = {
  contentId: Maybe<Scalars['String']['output']>;
  style: Maybe<Scalars['String']['output']>;
  type: Maybe<Scalars['String']['output']>;
  value: Maybe<Scalars['String']['output']>;
};

/** Attributes for creating and updating slide text items */
export type SlideTextItemsAttributes = {
  contentId: Scalars['ID']['input'];
  style: Scalars['String']['input'];
  type: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type SlideVideo = {
  contentId: Scalars['String']['output'];
  filename: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  url: Maybe<Scalars['String']['output']>;
  videoUrl: Maybe<Scalars['String']['output']>;
};

export enum SortOrders {
  /** Ascending order */
  ASC = 'ASC',
  /** Descending order */
  DESC = 'DESC'
}

export type Standard = {
  children: Array<Standard>;
  grade: Scalars['String']['output'];
  guid: Scalars['ID']['output'];
  standardNumber: Scalars['String']['output'];
  standardText: Scalars['String']['output'];
  subject: Scalars['String']['output'];
};

export type StandardSet = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  setId: Scalars['ID']['output'];
};

export type StandardSubject = {
  grades: Array<Scalars['String']['output']>;
  name: Scalars['String']['output'];
};

export type Student = ConversationMember & ConversationParticipant & Evaluator & ProductSubmissionFileSubmitter & SchoolClassActivityTarget & TeamCheckInSubmissionSubmitter & {
  conversation: Maybe<Conversation>;
  conversationGroups: ConversationGroupConnection;
  conversations: ConversationConnection;
  currentTasks: StudentTaskConnection;
  currentTasksCount: Scalars['Int']['output'];
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  gradYear: Maybe<Scalars['Int']['output']>;
  hasPlans: Scalars['Boolean']['output'];
  isArchived: Scalars['Boolean']['output'];
  isAssignedToTask: Scalars['Boolean']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  plan: Plan;
  plans: Array<Plan>;
  portfolio: Portfolio;
  settings: StudentSettings;
  sisId: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};


export type StudentConversationArgs = {
  id: Scalars['ID']['input'];
};


export type StudentConversationGroupsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


export type StudentConversationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  with: ConversationParticipantFilter;
};


export type StudentCurrentTasksArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


export type StudentIsAssignedToTaskArgs = {
  taskId: Scalars['ID']['input'];
  teamId?: InputMaybe<Scalars['ID']['input']>;
};


export type StudentPlanArgs = {
  id: Scalars['ID']['input'];
};

/** StudentActivity Context */
export type StudentActivityContext = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type StudentActivityLogEntry = {
  context: Maybe<StudentActivityContext>;
  /** @deprecated Use updatedAt instead */
  createdAt: Scalars['ISO8601DateTime']['output'];
  student: Student;
  team: Maybe<Team>;
  type: Maybe<StudentActivityTypes>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for StudentActivityLogEntry. */
export type StudentActivityLogEntryConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<StudentActivityLogEntryEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<StudentActivityLogEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type StudentActivityLogEntryEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<StudentActivityLogEntry>;
};

export enum StudentActivityTypes {
  /** Check in question answer student activity type */
  CHECK_IN_QUESTION_ANSWER = 'CHECK_IN_QUESTION_ANSWER',
  /** Product submission student activity type */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION'
}

export type StudentBadge = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  isHighlighted: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  resource: StudentBadgeResource;
  thumbnailUrl: Scalars['String']['output'];
};

/** Returns for which resource badge was awarded */
export type StudentBadgeResource = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** The connection type for Student. */
export type StudentConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<StudentEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Student>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type StudentEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Student>;
};

/** Attributes for filtering Students */
export type StudentFilter = {
  fullNameCont?: InputMaybe<Scalars['String']['input']>;
  gradingStatus?: InputMaybe<StudentGradingStatusInput>;
};

export type StudentGradingStatusInput = {
  itemId: Scalars['ID']['input'];
  itemType: GradingItemTypes;
  status: GradingStatuses;
  taskId?: InputMaybe<Scalars['ID']['input']>;
};

export type StudentPage = {
  nodes: Array<Student>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type StudentReport = {
  goalPerformanceIndicatorsData: Array<GoalPerformanceData>;
  overallData: OverallData;
  plan: Plan;
  student: Student;
};

export type StudentSettings = {
  selfEvaluationEnabled: SelfEvaluationEnabledSettings;
};

export enum StudentSettingsOrigins {
  /** Default system settings value */
  DEFAULT = 'DEFAULT',
  /** Settings value set individually for student */
  INDIVIDUAL = 'INDIVIDUAL',
  /** Settings value set on student's entity/class */
  INHERITED = 'INHERITED'
}

export type StudentTask = {
  assignedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  gradingNeeded: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  originator: Maybe<User>;
  team: Maybe<Team>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
};

/** The connection type for StudentTask. */
export type StudentTaskConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<StudentTaskEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<StudentTask>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type StudentTaskEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<StudentTask>;
};

export enum SubmissionFileSource {
  /** Submissions uploaded from Google Drive */
  GOOGLE = 'GOOGLE',
  /** Submissions uploaded from disk */
  LOCAL = 'LOCAL'
}

export type SubmissionGrade = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  lastGradedBy: Maybe<User>;
  status: SubmissionGradeStatuses;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum SubmissionGradeStatuses {
  /** Status for accepted submission grades */
  ACCEPTED = 'ACCEPTED',
  /** Status for not accepted submission grades */
  NOT_ACCEPTED = 'NOT_ACCEPTED'
}

export enum SubmissionStatus {
  /** Submissions of draft status */
  DRAFT = 'DRAFT',
  /** Submissions of submitted status */
  SUBMITTED = 'SUBMITTED'
}

export enum SubmissionTypes {
  /**
   * Check-in answer made by individual student
   * @deprecated Use CHECK_IN_QUESTION_ANSWER instead
   */
  CHECK_IN = 'CHECK_IN',
  /** Check-in answer made by individual student */
  CHECK_IN_ANSWER = 'CHECK_IN_ANSWER',
  /** Team check-in submission */
  TEAM_CHECK_IN_SUBMISSION = 'TEAM_CHECK_IN_SUBMISSION'
}

/** Attributes for creating and updating subslides */
export type SubslideAttributes = {
  slideId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type Summary = {
  averageCompletion: Scalars['Float']['output'];
  studentsCompleted: Scalars['Int']['output'];
  studentsInProgress: Scalars['Int']['output'];
  studentsTotal: Scalars['Int']['output'];
};

export type Tag = {
  hasEntities: Scalars['Boolean']['output'];
  hasRubricHeadings: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  isDefault: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  rubricHeadings: RubricHeadingPage;
  type: TagTypes;
};


export type TagRubricHeadingsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for filtering Tags */
export type TagFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<TagTypes>;
};

export type TagPage = {
  nodes: Array<Tag>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type TagPeriod = {
  averageScore: Scalars['Float']['output'];
  period: Scalars['Int']['output'];
  periodEnd: Scalars['ISO8601Date']['output'];
  periodStart: Scalars['ISO8601Date']['output'];
  studentsCount: Scalars['Int']['output'];
};

export type TagReport = {
  studentsCount: Scalars['Int']['output'];
  tagSummary: TagSummary;
  tagsResults: TagResultPage;
};


export type TagReportTagSummaryArgs = {
  filter: TagReportSummaryFilter;
};


export type TagReportTagsResultsArgs = {
  filter: TagReportResultsFilter;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<TagReportResultsSortAttributes>;
};

export type TagReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type TagReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type TagReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type TagReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for filtering tag reports */
export type TagReportResultsFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  resultsFilter?: InputMaybe<TagReportTagResultsFilter>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear: Scalars['Int']['input'];
  tagIds: Array<Scalars['ID']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type TagReportResultsSortAttributes = {
  column?: InputMaybe<TagReportResultsSortColumns>;
  order?: InputMaybe<SortOrders>;
};

export enum TagReportResultsSortColumns {
  /** Sorting by graded at */
  GRADED_AT = 'GRADED_AT',
  /** Sorting by rubric name */
  RUBRIC_NAME = 'RUBRIC_NAME',
  /** Sorting by Student name */
  STUDENT_NAME = 'STUDENT_NAME',
  /** Sorting by Student sis id */
  STUDENT_SIS_ID = 'STUDENT_SIS_ID'
}

/** Attributes for filtering summary of tag reports */
export type TagReportSummaryFilter = {
  aggregationPeriod: AggregationPeriod;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear: Scalars['Int']['input'];
  tagId: Scalars['ID']['input'];
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type TagReportTagResultsFilter = {
  fullNameOrSisIdCont?: InputMaybe<Scalars['String']['input']>;
  tagIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type TagResult = {
  contextName: Scalars['String']['output'];
  gradedAt: Scalars['ISO8601DateTime']['output'];
  platform: ServiceNames;
  rubricName: Scalars['String']['output'];
  scoreEarned: Scalars['Int']['output'];
  scoreMaximum: Scalars['Int']['output'];
  sourceName: Scalars['String']['output'];
  studentFullName: Scalars['String']['output'];
  studentSisId: Maybe<Scalars['String']['output']>;
  tags: Array<Tag>;
};

export type TagResultPage = {
  nodes: Array<TagResult>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type TagSummary = {
  aggregationPeriods: Array<TagPeriod>;
  cumulativeAverageScore: Scalars['Float']['output'];
  studentsCount: Scalars['Int']['output'];
  tag: Tag;
};

export enum TagTypes {
  /** Entity */
  ENTITY = 'ENTITY',
  /** System */
  SYSTEM = 'SYSTEM'
}

export type Task = ConversationContext & SchoolClassActivityContext & StudentActivityContext & StudentBadgeResource & {
  assignedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  assignedStudentsCount: Scalars['Int']['output'];
  checkInGroups: Array<CheckInGroup>;
  checkInQuestion: Maybe<CheckInQuestion>;
  checkInQuestions: Array<CheckInQuestion>;
  /** Number of check-ins submissions awaiting grading(for students and teams assigned by current user) */
  checkInsGradingNeededCount: Scalars['Int']['output'];
  copies: Maybe<Array<Task>>;
  course: Course;
  courses: Array<Course>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  files: Array<TaskFile>;
  gradingNeeded: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  introduction: Maybe<Scalars['String']['output']>;
  isArchived: Scalars['Boolean']['output'];
  isAssignedByUser: Scalars['Boolean']['output'];
  isAssignedToTeam: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  owner: Maybe<ResourceDuplicateOwner>;
  presentation: Maybe<Presentation>;
  presentationUrl: Maybe<Scalars['String']['output']>;
  product: Maybe<Product>;
  products: Array<Product>;
  /** Number of product submissions awaiting grading(for students and teams assigned by current user) */
  productsGradingNeededCount: Scalars['Int']['output'];
  sharedResource: Maybe<SharedResource>;
  source: Maybe<Task>;
  standard: Maybe<Scalars['String']['output']>;
  standards: Array<Standard>;
  status: TaskStatuses;
  step: Maybe<Scalars['Int']['output']>;
  studentResources: Maybe<Scalars['String']['output']>;
  /** Number of students awaiting grading (assigned by current user) */
  studentsGradingNeededCount: Scalars['Int']['output'];
  /** @deprecated Use `productsGradingNeededCount` instead */
  submissionsGradingNeededCount: Scalars['Int']['output'];
  teachingResources: Maybe<Scalars['String']['output']>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  units: Array<Unit>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type TaskCheckInQuestionArgs = {
  id: Scalars['ID']['input'];
};


export type TaskCourseArgs = {
  id: Scalars['ID']['input'];
};


export type TaskIsAssignedToTeamArgs = {
  teamId: Scalars['ID']['input'];
};


export type TaskPresentationArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


export type TaskProductArgs = {
  id: Scalars['ID']['input'];
};


export type TaskStandardsArgs = {
  setId: Scalars['String']['input'];
};

export type TaskFile = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  step: Scalars['String']['output'];
  url: Scalars['String']['output'];
};


export type TaskFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering Tasks */
export type TaskFilter = {
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
  statusEq?: InputMaybe<TaskStatuses>;
};

export type TaskPage = {
  nodes: Array<Task>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum TaskStatuses {
  /** Status for draft tasks */
  DRAFT = 'DRAFT',
  /** Status for published tasks */
  PUBLISHED = 'PUBLISHED'
}

export type TeacherDashboard = {
  activityLog: SchoolClassActivityLogEntryConnection;
  schoolClasses: Array<SchoolClassData>;
  teacherName: Scalars['String']['output'];
  userId: Scalars['ID']['output'];
};


export type TeacherDashboardActivityLogArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};

export type Team = ConversationParticipant & {
  email: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isArchived: Scalars['Boolean']['output'];
  members: Maybe<Array<ConversationMember>>;
  name: Scalars['String']['output'];
  owner: TeamOwner;
  students: StudentPage;
  tasks: Array<Task>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};


export type TeamStudentsArgs = {
  filter?: InputMaybe<StudentFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type TeamCheckInSubmission = ConversationContext & {
  answers: Array<TeamCheckInSubmissionAnswer>;
  grade: Maybe<SubmissionGrade>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  students: Array<Student>;
};

export type TeamCheckInSubmissionAnswer = {
  answer: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  student: TeamCheckInSubmissionSubmitter;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Returns who submitted the check in submission */
export type TeamCheckInSubmissionSubmitter = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering Teams */
export type TeamFilter = {
  gradingStatus?: InputMaybe<TeamGradingStatusInput>;
};

export type TeamGradingStatusInput = {
  itemId: Scalars['ID']['input'];
  itemType: GradingItemTypes;
  status: GradingStatuses;
  taskId: Scalars['ID']['input'];
};

export type TeamOwner = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type Technology = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

/** Common fields for items that contain `title` and a list of `elements` */
export type TitleWithElements = {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ToggleCheckInQuestionHiddenMutation */
export type ToggleCheckInQuestionHiddenMutationInput = {
  checkInGroupId: Scalars['ID']['input'];
  checkInQuestionId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of ToggleCheckInQuestionHiddenMutation. */
export type ToggleCheckInQuestionHiddenMutationPayload = {
  checkInGroup: Maybe<CheckInGroup>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ToggleProductHiddenMutation */
export type ToggleProductHiddenMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of ToggleProductHiddenMutation. */
export type ToggleProductHiddenMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

export type Track = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  grades: Array<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  shortDescription: Maybe<Scalars['String']['output']>;
  step: Maybe<Scalars['Int']['output']>;
  tasksCount: Scalars['Int']['output'];
  thumbnailUrl: Scalars['String']['output'];
  units: Array<Unit>;
};

export type TrackPage = {
  nodes: Array<Track>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Autogenerated input type of TrackSlideVisitMutation */
export type TrackSlideVisitMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  slideId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of TrackSlideVisitMutation. */
export type TrackSlideVisitMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UnassignSchoolClassFromTaskMutation */
export type UnassignSchoolClassFromTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  schoolClassUuid: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of UnassignSchoolClassFromTaskMutation. */
export type UnassignSchoolClassFromTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of UnassignStudentFromTaskMutation */
export type UnassignStudentFromTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  studentUuids: Array<Scalars['ID']['input']>;
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of UnassignStudentFromTaskMutation. */
export type UnassignStudentFromTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of UnassignTeamsFromTaskMutation */
export type UnassignTeamsFromTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  taskId: Scalars['ID']['input'];
  teamUuids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of UnassignTeamsFromTaskMutation. */
export type UnassignTeamsFromTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  teams: Array<Team>;
};

export type Unit = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  step: Scalars['Int']['output'];
  task: Task;
  tasks: Array<Task>;
  thumbnailUrl: Scalars['String']['output'];
};


export type UnitTaskArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated input type of UnlockStatementMutation */
export type UnlockStatementMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  statementId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UnlockStatementMutation. */
export type UnlockStatementMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  student: Student;
};

/** Autogenerated input type of UpdateCheckInQuestionMutation */
export type UpdateCheckInQuestionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  question?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateCheckInQuestionMutation. */
export type UpdateCheckInQuestionMutationPayload = {
  checkInQuestion: Maybe<CheckInQuestion>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateEntitySettingsMutation */
export type UpdateEntitySettingsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  settings: EntitySettingsAttributes;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateEntitySettingsMutation. */
export type UpdateEntitySettingsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Maybe<Entity>;
};

/** Autogenerated input type of UpdateLtiResourceGradeMutation */
export type UpdateLtiResourceGradeMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  grade: Scalars['Int']['input'];
  submissionId: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateLtiResourceGradeMutation. */
export type UpdateLtiResourceGradeMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  ltiResource: Maybe<LtiResource>;
};

/** Autogenerated input type of UpdateLtiResourceMutation */
export type UpdateLtiResourceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
  userUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateLtiResourceMutation. */
export type UpdateLtiResourceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  ltiResource: Maybe<LtiResource>;
  product: Maybe<Product>;
  task: Maybe<Task>;
  user: Maybe<User>;
};

/** Autogenerated input type of UpdatePresentationMutation */
export type UpdatePresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  presentationSlides?: InputMaybe<Array<PresentationSlideAttributes>>;
  status?: InputMaybe<PresentationStatuses>;
  transition?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<PresentationTypes>;
  typography?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePresentationMutation. */
export type UpdatePresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  presentation: Maybe<Presentation>;
};

/** Autogenerated input type of UpdateProductMutation */
export type UpdateProductMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateProductMutation. */
export type UpdateProductMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  product: Maybe<Product>;
};

/** Autogenerated input type of UpdateRubricCriteriaLabelMutation */
export type UpdateRubricCriteriaLabelMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  score?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of UpdateRubricCriteriaLabelMutation. */
export type UpdateRubricCriteriaLabelMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricCriteriaLabel: Maybe<RubricCriteriaLabel>;
};

/** Autogenerated input type of UpdateRubricCriteriaMutation */
export type UpdateRubricCriteriaMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  text: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateRubricCriteriaMutation. */
export type UpdateRubricCriteriaMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricCriteria: Maybe<RubricCriteria>;
};

/** Autogenerated input type of UpdateRubricHeadingMutation */
export type UpdateRubricHeadingMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  multiplier?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateRubricHeadingMutation. */
export type UpdateRubricHeadingMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricHeading: Maybe<RubricHeading>;
};

/** Autogenerated input type of UpdateRubricMutation */
export type UpdateRubricMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateRubricMutation. */
export type UpdateRubricMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubric: Maybe<Rubric>;
};

/** Autogenerated input type of UpdateSlideImageMutation */
export type UpdateSlideImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  position?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateSlideImageMutation. */
export type UpdateSlideImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideImage: Maybe<SlideImage>;
};

/** Autogenerated input type of UpdateSlideMutation */
export type UpdateSlideMutationInput = {
  backgroundColor?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  checkInItems?: InputMaybe<Array<CheckInItemAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  iframeUrl?: InputMaybe<Scalars['String']['input']>;
  isShared?: InputMaybe<Scalars['Boolean']['input']>;
  links?: InputMaybe<Array<SlideLinksAttributes>>;
  name?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  products?: InputMaybe<Array<SlideProductAttributes>>;
  subslides?: InputMaybe<Array<SubslideAttributes>>;
  template?: InputMaybe<Scalars['String']['input']>;
  textItems?: InputMaybe<Array<SlideTextItemsAttributes>>;
};

/** Autogenerated return type of UpdateSlideMutation. */
export type UpdateSlideMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slide: Maybe<Slide>;
};

/** Autogenerated input type of UpdateSlideVideoMutation */
export type UpdateSlideVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contentId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  videoUrl?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateSlideVideoMutation. */
export type UpdateSlideVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideVideo: Maybe<SlideVideo>;
};

/** Autogenerated input type of UpdateTaskMutation */
export type UpdateTaskMutationInput = {
  checkInItems?: InputMaybe<Array<CheckInItemAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  introduction?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  presentationUrl?: InputMaybe<Scalars['String']['input']>;
  standard?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<TaskStatuses>;
  studentResources?: InputMaybe<Scalars['String']['input']>;
  teachingResources?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateTaskMutation. */
export type UpdateTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

/** Autogenerated input type of UpdateTeamMutation */
export type UpdateTeamMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  studentUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  taskIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateTeamMutation. */
export type UpdateTeamMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  team: Team;
};

export type User = CheckInQuestionOwner & ConversationMember & ConversationParticipant & Evaluator & ProductSubmissionFileSubmitter & ResourceDuplicateOwner & SchoolClassActivityTarget & TeamOwner & {
  definedLearningUuid: Maybe<Scalars['String']['output']>;
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type UserData = {
  entity: Maybe<EntityData>;
  firstName: Maybe<Scalars['String']['output']>;
  gradingNeeded: Scalars['Boolean']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  role: UserRoles;
  schoolClassesCount: Scalars['Int']['output'];
  uuid: Scalars['ID']['output'];
};

export type UserDataPage = {
  nodes: Array<UserData>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for filtering Users */
export type UserFilter = {
  fullNameCont?: InputMaybe<Scalars['String']['input']>;
};

export type UserInfo = {
  algoliaSearchKey: Scalars['String']['output'];
  availableReportTypes: Array<ReportTypes>;
  availableResources: AvailableResources;
  availableTasksCount: Scalars['Int']['output'];
  availableTracksCount: Scalars['Int']['output'];
  currentSchoolYear: Scalars['Int']['output'];
  definedLearningUuid: Maybe<Scalars['ID']['output']>;
  email: Maybe<Scalars['String']['output']>;
  entities: EntityPage;
  firstName: Maybe<Scalars['String']['output']>;
  hasAccessToCareers: Scalars['Boolean']['output'];
  hasAccessToLearning: Scalars['Boolean']['output'];
  /** @deprecated Use hasAccessToLearning instead */
  hasAccessToPbl: Scalars['Boolean']['output'];
  hasUnreadConversation: Scalars['Boolean']['output'];
  highlightedCatalogs: Array<Catalog>;
  iconUrl: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  logoUrl: Maybe<Scalars['String']['output']>;
  ltiDetails: Maybe<LtiDetails>;
  permissions: UserPermissions;
  role: UserRoles;
  standardSets: Array<StandardSet>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
  welcomeMessage: Maybe<Scalars['String']['output']>;
};


export type UserInfoEntitiesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type UserPage = {
  nodes: Array<User>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type UserPermissions = {
  canBrowseReports: Scalars['Boolean']['output'];
};

export enum UserRoles {
  /** Entity Admin role */
  ENTITY_ADMIN = 'ENTITY_ADMIN',
  /** Sales Admin role */
  SALES_ADMIN = 'SALES_ADMIN',
  /** System Admin role */
  SYSTEM_ADMIN = 'SYSTEM_ADMIN',
  /** Teacher role */
  TEACHER = 'TEACHER'
}

export type VirtualInternship = StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};
