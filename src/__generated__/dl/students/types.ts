export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601Date: { input: string; output: string; }
  ISO8601DateTime: { input: string; output: string; }
};

export type Abilities = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type Announcement = ConversationContext & {
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AnswerPlanGroupStatementQuestionMutation */
export type AnswerPlanGroupStatementQuestionMutationInput = {
  answer: Array<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  questionId: Scalars['ID']['input'];
};

/** Autogenerated return type of AnswerPlanGroupStatementQuestionMutation. */
export type AnswerPlanGroupStatementQuestionMutationPayload = {
  answer: Maybe<PlanGroupStatementQuestionAnswer>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

export enum Asset {
  /** Avatar asset type */
  AVATAR = 'AVATAR',
  /** Generic file asset type */
  FILE = 'FILE',
  /** Image asset type */
  IMAGE = 'IMAGE',
  /** Video asset type */
  VIDEO = 'VIDEO'
}

export type Assignment = ConversationContext & StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
};

export type Badge = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  isHighlighted: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  resource: StudentBadgeResource;
  thumbnailUrl: Scalars['String']['output'];
};

export type BrightOutlookEntry = {
  category: Array<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
};

export type CareerExperienceEntry = {
  clusterId: Scalars['ID']['output'];
  clusterName: Scalars['String']['output'];
  submissions: Array<CareerExperienceSubmissionEntry>;
  submissionsCount: Scalars['Int']['output'];
};

export type CareerExperienceSubmissionEntry = {
  contextName: Scalars['String']['output'];
  isTeamSubmission: Scalars['Boolean']['output'];
  service: ServiceNames;
  submissionName: Scalars['String']['output'];
  submittedAt: Scalars['ISO8601DateTime']['output'];
};

export type CheckInGroup = StudentBadgeResource & {
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  questions: Array<CheckInQuestion>;
  step: Maybe<Scalars['Int']['output']>;
};

export type CheckInQuestion = {
  answer: Maybe<CheckInQuestionAnswer>;
  id: Scalars['ID']['output'];
  question: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
  teamSubmission: Maybe<TeamCheckInSubmission>;
};

export type CheckInQuestionAnswer = ConversationContext & {
  answer: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  grade: Maybe<SubmissionGrade>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type ContactLink = {
  id: Scalars['ID']['output'];
  type: ContactLinkTypes;
  value: Scalars['String']['output'];
  visible: Scalars['Boolean']['output'];
};

export type ContactLinkAttributes = {
  id?: InputMaybe<Scalars['ID']['input']>;
  type: ContactLinkTypes;
  value: Scalars['String']['input'];
  visible: Scalars['Boolean']['input'];
};

export enum ContactLinkTypes {
  /** Behance Contact Link */
  BEHANCE = 'BEHANCE',
  /** Custom Contact Link */
  CUSTOM = 'CUSTOM',
  /** Dribbble Contact Link */
  DRIBBBLE = 'DRIBBBLE',
  /** Email Contact Link */
  EMAIL = 'EMAIL',
  /** Instagram Contact Link */
  INSTAGRAM = 'INSTAGRAM',
  /** Linkedin Contact Link */
  LINKEDIN = 'LINKEDIN',
  /** Phone Contact Link */
  PHONE = 'PHONE'
}

export type Conversation = {
  conversationContext: Maybe<ConversationContext>;
  id: Scalars['ID']['output'];
  messages: MessageConnection;
  messagesRead: Scalars['Boolean']['output'];
  participant: ConversationParticipant;
  recentMessage: Maybe<Message>;
  serviceName: Maybe<Scalars['String']['output']>;
  type: ConversationTypes;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type ConversationMessagesArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Conversation. */
export type ConversationConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Conversation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** Conversation Context */
export type ConversationContext = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export enum ConversationContextTypes {
  /** Check-in answer conversation context type */
  CHECK_IN_ANSWER = 'CHECK_IN_ANSWER',
  /**
   * Product conversation context type
   * @deprecated Use PRODUCT_SUBMISSION instead
   */
  PRODUCT = 'PRODUCT',
  /** Product conversation context type */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION',
  /** Task conversation context type */
  TASK = 'TASK',
  /** Team check-in submission conversation context type */
  TEAM_CHECK_IN_SUBMISSION = 'TEAM_CHECK_IN_SUBMISSION'
}

/** An edge in a connection. */
export type ConversationEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Conversation>;
};

export type ConversationGroup = {
  hasUnreadConversation: Scalars['Boolean']['output'];
  participant: ConversationParticipant;
  recentConversation: Conversation;
};

/** The connection type for ConversationGroup. */
export type ConversationGroupConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationGroupEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<ConversationGroup>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ConversationGroupEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<ConversationGroup>;
};

/** Conversation Member - a single member of a conversation (either as a direct participant or as a member of a group participant, e.g. student from a team.) */
export type ConversationMember = {
  email: Maybe<Scalars['String']['output']>;
  name: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Conversation Participant - can be a single member (User or Student) or a group of members (Team). Group participants return additional attributes: owner and members. */
export type ConversationParticipant = {
  email: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering conversation participants */
export type ConversationParticipantFilter = {
  participantType?: InputMaybe<ConversationParticipantTypes>;
  participantUuid?: InputMaybe<Scalars['ID']['input']>;
};

export enum ConversationParticipantTypes {
  /** Student conversation participant type */
  STUDENT = 'STUDENT',
  /** Team conversation participant type */
  TEAM = 'TEAM',
  /** User conversation participant type */
  USER = 'USER'
}

export type ConversationRecipient = {
  name: Scalars['String']['output'];
  recipientType: ConversationParticipantTypes;
  recipientUuid: Scalars['ID']['output'];
};

/** The connection type for ConversationRecipient. */
export type ConversationRecipientConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationRecipientEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<ConversationRecipient>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ConversationRecipientEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<ConversationRecipient>;
};

/** Attributes for filtering conversation recipients */
export type ConversationRecipientFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<ConversationRecipientTypes>;
};

export enum ConversationRecipientTypes {
  /** Student conversation recipient type */
  STUDENT = 'STUDENT',
  /** Team conversation recipient type */
  TEAM = 'TEAM',
  /** User conversation recipient type */
  USER = 'USER'
}

export enum ConversationTypes {
  /** Contextual conversation type */
  CONTEXTUAL = 'CONTEXTUAL',
  /** General conversation type */
  GENERAL = 'GENERAL'
}

export type Course = ConversationContext & StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
  onetData: Maybe<CourseOnetData>;
  pathwayName: Maybe<Scalars['String']['output']>;
  thumbnailUrl: Scalars['String']['output'];
  type: CourseTypes;
};

export type CourseOnetData = {
  abilities: Array<Abilities>;
  alignedCourses: Array<Course>;
  alsoCalled: Array<Scalars['String']['output']>;
  code: Scalars['String']['output'];
  education: Array<Scalars['String']['output']>;
  jobOutlook: Maybe<JobOutlook>;
  knowledge: Array<Knowledge>;
  onTheJob: Array<Scalars['String']['output']>;
  personality: Maybe<Personality>;
  skills: Array<Skills>;
  technology: Array<Technology>;
  title: Scalars['String']['output'];
  whatTheyDo: Scalars['String']['output'];
};

export enum CourseTypes {
  /** Courses of high school type */
  HIGH_SCHOOL = 'HIGH_SCHOOL',
  /** Courses of middle school type */
  MIDDLE_SCHOOL = 'MIDDLE_SCHOOL'
}

/** Autogenerated input type of CreateCheckInQuestionAnswerMutation */
export type CreateCheckInQuestionAnswerMutationInput = {
  answer: Scalars['String']['input'];
  checkInQuestionId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateCheckInQuestionAnswerMutation. */
export type CreateCheckInQuestionAnswerMutationPayload = {
  checkInQuestionAnswer: CheckInQuestionAnswer;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateContactLinkMutation */
export type CreateContactLinkMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  type: ContactLinkTypes;
  value: Scalars['String']['input'];
  visible?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of CreateContactLinkMutation. */
export type CreateContactLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  contactLink: Maybe<ContactLink>;
};

/** Autogenerated input type of CreateEvaluationCommentMutation */
export type CreateEvaluationCommentMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  statementId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEvaluationCommentMutation. */
export type CreateEvaluationCommentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Evaluation;
};

/** Autogenerated input type of CreateEvaluationMutation */
export type CreateEvaluationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  planId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEvaluationMutation. */
export type CreateEvaluationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Evaluation;
};

/** Autogenerated input type of CreatePlanGroupStatementEvidenceMutation */
export type CreatePlanGroupStatementEvidenceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evidences: Array<PlanGroupStatementEvidenceItemAttributes>;
  planGroupStatementId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePlanGroupStatementEvidenceMutation. */
export type CreatePlanGroupStatementEvidenceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of CreatePortfolioProjectFileMutation */
export type CreatePortfolioProjectFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
  portfolioProjectId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePortfolioProjectFileMutation. */
export type CreatePortfolioProjectFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  portfolioProjectFile: Maybe<PortfolioSubmissionFile>;
};

/** Autogenerated input type of CreatePortfolioProjectMutation */
export type CreatePortfolioProjectMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreatePortfolioProjectMutation. */
export type CreatePortfolioProjectMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  portfolioProject: Maybe<PortfolioProject>;
};

/** Autogenerated input type of CreateProductSubmissionFileFromGoogleDriveMutation */
export type CreateProductSubmissionFileFromGoogleDriveMutationInput = {
  accessToken: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileId: Scalars['String']['input'];
  productSubmissionId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateProductSubmissionFileFromGoogleDriveMutation. */
export type CreateProductSubmissionFileFromGoogleDriveMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmissionFile: Maybe<ProductSubmissionFile>;
};

/** Autogenerated input type of CreateProductSubmissionFileMutation */
export type CreateProductSubmissionFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
  productSubmissionId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateProductSubmissionFileMutation. */
export type CreateProductSubmissionFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmissionFile: Maybe<ProductSubmissionFile>;
};

/** Autogenerated input type of CreateProductSubmissionMutation */
export type CreateProductSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
  teamId?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of CreateProductSubmissionMutation. */
export type CreateProductSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmission: Maybe<ProductSubmission>;
};

/** Autogenerated input type of CreateResumeMutation */
export type CreateResumeMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateResumeMutation. */
export type CreateResumeMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  resume: Maybe<ExternalResume>;
};

/** Autogenerated input type of CreateSharedSessionTokenMutation */
export type CreateSharedSessionTokenMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateSharedSessionTokenMutation. */
export type CreateSharedSessionTokenMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  token: Scalars['String']['output'];
};

/** Autogenerated input type of CreateTeamCheckInSubmissionAnswerMutation */
export type CreateTeamCheckInSubmissionAnswerMutationInput = {
  answer: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  teamCheckInSubmissionId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTeamCheckInSubmissionAnswerMutation. */
export type CreateTeamCheckInSubmissionAnswerMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  teamCheckInSubmissionAnswer: Maybe<TeamCheckInSubmissionAnswer>;
};

/** Autogenerated input type of CreateTeamCheckInSubmissionMutation */
export type CreateTeamCheckInSubmissionMutationInput = {
  checkInQuestionId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  taskId: Scalars['ID']['input'];
  teamId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTeamCheckInSubmissionMutation. */
export type CreateTeamCheckInSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  teamCheckInSubmission: Maybe<TeamCheckInSubmission>;
};

/** Autogenerated input type of DeleteContactLinkMutation */
export type DeleteContactLinkMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteContactLinkMutation. */
export type DeleteContactLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeletePlanGroupStatementEvidenceMutation */
export type DeletePlanGroupStatementEvidenceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePlanGroupStatementEvidenceMutation. */
export type DeletePlanGroupStatementEvidenceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of DeletePortfolioProjectFileMutation */
export type DeletePortfolioProjectFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePortfolioProjectFileMutation. */
export type DeletePortfolioProjectFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeletePortfolioProjectMutation */
export type DeletePortfolioProjectMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePortfolioProjectMutation. */
export type DeletePortfolioProjectMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteProductSubmissionFileMutation */
export type DeleteProductSubmissionFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteProductSubmissionFileMutation. */
export type DeleteProductSubmissionFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmission: Maybe<ProductSubmission>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteResumeMutation */
export type DeleteResumeMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteResumeMutation. */
export type DeleteResumeMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of EnrollInTaskMutation */
export type EnrollInTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  originatorId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of EnrollInTaskMutation. */
export type EnrollInTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of EvaluateStudentMutation */
export type EvaluateStudentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  results: Array<EvaluationResultAttributes>;
};

/** Autogenerated return type of EvaluateStudentMutation. */
export type EvaluateStudentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
};

export type Evaluation = {
  /** @deprecated Use comments from `statement` instead */
  comments: Array<EvaluationComment>;
  id: Scalars['ID']['output'];
  results: Array<EvaluationResult>;
  resultsHistory: Array<EvaluationResult>;
};


export type EvaluationResultsHistoryArgs = {
  statementId: Scalars['ID']['input'];
};

export type EvaluationComment = {
  author: Evaluator;
  body: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  statement: PlanGroupStatement;
};

export type EvaluationResult = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  evaluator: Evaluator;
  result: EvaluationResultValues;
  statement: PlanGroupStatement;
};

/** Attributes for evaluating students */
export type EvaluationResultAttributes = {
  result: EvaluationResultValues;
  statementId: Scalars['ID']['input'];
};

export enum EvaluationResultValues {
  /** Evaluation result with the  */
  COMPLETED = 'COMPLETED',
  /** Evaluation result with the  */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Evaluation result with the  */
  NOT_MET = 'NOT_MET',
  /** Evaluation with no result yet */
  NOT_STARTED = 'NOT_STARTED'
}

export type Evaluator = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export enum EvidenceContextKind {
  /** Course */
  COURSE = 'COURSE',
  /** Virtual Internship */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum EvidenceKind {
  /** Assignment submission */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** Opportunity application */
  OPPORTUNITY_APPLICATION = 'OPPORTUNITY_APPLICATION',
  /** Personal Portfolio Project */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Product submission */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION',
  /** Rubric Grade */
  RUBRIC_GRADE = 'RUBRIC_GRADE'
}

export type ExternalResume = {
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};


export type ExternalResumeUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Autogenerated input type of FindOrCreateConversationMutation */
export type FindOrCreateConversationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contextId?: InputMaybe<Scalars['ID']['input']>;
  contextType?: InputMaybe<ConversationContextTypes>;
  receiverType: ConversationParticipantTypes;
  receiverUuid: Scalars['ID']['input'];
  type: ConversationTypes;
};

/** Autogenerated return type of FindOrCreateConversationMutation. */
export type FindOrCreateConversationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  conversation: Conversation;
};

/** Autogenerated input type of GeneratePresignedUploadUrlMutation */
export type GeneratePresignedUploadUrlMutationInput = {
  assetType: Asset;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  filename: Scalars['String']['input'];
  resourceClass: ResourceClass;
};

/** Autogenerated return type of GeneratePresignedUploadUrlMutation. */
export type GeneratePresignedUploadUrlMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  url: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type GoalPerformanceData = {
  averageScore: Scalars['Float']['output'];
  results: Array<Result>;
  tag: Tag;
};

export type HighlightedProjectAttributes = {
  projectId: Scalars['ID']['input'];
  projectType: PortfolioResourceClass;
};

export type JobOutlook = {
  brightOutlook: Maybe<BrightOutlookEntry>;
  outlook: Maybe<OutlookEntry>;
  salaryMedian: Maybe<Scalars['Int']['output']>;
};

export type Knowledge = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

/** All mutations for Student */
export type LearningMutationsStudentRoot = {
  /** Mutation for answering a question in a statement of a plan group */
  answerPlanGroupStatementQuestion: Maybe<AnswerPlanGroupStatementQuestionMutationPayload>;
  /** Mutation for creating Check-in Question Answer */
  createCheckInQuestionAnswer: Maybe<CreateCheckInQuestionAnswerMutationPayload>;
  /** Mutation for creating Contact Link */
  createContactLink: Maybe<CreateContactLinkMutationPayload>;
  /** Mutation for creating a evaluation */
  createEvaluation: Maybe<CreateEvaluationMutationPayload>;
  /** Mutation for creating a EvaluationComment */
  createEvaluationComment: Maybe<CreateEvaluationCommentMutationPayload>;
  /** Mutation for creating a plan group statement evidence */
  createPlanGroupStatementEvidence: Maybe<CreatePlanGroupStatementEvidenceMutationPayload>;
  /** Mutation for creating a personal Portfolio Project */
  createPortfolioProject: Maybe<CreatePortfolioProjectMutationPayload>;
  /** Mutation for creating a Portfolio Project File */
  createPortfolioProjectFile: Maybe<CreatePortfolioProjectFileMutationPayload>;
  /** Mutation for creating an Product Submission */
  createProductSubmission: Maybe<CreateProductSubmissionMutationPayload>;
  /** Mutation for creating an Product Submission File */
  createProductSubmissionFile: Maybe<CreateProductSubmissionFileMutationPayload>;
  /** Mutation for creating an Product Submission File from Google Drive */
  createProductSubmissionFileFromGoogleDrive: Maybe<CreateProductSubmissionFileFromGoogleDriveMutationPayload>;
  /** Mutation for creating a ExternalResume */
  createResume: Maybe<CreateResumeMutationPayload>;
  /** Mutation for creating a shared session token */
  createSharedSessionToken: Maybe<CreateSharedSessionTokenMutationPayload>;
  /** Mutation for creating Team Check In Submission */
  createTeamCheckInSubmission: Maybe<CreateTeamCheckInSubmissionMutationPayload>;
  /** Mutation for creating Team Check In Submission Answer */
  createTeamCheckInSubmissionAnswer: Maybe<CreateTeamCheckInSubmissionAnswerMutationPayload>;
  /** Mutation for deleting a Contact Link */
  deleteContactLink: Maybe<DeleteContactLinkMutationPayload>;
  /** Mutation for deleting a plan group statement evidence */
  deletePlanGroupStatementEvidence: Maybe<DeletePlanGroupStatementEvidenceMutationPayload>;
  /** Mutation for deleting a Portfolio Project */
  deletePortfolioProject: Maybe<DeletePortfolioProjectMutationPayload>;
  /** Mutation for deleting a Portfolio Project File */
  deletePortfolioProjectFile: Maybe<DeletePortfolioProjectFileMutationPayload>;
  /** Mutation for deleting an Product Submission File */
  deleteProductSubmissionFile: Maybe<DeleteProductSubmissionFileMutationPayload>;
  /** Mutation for deleting a ExternalResume */
  deleteResume: Maybe<DeleteResumeMutationPayload>;
  /** Mutation for enrolling to Task */
  enrollInTask: Maybe<EnrollInTaskMutationPayload>;
  /** Mutation for evaluating a student */
  evaluateStudent: Maybe<EvaluateStudentMutationPayload>;
  /** Mutation for finding or creating Conversation */
  findOrCreateConversation: Maybe<FindOrCreateConversationMutationPayload>;
  /** Mutation for creating a presigned upload URL */
  generatePresignedUploadUrl: Maybe<GeneratePresignedUploadUrlMutationPayload>;
  /** Mutation for updating all student's notifications as read */
  markAllNotificationsAsRead: Maybe<MarkAllNotificationsAsReadMutationPayload>;
  /** Mutation for sending Message */
  sendMessage: Maybe<SendMessageMutationPayload>;
  /** Mutation for tracking slide visits */
  trackSlideVisit: Maybe<TrackSlideVisitMutationPayload>;
  /** Mutation for updating Check-in Question Answer */
  updateCheckInQuestionAnswer: Maybe<UpdateCheckInQuestionAnswerMutationPayload>;
  /** Mutation for updating Contact Link */
  updateContactLink: Maybe<UpdateContactLinkMutationPayload>;
  /** Mutation for updating a notification */
  updateNotification: Maybe<UpdateNotificationMutationPayload>;
  /** Mutation for updating personal Portfolio Project */
  updatePortfolioProject: Maybe<UpdatePortfolioProjectMutationPayload>;
  /** Mutation for updating an Product Submission */
  updateProductSubmission: Maybe<UpdateProductSubmissionMutationPayload>;
  /** Mutation for updating Resume */
  updateResume: Maybe<UpdateResumeMutationPayload>;
  /** Mutation for updating answer in Team Check In Submission */
  updateTeamCheckInSubmissionAnswer: Maybe<UpdateTeamCheckInSubmissionAnswerMutationPayload>;
};


/** All mutations for Student */
export type LearningMutationsStudentRootAnswerPlanGroupStatementQuestionArgs = {
  input: AnswerPlanGroupStatementQuestionMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateCheckInQuestionAnswerArgs = {
  input: CreateCheckInQuestionAnswerMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateContactLinkArgs = {
  input: CreateContactLinkMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateEvaluationArgs = {
  input: CreateEvaluationMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateEvaluationCommentArgs = {
  input: CreateEvaluationCommentMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreatePlanGroupStatementEvidenceArgs = {
  input: CreatePlanGroupStatementEvidenceMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreatePortfolioProjectArgs = {
  input: CreatePortfolioProjectMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreatePortfolioProjectFileArgs = {
  input: CreatePortfolioProjectFileMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateProductSubmissionArgs = {
  input: CreateProductSubmissionMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateProductSubmissionFileArgs = {
  input: CreateProductSubmissionFileMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateProductSubmissionFileFromGoogleDriveArgs = {
  input: CreateProductSubmissionFileFromGoogleDriveMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateResumeArgs = {
  input: CreateResumeMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateSharedSessionTokenArgs = {
  input: CreateSharedSessionTokenMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateTeamCheckInSubmissionArgs = {
  input: CreateTeamCheckInSubmissionMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootCreateTeamCheckInSubmissionAnswerArgs = {
  input: CreateTeamCheckInSubmissionAnswerMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootDeleteContactLinkArgs = {
  input: DeleteContactLinkMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootDeletePlanGroupStatementEvidenceArgs = {
  input: DeletePlanGroupStatementEvidenceMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootDeletePortfolioProjectArgs = {
  input: DeletePortfolioProjectMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootDeletePortfolioProjectFileArgs = {
  input: DeletePortfolioProjectFileMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootDeleteProductSubmissionFileArgs = {
  input: DeleteProductSubmissionFileMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootDeleteResumeArgs = {
  input: DeleteResumeMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootEnrollInTaskArgs = {
  input: EnrollInTaskMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootEvaluateStudentArgs = {
  input: EvaluateStudentMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootFindOrCreateConversationArgs = {
  input: FindOrCreateConversationMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootGeneratePresignedUploadUrlArgs = {
  input: GeneratePresignedUploadUrlMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootMarkAllNotificationsAsReadArgs = {
  input: MarkAllNotificationsAsReadMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootSendMessageArgs = {
  input: SendMessageMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootTrackSlideVisitArgs = {
  input: TrackSlideVisitMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootUpdateCheckInQuestionAnswerArgs = {
  input: UpdateCheckInQuestionAnswerMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootUpdateContactLinkArgs = {
  input: UpdateContactLinkMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootUpdateNotificationArgs = {
  input: UpdateNotificationMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootUpdatePortfolioProjectArgs = {
  input: UpdatePortfolioProjectMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootUpdateProductSubmissionArgs = {
  input: UpdateProductSubmissionMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootUpdateResumeArgs = {
  input: UpdateResumeMutationInput;
};


/** All mutations for Student */
export type LearningMutationsStudentRootUpdateTeamCheckInSubmissionAnswerArgs = {
  input: UpdateTeamCheckInSubmissionAnswerMutationInput;
};

export type Lesson = ConversationContext & StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
};

export type LtiDetails = {
  isLti: Scalars['Boolean']['output'];
  ltiConsumerKey: Maybe<Scalars['String']['output']>;
  ltiContextId: Maybe<Scalars['String']['output']>;
  ltiResourceLinkId: Maybe<Scalars['String']['output']>;
};

export type LtiResource = {
  consumerKey: Maybe<Scalars['String']['output']>;
  contextId: Maybe<Scalars['String']['output']>;
  ltiResourceLinkId: Maybe<Scalars['String']['output']>;
  originatorId: Maybe<Scalars['ID']['output']>;
  productId: Maybe<Scalars['ID']['output']>;
  studentId: Maybe<Scalars['ID']['output']>;
  taskId: Maybe<Scalars['ID']['output']>;
  userId: Maybe<Scalars['ID']['output']>;
};

/** Autogenerated input type of MarkAllNotificationsAsReadMutation */
export type MarkAllNotificationsAsReadMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of MarkAllNotificationsAsReadMutation. */
export type MarkAllNotificationsAsReadMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

export type Message = {
  author: ConversationMember;
  body: Scalars['String']['output'];
  conversation: Conversation;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
};

/** The connection type for Message. */
export type MessageConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<MessageEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Message>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type MessageEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Message>;
};

export type Notification = {
  actor: NotificationActor;
  body: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  read: Scalars['Boolean']['output'];
  target: NotificationTarget;
  type: NotificationTypes;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Notification Actor */
export type NotificationActor = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type NotificationPage = {
  nodes: Array<Notification>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum NotificationStatus {
  /** All notifications */
  ALL = 'ALL',
  /** Read notifications only */
  READ = 'READ',
  /** Unread notifications only */
  UNREAD = 'UNREAD'
}

/** Notification Target */
export type NotificationTarget = {
  id: Scalars['ID']['output'];
};

export enum NotificationTypes {
  /** General notification type */
  GENERAL = 'GENERAL'
}

/** Opportunity */
export type Opportunity = ConversationContext & {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type OutlookEntry = {
  category: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
};

export type OverallData = {
  completed: Scalars['Int']['output'];
  inProgress: Scalars['Int']['output'];
  notMet: Scalars['Int']['output'];
  notStarted: Scalars['Int']['output'];
  /** @deprecated Use plan { name } instead */
  planName: Scalars['String']['output'];
  /** @deprecated Use student { full_name } instead */
  studentFullName: Scalars['String']['output'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor: Maybe<Scalars['String']['output']>;
};

export type Personality = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type Plan = {
  description: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `results` and `coments` in `PlanGroupStatment` instead */
  evaluation: Maybe<Evaluation>;
  groups: Array<PlanGroup>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  progress: PlanProgress;
};

export type PlanGroup = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  statements: Array<PlanGroupStatement>;
  step: Maybe<Scalars['Int']['output']>;
};

export type PlanGroupStatement = {
  comments: Array<EvaluationComment>;
  evidences: Array<PlanGroupStatementEvidence>;
  id: Scalars['ID']['output'];
  isLocked: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  question: Maybe<PlanGroupStatementQuestion>;
  results: Array<EvaluationResult>;
  step: Maybe<Scalars['Int']['output']>;
};

export type PlanGroupStatementEvidence = {
  contextType: Maybe<EvidenceContextKind>;
  id: Maybe<Scalars['ID']['output']>;
  isTeamSubmission: Scalars['Boolean']['output'];
  itemId: Maybe<Scalars['ID']['output']>;
  label: Scalars['String']['output'];
  rubricScores: Maybe<Array<RubricScore>>;
  service: ServiceNames;
  type: EvidenceKind;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type PlanGroupStatementEvidenceItemAttributes = {
  itemId: Scalars['ID']['input'];
  itemType: EvidenceKind;
};

export type PlanGroupStatementQuestion = {
  answer: Maybe<PlanGroupStatementQuestionAnswer>;
  id: Scalars['ID']['output'];
  options: Array<PlanGroupStatementQuestionOption>;
  questionType: PlanGroupStatementQuestionTypes;
  text: Scalars['String']['output'];
};

export type PlanGroupStatementQuestionAnswer = {
  answer: Array<Scalars['String']['output']>;
  author: Maybe<Evaluator>;
  id: Scalars['ID']['output'];
};

export type PlanGroupStatementQuestionOption = {
  id: Scalars['ID']['output'];
  option: Scalars['String']['output'];
};

export enum PlanGroupStatementQuestionTypes {
  /** Long text question type */
  LONG_TEXT = 'LONG_TEXT',
  /** Multiple choice question type */
  MULTIPLE_CHOICE = 'MULTIPLE_CHOICE',
  /** Multiple choice dropdown question type */
  MULTIPLE_CHOICE_DROPDOWN = 'MULTIPLE_CHOICE_DROPDOWN',
  /** Short text question type */
  SHORT_TEXT = 'SHORT_TEXT',
  /** Single choice question type */
  SINGLE_CHOICE = 'SINGLE_CHOICE'
}

export type PlanProgress = {
  completed: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export type Portfolio = {
  careerExperience: Maybe<CareerExperienceEntry>;
  careerExperiences: Array<CareerExperienceEntry>;
  plans: Array<Plan>;
  projects: Maybe<PortfolioProjectConnection>;
  resumes: Array<ExternalResume>;
  sharedResume: Maybe<Resume>;
  studentId: Scalars['ID']['output'];
};


export type PortfolioCareerExperienceArgs = {
  id: Scalars['ID']['input'];
};


export type PortfolioProjectsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  type: PortfolioKind;
};

export enum PortfolioKind {
  /** Portfolio projects created in Careers */
  CAREERS = 'CAREERS',
  /** Portfolio projects created in Learning */
  LEARNING = 'LEARNING',
  /**
   * Portfolio projects created in Learning (PBL)
   * @deprecated {:reason=>"Use LEARNING instead"}
   */
  PBL = 'PBL',
  /** Personal portfolio projects */
  PERSONAL = 'PERSONAL'
}

export type PortfolioProject = {
  description: Maybe<Scalars['String']['output']>;
  finishedAt: Scalars['ISO8601Date']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  isHighlighted: Scalars['Boolean']['output'];
  isTeamSubmission: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  parentName: Maybe<Scalars['String']['output']>;
  portfolioKind: PortfolioKind;
  resourceClass: PortfolioResourceClass;
  startedAt: Maybe<Scalars['ISO8601Date']['output']>;
  submission: PortfolioSubmission;
  /** @deprecated Use `finished_at` instead */
  submittedAt: Scalars['ISO8601DateTime']['output'];
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  type: Maybe<PortfolioProjectKind>;
};

/** The connection type for PortfolioProject. */
export type PortfolioProjectConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<PortfolioProjectEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<PortfolioProject>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PortfolioProjectEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<PortfolioProject>;
};

export enum PortfolioProjectKind {
  /** Course */
  COURSE = 'COURSE',
  /**
   * Lesson
   * @deprecated Use `COURSE` instead
   */
  LESSON = 'LESSON',
  /** Opportunity */
  OPPORTUNITY = 'OPPORTUNITY',
  /** Virtual Internship */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum PortfolioResourceClass {
  /** Portfolio projects created in Careers */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** Opportunity applications */
  OPPORTUNITY_APPLICATION = 'OPPORTUNITY_APPLICATION',
  /** Personal portfolio projects */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Portfolio projects created in Learning */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION'
}

export type PortfolioSubmission = {
  files: Array<PortfolioSubmissionFile>;
  status: Maybe<SubmissionStatus>;
};

export type PortfolioSubmissionFile = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  googleWeblink: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isOwner: Scalars['Boolean']['output'];
  source: Maybe<SubmissionFileSource>;
  submitter: Maybe<ProductSubmissionFileSubmitter>;
  url: Scalars['String']['output'];
};

export type Presentation = {
  color: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  slideBackgroundImages: Array<SlideBackgroundImage>;
  slides: Array<Slide>;
  status: PresentationStatuses;
  transition: Maybe<Scalars['String']['output']>;
  type: PresentationTypes;
  typography: Maybe<Scalars['String']['output']>;
};

export enum PresentationStatuses {
  /** Status for draft presentations */
  DRAFT = 'DRAFT',
  /** Status for published presentations */
  PUBLISHED = 'PUBLISHED'
}

export enum PresentationTypes {
  /** Status for full screen presentations */
  FULL_SCREEN = 'FULL_SCREEN',
  /** Status for legacy presentations */
  LEGACY = 'LEGACY'
}

/** Options for AWS Presigned URLs */
export type PresignedUrlOptions = {
  responseContentDisposition?: InputMaybe<Scalars['String']['input']>;
};

export type Product = ConversationContext & StudentBadgeResource & {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  rubrics: Array<Rubric>;
  rubricsUrl: Maybe<Scalars['String']['output']>;
  step: Maybe<Scalars['Int']['output']>;
  submission: Maybe<ProductSubmission>;
};

export type ProductSubmission = ConversationContext & {
  canSubmit: Scalars['Boolean']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  files: Array<ProductSubmissionFile>;
  grade: Maybe<ProductSubmissionRubricGrade>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  productId: Scalars['ID']['output'];
  status: ProductSubmissionStatus;
  team: Maybe<Team>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type ProductSubmissionFile = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  googleWeblink: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  source: Scalars['String']['output'];
  submitter: ProductSubmissionFileSubmitter;
  url: Scalars['String']['output'];
};


export type ProductSubmissionFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Returns who submitted the product submission file */
export type ProductSubmissionFileSubmitter = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type ProductSubmissionRubricGrade = NotificationTarget & {
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  lastGradedBy: Maybe<User>;
  pointsAvailable: Scalars['Int']['output'];
  pointsScored: Scalars['Int']['output'];
  results: Array<RubricGradeResult>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum ProductSubmissionStatus {
  /** Status for draft submissions */
  DRAFT = 'DRAFT',
  /** Status for submitted submissions */
  SUBMITTED = 'SUBMITTED'
}

export enum ResourceClass {
  /** New Resume avatar resource */
  NEW_RESUME = 'NEW_RESUME',
  /** Portfolio Project resource */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Portfolio Project File resource */
  PORTFOLIO_PROJECT_FILE = 'PORTFOLIO_PROJECT_FILE',
  /** Product submission file resource */
  PRODUCT_SUBMISSION_FILE = 'PRODUCT_SUBMISSION_FILE',
  /** Resume resource */
  RESUME = 'RESUME'
}

export type Result = {
  contextName: Scalars['String']['output'];
  gradedAt: Scalars['ISO8601Date']['output'];
  origin: ServiceNames;
  rubricName: Scalars['String']['output'];
  scoreEarned: Scalars['Int']['output'];
  tag: Tag;
};

export type Resume = {
  avatarUrl: Maybe<Scalars['String']['output']>;
  badges: Array<Badge>;
  bio: Maybe<Scalars['String']['output']>;
  contactLinks: Array<ContactLink>;
  educations: Array<ResumeItem>;
  experiences: Array<ResumeItem>;
  externalResumes: Array<ExternalResume>;
  extraCurriculars: Array<ResumeItem>;
  highlightedBadges: Array<Badge>;
  highlightedProjects: Array<PortfolioProject>;
  highlightedProjectsEnabled: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  projects: Maybe<PortfolioProjectConnection>;
  shareCode: Maybe<Scalars['String']['output']>;
  /** @deprecated Use share_code instead */
  sharedUrl: Maybe<Scalars['String']['output']>;
  sharedUrlEnabled: Scalars['Boolean']['output'];
};


export type ResumeProjectsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  type: PortfolioKind;
};

export type ResumeItem = {
  description: Maybe<Scalars['String']['output']>;
  endedAt: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  startedAt: Scalars['ISO8601Date']['output'];
  type: ResumeItemTypes;
  visible: Scalars['Boolean']['output'];
};

export type ResumeItemAttributes = {
  description?: InputMaybe<Scalars['String']['input']>;
  endedAt?: InputMaybe<Scalars['ISO8601Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  startedAt: Scalars['ISO8601Date']['input'];
  visible: Scalars['Boolean']['input'];
};

export enum ResumeItemTypes {
  /** Education Resume Item */
  EDUCATION = 'EDUCATION',
  /** Experience Resume Item */
  EXPERIENCE = 'EXPERIENCE',
  /** Extra curricular Resume Item */
  EXTRA_CURRICULAR = 'EXTRA_CURRICULAR'
}

/** All queries for Student [Learning] */
export type Root = {
  conversation: Maybe<Conversation>;
  conversationGroup: ConversationGroup;
  conversationGroups: ConversationGroupConnection;
  conversationRecipients: ConversationRecipientConnection;
  conversations: ConversationConnection;
  ltiResource: Maybe<LtiResource>;
  myClasses: Array<SchoolClass>;
  myTasks: TaskPage;
  notifications: NotificationPage;
  plan: Plan;
  plans: Array<Plan>;
  portfolio: Portfolio;
  sharedResume: Resume;
  studentReport: StudentReport;
  task: Maybe<Task>;
  userInfo: UserInfo;
  users: UserPage;
};


/** All queries for Student [Learning] */
export type RootConversationArgs = {
  id: Scalars['ID']['input'];
  markAsRead?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student [Learning] */
export type RootConversationGroupArgs = {
  with: ConversationParticipantFilter;
};


/** All queries for Student [Learning] */
export type RootConversationGroupsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student [Learning] */
export type RootConversationRecipientsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConversationRecipientFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student [Learning] */
export type RootConversationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  with?: InputMaybe<ConversationParticipantFilter>;
};


/** All queries for Student [Learning] */
export type RootLtiResourceArgs = {
  contextId?: InputMaybe<Scalars['String']['input']>;
  ltiResourceLinkId?: InputMaybe<Scalars['String']['input']>;
};


/** All queries for Student [Learning] */
export type RootMyTasksArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student [Learning] */
export type RootNotificationsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<NotificationStatus>;
  type?: InputMaybe<NotificationTypes>;
};


/** All queries for Student [Learning] */
export type RootPlanArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for Student [Learning] */
export type RootPortfolioArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student [Learning] */
export type RootSharedResumeArgs = {
  shareCode: Scalars['String']['input'];
};


/** All queries for Student [Learning] */
export type RootStudentReportArgs = {
  planId: Scalars['ID']['input'];
};


/** All queries for Student [Learning] */
export type RootTaskArgs = {
  id: Scalars['ID']['input'];
  teamId?: InputMaybe<Scalars['ID']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student [Learning] */
export type RootUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type Rubric = {
  criteriaLabels: Array<RubricCriteriaLabel>;
  criterias: Array<RubricCriteria>;
  description: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  hasAlignedStatements: Scalars['Boolean']['output'];
  headings: Array<RubricHeading>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricCriteria = {
  id: Scalars['ID']['output'];
  rubricCriteriaLabelId: Scalars['ID']['output'];
  rubricHeadingId: Scalars['ID']['output'];
  text: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricCriteriaLabel = {
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  score: Scalars['Int']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricGradeResult = {
  criteriaId: Scalars['ID']['output'];
  trait: Maybe<Scalars['String']['output']>;
};

export type RubricHeading = {
  id: Scalars['ID']['output'];
  multiplier: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricScore = {
  currentScore: Scalars['Int']['output'];
  label: Scalars['String']['output'];
  maxScore: Scalars['Int']['output'];
};

export type SchoolClass = {
  name: Scalars['String']['output'];
  users: Array<SchoolClassTeacher>;
  uuid: Scalars['ID']['output'];
};

/** User who is assigned to school class */
export type SchoolClassTeacher = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Autogenerated input type of SendMessageMutation */
export type SendMessageMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  conversationId: Scalars['ID']['input'];
};

/** Autogenerated return type of SendMessageMutation. */
export type SendMessageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  message: Message;
};

export enum ServiceNames {
  /** Careers service */
  CAREERS = 'CAREERS',
  /** Learning service */
  LEARNING = 'LEARNING'
}

export type Settings = {
  selfEvaluationEnabled: Scalars['Boolean']['output'];
};

export type Skills = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

export type Slide = {
  backgroundColor: Maybe<Scalars['String']['output']>;
  backgroundImage: Maybe<Scalars['String']['output']>;
  checkInGroups: Array<CheckInGroup>;
  checkInQuestions: Array<CheckInQuestion>;
  content: SlideContent;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  iframeUrl: Maybe<Scalars['String']['output']>;
  isShared: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  notes: Maybe<Scalars['String']['output']>;
  products: Array<Product>;
  slideBackgroundImages: Array<SlideBackgroundImage>;
  step: Scalars['Int']['output'];
  subslides: Maybe<Array<Slide>>;
  template: Scalars['String']['output'];
};

export type SlideBackgroundImage = {
  id: Scalars['ID']['output'];
  thumbnailUrl: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type SlideContent = {
  id: Scalars['ID']['output'];
  images: Array<SlideImage>;
  links: Array<SlideLink>;
  texts: Array<SlideTextItem>;
  videos: Array<SlideVideo>;
};

export type SlideImage = {
  contentId: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  position: Maybe<Scalars['String']['output']>;
  style: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type SlideLink = {
  contentId: Scalars['ID']['output'];
  targetId: Scalars['ID']['output'];
  targetName: Scalars['String']['output'];
  text: Scalars['String']['output'];
};

export type SlideTextItem = {
  contentId: Maybe<Scalars['String']['output']>;
  style: Maybe<Scalars['String']['output']>;
  type: Maybe<Scalars['String']['output']>;
  value: Maybe<Scalars['String']['output']>;
};

export type SlideVideo = {
  contentId: Scalars['String']['output'];
  filename: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  url: Maybe<Scalars['String']['output']>;
  videoUrl: Maybe<Scalars['String']['output']>;
};

export type Standard = {
  grade: Scalars['String']['output'];
  standardNumber: Scalars['String']['output'];
  standardText: Scalars['String']['output'];
  subject: Scalars['String']['output'];
};

export type StandardSet = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  setId: Scalars['ID']['output'];
};

export type Student = ConversationMember & ConversationParticipant & Evaluator & ProductSubmissionFileSubmitter & {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  gradYear: Maybe<Scalars['Int']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  sisId: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Returns for which resource badge was awarded */
export type StudentBadgeResource = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type StudentReport = {
  goalPerformanceIndicatorsData: Array<GoalPerformanceData>;
  overallData: OverallData;
  plan: Plan;
  student: Student;
};

export enum SubmissionFileSource {
  /** Submissions uploaded from Google Drive */
  GOOGLE = 'GOOGLE',
  /** Submissions uploaded from disk */
  LOCAL = 'LOCAL'
}

export type SubmissionGrade = NotificationTarget & {
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  lastGradedBy: Maybe<User>;
  status: SubmissionGradeStatuses;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum SubmissionGradeStatuses {
  /** Status for accepted submission grades */
  ACCEPTED = 'ACCEPTED',
  /** Status for not accepted submission grades */
  NOT_ACCEPTED = 'NOT_ACCEPTED'
}

export enum SubmissionStatus {
  /** Submissions of draft status */
  DRAFT = 'DRAFT',
  /** Submissions of submitted status */
  SUBMITTED = 'SUBMITTED'
}

export type Tag = {
  id: Scalars['ID']['output'];
  isDefault: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  type: TagTypes;
};

export enum TagTypes {
  /** Entity */
  ENTITY = 'ENTITY',
  /** System */
  SYSTEM = 'SYSTEM'
}

export type Task = ConversationContext & NotificationTarget & StudentBadgeResource & {
  assignedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  checkInGroups: Array<CheckInGroup>;
  checkInQuestions: Array<CheckInQuestion>;
  course: Course;
  courses: Array<Course>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  files: Array<TaskFile>;
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  introduction: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  originator: Maybe<TaskOriginator>;
  presentation: Maybe<Presentation>;
  presentationUrl: Maybe<Scalars['String']['output']>;
  products: Array<Product>;
  standard: Maybe<Scalars['String']['output']>;
  standards: Array<Standard>;
  step: Maybe<Scalars['Int']['output']>;
  studentResources: Maybe<Scalars['String']['output']>;
  teachingResources: Maybe<Scalars['String']['output']>;
  team: Maybe<Team>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  units: Array<Unit>;
};


export type TaskCourseArgs = {
  id: Scalars['ID']['input'];
};


export type TaskPresentationArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


export type TaskStandardsArgs = {
  setId: Scalars['String']['input'];
};

export type TaskFile = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  step: Scalars['String']['output'];
  url: Scalars['String']['output'];
};


export type TaskFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** User who assigned student to task */
export type TaskOriginator = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type TaskPage = {
  nodes: Array<Task>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type Team = ConversationParticipant & NotificationTarget & {
  email: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  members: Maybe<Array<ConversationMember>>;
  name: Scalars['String']['output'];
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type TeamCheckInSubmission = ConversationContext & {
  answers: Array<TeamCheckInSubmissionAnswer>;
  canSubmit: Scalars['Boolean']['output'];
  grade: Maybe<SubmissionGrade>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  students: Array<Student>;
};

export type TeamCheckInSubmissionAnswer = {
  answer: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  student: Student;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type Technology = TitleWithElements & {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

/** Common fields for items that contain `title` and a list of `elements` */
export type TitleWithElements = {
  elements: Array<Scalars['String']['output']>;
  title: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of TrackSlideVisitMutation */
export type TrackSlideVisitMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  slideId: Scalars['ID']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of TrackSlideVisitMutation. */
export type TrackSlideVisitMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

export type Unit = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
};

/** Autogenerated input type of UpdateCheckInQuestionAnswerMutation */
export type UpdateCheckInQuestionAnswerMutationInput = {
  answer: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateCheckInQuestionAnswerMutation. */
export type UpdateCheckInQuestionAnswerMutationPayload = {
  checkInQuestionAnswer: CheckInQuestionAnswer;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateContactLinkMutation */
export type UpdateContactLinkMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  type?: InputMaybe<ContactLinkTypes>;
  value?: InputMaybe<Scalars['String']['input']>;
  visible?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UpdateContactLinkMutation. */
export type UpdateContactLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  contactLink: Maybe<ContactLink>;
};

/** Autogenerated input type of UpdateNotificationMutation */
export type UpdateNotificationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  read: Scalars['Boolean']['input'];
};

/** Autogenerated return type of UpdateNotificationMutation. */
export type UpdateNotificationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  notification: Notification;
};

/** Autogenerated input type of UpdatePortfolioProjectMutation */
export type UpdatePortfolioProjectMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePortfolioProjectMutation. */
export type UpdatePortfolioProjectMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  portfolioProject: PortfolioProject;
};

/** Autogenerated input type of UpdateProductSubmissionMutation */
export type UpdateProductSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  status?: InputMaybe<ProductSubmissionStatus>;
};

/** Autogenerated return type of UpdateProductSubmissionMutation. */
export type UpdateProductSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  productSubmission: Maybe<ProductSubmission>;
};

/** Autogenerated input type of UpdateResumeMutation */
export type UpdateResumeMutationInput = {
  avatarFilename?: InputMaybe<Scalars['String']['input']>;
  avatarUuid?: InputMaybe<Scalars['ID']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contactLinks?: InputMaybe<Array<ContactLinkAttributes>>;
  educations?: InputMaybe<Array<ResumeItemAttributes>>;
  experiences?: InputMaybe<Array<ResumeItemAttributes>>;
  extraCurriculars?: InputMaybe<Array<ResumeItemAttributes>>;
  highlightedBadgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  highlightedProjects?: InputMaybe<Array<HighlightedProjectAttributes>>;
  highlightedProjectsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  sharedUrlEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UpdateResumeMutation. */
export type UpdateResumeMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  resume: Resume;
};

/** Autogenerated input type of UpdateTeamCheckInSubmissionAnswerMutation */
export type UpdateTeamCheckInSubmissionAnswerMutationInput = {
  answer: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateTeamCheckInSubmissionAnswerMutation. */
export type UpdateTeamCheckInSubmissionAnswerMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  teamCheckInSubmissionAnswer: TeamCheckInSubmissionAnswer;
};

export type User = ConversationMember & ConversationParticipant & Evaluator & NotificationActor & ProductSubmissionFileSubmitter & SchoolClassTeacher & TaskOriginator & {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering Users */
export type UserFilter = {
  fullNameCont?: InputMaybe<Scalars['String']['input']>;
};

export type UserInfo = {
  currentSchoolYear: Scalars['Int']['output'];
  definedLearningUuid: Maybe<Scalars['ID']['output']>;
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  gradYear: Maybe<Scalars['Int']['output']>;
  hasAccessToCareers: Scalars['Boolean']['output'];
  hasAccessToLearning: Scalars['Boolean']['output'];
  /** @deprecated Use hasAccessToLearning instead */
  hasAccessToPbl: Scalars['Boolean']['output'];
  hasPlans: Scalars['Boolean']['output'];
  hasUnreadConversation: Scalars['Boolean']['output'];
  iconUrl: Maybe<Scalars['String']['output']>;
  isImpersonated: Scalars['Boolean']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  logoUrl: Maybe<Scalars['String']['output']>;
  ltiDetails: Maybe<LtiDetails>;
  settings: Settings;
  sisId: Maybe<Scalars['String']['output']>;
  standardSets: Array<StandardSet>;
  unreadNotificationsCount: Scalars['Int']['output'];
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
  welcomeMessage: Maybe<Scalars['String']['output']>;
};

export type UserPage = {
  nodes: Array<User>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type VirtualInternship = StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};
