export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601Date: { input: string; output: string; }
  ISO8601DateTime: { input: string; output: string; }
};

/** Autogenerated input type of AddOpportunityToFavoritesMutation */
export type AddOpportunityToFavoritesMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AddOpportunityToFavoritesMutation. */
export type AddOpportunityToFavoritesMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  opportunity: Opportunity;
};

export type Announcement = ConversationContext & NotificationTarget & {
  author: AnnouncementAuthor;
  body: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  target: AnnouncementTarget;
};

/** Announcement author */
export type AnnouncementAuthor = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** The connection type for Announcement. */
export type AnnouncementConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<AnnouncementEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Announcement>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type AnnouncementEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Announcement>;
};

/** Announcement Target */
export type AnnouncementTarget = {
  name: Scalars['String']['output'];
  parentName: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Autogenerated input type of AnswerPlanGroupStatementQuestionMutation */
export type AnswerPlanGroupStatementQuestionMutationInput = {
  answer: Array<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  questionId: Scalars['ID']['input'];
};

/** Autogenerated return type of AnswerPlanGroupStatementQuestionMutation. */
export type AnswerPlanGroupStatementQuestionMutationPayload = {
  answer: Maybe<PlanGroupStatementQuestionAnswer>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

export enum ApplicationStatus {
  /** Accepted application */
  ACCEPTED = 'ACCEPTED',
  /** Finished application */
  FINISHED = 'FINISHED',
  /** Pending application */
  PENDING = 'PENDING',
  /** Rejected application */
  REJECTED = 'REJECTED',
  /** Started application */
  STARTED = 'STARTED'
}

export type AssessmentAttempt = {
  assessmentType: AssessmentTypes;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  status: AssessmentAttemptStatus;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum AssessmentAttemptStatus {
  /** Status for failed assessment attempts */
  FAILED = 'FAILED',
  /** Status for finished assessment attempts */
  FINISHED = 'FINISHED',
  /** Status for assessment attempts in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Status for assessment attempts for which assessment results are being processed */
  PROCESSING_RESULTS = 'PROCESSING_RESULTS',
  /** Status for rejected assessment attempts */
  REJECTED = 'REJECTED'
}

export type AssessmentProgress = {
  attempt: Maybe<AssessmentAttempt>;
  enrolledInCourse: Scalars['Boolean']['output'];
  interestsAnswers: Array<InterestsAnswer>;
  result: Maybe<AssessmentResult>;
  reviewSurveyAnswers: Array<CareerReviewSurveyAnswer>;
  status: AssessmentStatus;
  studyPreferencesAnswers: Array<StudyPreferencesAnswer>;
  workValuesAnswers: Array<WorkValuesAnswer>;
};

export type AssessmentResult = {
  additionalPathways: Array<Pathway>;
  id: Scalars['ID']['output'];
  recommendedPathways: Array<Pathway>;
};

export type AssessmentStatus = {
  interests: AssessmentStatuses;
  reviewSurvey: AssessmentStatuses;
  studyPreferences: AssessmentStatuses;
  workValues: AssessmentStatuses;
};

export enum AssessmentStatuses {
  /** Assessments that have been completed */
  COMPLETED = 'COMPLETED',
  /** Assessments that are in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Assessments that not have been started yet */
  NOT_STARTED = 'NOT_STARTED'
}

export enum AssessmentTypes {
  /** Courses of high school type */
  HIGH_SCHOOL = 'HIGH_SCHOOL',
  /** Courses of middle school type */
  MIDDLE_SCHOOL = 'MIDDLE_SCHOOL'
}

export enum Asset {
  /** Avatar asset type */
  AVATAR = 'AVATAR',
  /** Generic file asset type */
  FILE = 'FILE',
  /** Image asset type */
  IMAGE = 'IMAGE',
  /** Video asset type */
  VIDEO = 'VIDEO'
}

export type Assignment = ConversationContext & StudentBadgeResource & {
  description: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  rubrics: Array<Rubric>;
  step: Maybe<Scalars['Int']['output']>;
  submission: Maybe<AssignmentSubmission>;
};

export type AssignmentSubmission = {
  acceptanceGrade: Maybe<SubmissionGrade>;
  files: Array<AssignmentSubmissionFile>;
  /** @deprecated Use acceptanceGrade instead */
  grade: Maybe<SubmissionGrade>;
  id: Scalars['ID']['output'];
  rubricGrade: Maybe<AssignmentSubmissionRubricGrade>;
  status: AssignmentSubmissionStatus;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum AssignmentSubmissionContextTypes {
  /** Course assignment submission context type */
  COURSE = 'COURSE',
  /** Virtual Internship assignment submission context type */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export type AssignmentSubmissionFile = {
  filename: Scalars['String']['output'];
  googleWeblink: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  source: Scalars['String']['output'];
  url: Scalars['String']['output'];
};


export type AssignmentSubmissionFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

export type AssignmentSubmissionRubricGrade = NotificationTarget & {
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  lastGradedBy: Maybe<User>;
  pointsAvailable: Scalars['Int']['output'];
  pointsScored: Scalars['Int']['output'];
  results: Array<RubricGradeResult>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum AssignmentSubmissionStatus {
  /** Status for draft submissions */
  DRAFT = 'DRAFT',
  /** Status for submitted submissions */
  SUBMITTED = 'SUBMITTED'
}

export type Attachment = {
  description: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  files: Array<AttachmentFile>;
  id: Scalars['ID']['output'];
  step: Maybe<Scalars['Int']['output']>;
};

export type AttachmentFile = {
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};


export type AttachmentFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

export type Badge = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  isHighlighted: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  resource: StudentBadgeResource;
  thumbnailUrl: Scalars['String']['output'];
};

export type CareerExperienceEntry = {
  clusterId: Scalars['ID']['output'];
  clusterName: Scalars['String']['output'];
  submissions: Array<CareerExperienceSubmissionEntry>;
  submissionsCount: Scalars['Int']['output'];
};

export type CareerExperienceSubmissionEntry = {
  contextName: Scalars['String']['output'];
  isTeamSubmission: Scalars['Boolean']['output'];
  service: ServiceNames;
  submissionName: Scalars['String']['output'];
  submittedAt: Scalars['ISO8601DateTime']['output'];
};

export type CareerReviewSurvey = {
  performed: Scalars['Boolean']['output'];
  questions: Array<CareerReviewSurveyQuestion>;
  version: Scalars['Int']['output'];
};

export type CareerReviewSurveyAnswer = {
  answer: Array<Maybe<Scalars['String']['output']>>;
  id: Scalars['ID']['output'];
  question: CareerReviewSurveyQuestion;
};

/** Attributes for creating Career Review Survey Answer */
export type CareerReviewSurveyAnswerAttributes = {
  answer: Array<Scalars['String']['input']>;
  questionId: Scalars['ID']['input'];
};

export enum CareerReviewSurveyAnswerContextTypes {
  /** Assessment Career review survey answer context type */
  ASSESSMENT = 'ASSESSMENT',
  /** Course Career review survey answer context type */
  COURSE = 'COURSE',
  /** Virtual Internship Career review survey answer context type */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export type CareerReviewSurveyAttempt = {
  answers: Array<CareerReviewSurveyAnswer>;
  id: Scalars['ID']['output'];
  status: CareerReviewSurveyAttemptStatus;
};

export enum CareerReviewSurveyAttemptStatus {
  /** Status for completed career review survey */
  COMPLETED = 'COMPLETED',
  /** Status for review survey in progress */
  IN_PROGRESS = 'IN_PROGRESS'
}

export type CareerReviewSurveyQuestion = {
  answer: Array<Maybe<Scalars['String']['output']>>;
  id: Scalars['ID']['output'];
  options: Array<CareerReviewSurveyQuestionOption>;
  question: Scalars['String']['output'];
  type: Scalars['String']['output'];
};

export type CareerReviewSurveyQuestionOption = {
  option: Scalars['String']['output'];
  step: Scalars['Int']['output'];
};

export type Catalog = {
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
  track: Track;
  tracks: Array<Track>;
};


export type CatalogTrackArgs = {
  id: Scalars['ID']['input'];
};

export type CheckInGroup = StudentBadgeResource & {
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  questions: Array<CheckInQuestion>;
  step: Maybe<Scalars['Int']['output']>;
};

export type CheckInQuestion = {
  answer: Maybe<CheckInQuestionAnswer>;
  answered: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  question: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
};

export type CheckInQuestionAnswer = ConversationContext & {
  answer: Maybe<Scalars['String']['output']>;
  checkInQuestionId: Scalars['ID']['output'];
  contextId: Scalars['ID']['output'];
  contextType: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  grade: Maybe<SubmissionGrade>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  studentId: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type Cluster = {
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  pathways: Array<Pathway>;
  thumbnailUrl: Scalars['String']['output'];
};

export type Collection = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type CommonAppData = {
  canChangeCounselor: Scalars['Boolean']['output'];
  canSelectCounselor: Scalars['Boolean']['output'];
  connectionUrl: Scalars['String']['output'];
  currentCounselor: Maybe<Recommender>;
  hasAccountConnected: Scalars['Boolean']['output'];
  hasCounselorInvited: Scalars['Boolean']['output'];
  hasFerpaSigned: Scalars['Boolean']['output'];
  syncStatus: Maybe<CommonAppSyncStatus>;
};

export enum CommonAppFormTypes {
  /** Counselor early decision form */
  COUNSELOR_EARLY_DECISION = 'COUNSELOR_EARLY_DECISION',
  /** Counselor early decision 2 form */
  COUNSELOR_EARLY_DECISION_2 = 'COUNSELOR_EARLY_DECISION_2',
  /** Counselor fee waiver form */
  COUNSELOR_FEE_WAIVER = 'COUNSELOR_FEE_WAIVER',
  /** Counselor final report form */
  COUNSELOR_FINAL_REPORT = 'COUNSELOR_FINAL_REPORT',
  /** Counselor midyear report form */
  COUNSELOR_MIDYEAR_REPORT = 'COUNSELOR_MIDYEAR_REPORT',
  /** Counselor optional report form */
  COUNSELOR_OPTIONAL_REPORT = 'COUNSELOR_OPTIONAL_REPORT',
  /** Counselor optional report 2 form */
  COUNSELOR_OPTIONAL_REPORT_2 = 'COUNSELOR_OPTIONAL_REPORT_2',
  /** Counselor profile form */
  COUNSELOR_PROFILE = 'COUNSELOR_PROFILE',
  /** Counselor recommendation form */
  COUNSELOR_RECOMMENDATION = 'COUNSELOR_RECOMMENDATION',
  /** Counselor secondary report form */
  COUNSELOR_SECONDARY_REPORT = 'COUNSELOR_SECONDARY_REPORT',
  /** Teacher profile form */
  TEACHER_PROFILE = 'TEACHER_PROFILE',
  /** Teacher recommendation form */
  TEACHER_RECOMMENDATION = 'TEACHER_RECOMMENDATION'
}

export type CommonAppMetadataAttributes = {
  applicantId?: InputMaybe<Scalars['Int']['input']>;
};

export type CommonAppSyncStatus = {
  lastSyncedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  status: CommonAppSyncStatuses;
};

export enum CommonAppSyncStatuses {
  /** Sync attempts that are completed */
  COMPLETED = 'COMPLETED',
  /** Sync attempts that failed */
  FAILED = 'FAILED',
  /** Sync attempts that are still in progress */
  IN_PROGRESS = 'IN_PROGRESS'
}

export type ContactLink = {
  id: Scalars['ID']['output'];
  type: ContactLinkTypes;
  value: Scalars['String']['output'];
  visible: Scalars['Boolean']['output'];
};

export type ContactLinkAttributes = {
  id?: InputMaybe<Scalars['ID']['input']>;
  type: ContactLinkTypes;
  value: Scalars['String']['input'];
  visible: Scalars['Boolean']['input'];
};

export enum ContactLinkTypes {
  /** Behance Contact Link */
  BEHANCE = 'BEHANCE',
  /** Custom Contact Link */
  CUSTOM = 'CUSTOM',
  /** Dribbble Contact Link */
  DRIBBBLE = 'DRIBBBLE',
  /** Email Contact Link */
  EMAIL = 'EMAIL',
  /** Instagram Contact Link */
  INSTAGRAM = 'INSTAGRAM',
  /** Linkedin Contact Link */
  LINKEDIN = 'LINKEDIN',
  /** Phone Contact Link */
  PHONE = 'PHONE'
}

export type Conversation = {
  conversationContext: Maybe<ConversationContext>;
  id: Scalars['ID']['output'];
  messages: MessageConnection;
  messagesRead: Scalars['Boolean']['output'];
  participant: ConversationParticipant;
  /** @deprecated To be removed */
  participants: Array<ConversationParticipant>;
  recentMessage: Maybe<Message>;
  serviceName: Maybe<Scalars['String']['output']>;
  type: ConversationTypes;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type ConversationMessagesArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Conversation. */
export type ConversationConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Conversation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** Conversation Context */
export type ConversationContext = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export enum ConversationContextTypes {
  /** Announcement conversation context type */
  ANNOUNCEMENT = 'ANNOUNCEMENT',
  /** Assignment conversation context type */
  ASSIGNMENT = 'ASSIGNMENT',
  /** Check-in answer conversation context type */
  CHECK_IN_ANSWER = 'CHECK_IN_ANSWER',
  /** Course conversation context type */
  COURSE = 'COURSE',
  /** Lesson conversation context type */
  LESSON = 'LESSON',
  /** Opportunity conversation context type */
  OPPORTUNITY = 'OPPORTUNITY'
}

/** An edge in a connection. */
export type ConversationEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Conversation>;
};

export type ConversationGroup = {
  hasUnreadConversation: Scalars['Boolean']['output'];
  participant: ConversationParticipant;
  recentConversation: Conversation;
};

/** The connection type for ConversationGroup. */
export type ConversationGroupConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationGroupEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<ConversationGroup>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ConversationGroupEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<ConversationGroup>;
};

/** Conversation Member - a single member of a conversation (either as a direct participant or as a member of a group participant, e.g. student from a team.) */
export type ConversationMember = {
  email: Maybe<Scalars['String']['output']>;
  name: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Conversation Participant - can be a single member (User or Student) or a group of members (Team). Group participants return additional attributes: owner and members. */
export type ConversationParticipant = {
  email: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering conversation participants */
export type ConversationParticipantFilter = {
  participantType: ConversationParticipantTypes;
  participantUuid: Scalars['ID']['input'];
};

export enum ConversationParticipantTypes {
  /** Student conversation participant type */
  STUDENT = 'STUDENT',
  /** Team conversation participant type */
  TEAM = 'TEAM',
  /** User conversation participant type */
  USER = 'USER'
}

export type ConversationRecipient = {
  name: Scalars['String']['output'];
  recipientType: ConversationParticipantTypes;
  recipientUuid: Scalars['ID']['output'];
};

/** The connection type for ConversationRecipient. */
export type ConversationRecipientConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationRecipientEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<ConversationRecipient>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ConversationRecipientEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<ConversationRecipient>;
};

/** Attributes for filtering conversation recipients */
export type ConversationRecipientFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<ConversationRecipientTypes>;
};

export enum ConversationRecipientTypes {
  /** Student conversation recipient type */
  STUDENT = 'STUDENT',
  /** Team conversation recipient type */
  TEAM = 'TEAM',
  /** User conversation recipient type */
  USER = 'USER'
}

export enum ConversationTypes {
  /** Contextual conversation type */
  CONTEXTUAL = 'CONTEXTUAL',
  /** General conversation type */
  GENERAL = 'GENERAL'
}

export enum CostRanges {
  /** Institution cost value between 5001 and 10000 */
  FROM_5001_TO_10000 = 'FROM_5001_TO_10000',
  /** Institution cost value between 10001 and 15000 */
  FROM_10001_TO_15000 = 'FROM_10001_TO_15000',
  /** Institution cost value between 15001 and 20000 */
  FROM_15001_TO_20000 = 'FROM_15001_TO_20000',
  /** Institution cost value between 0 and 5000 */
  LESS_THAN_5000 = 'LESS_THAN_5000',
  /** Institution cost value higher than 20000 */
  MORE_THAN_20000 = 'MORE_THAN_20000'
}

export type Course = ConversationContext & NotificationTarget & StudentBadgeResource & {
  assignments: Maybe<Array<Assignment>>;
  careerName: Maybe<Scalars['String']['output']>;
  collection: Maybe<Collection>;
  content: Array<CourseContent>;
  description: Maybe<Scalars['String']['output']>;
  hasInstitutionsInStudentState: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  isEnrolled: Scalars['Boolean']['output'];
  isRecommended: Scalars['Boolean']['output'];
  lesson: Lesson;
  lessons: Array<Lesson>;
  match: Maybe<Scalars['Int']['output']>;
  metadata: CourseMetadata;
  name: Scalars['String']['output'];
  pathway: Maybe<Pathway>;
  progress: CourseProgress;
  reviewSurvey: Maybe<CareerReviewSurvey>;
  status: CourseStatuses;
  thumbnailUrl: Scalars['String']['output'];
  type: CourseTypes;
};


export type CourseLessonArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseContent = {
  checkIns: Array<LessonItem>;
  extensionFields: Array<ExtensionField>;
  id: Scalars['ID']['output'];
  items: Array<LessonItem>;
  name: Scalars['String']['output'];
  surveyPerformed: Scalars['Boolean']['output'];
  type: LessonTypes;
};

export type CourseMetadata = {
  alternativeTitles: Maybe<Scalars['String']['output']>;
  averageSalary: Maybe<Scalars['String']['output']>;
  jobZone: Maybe<Scalars['String']['output']>;
  onetCode: Maybe<Scalars['String']['output']>;
  outlook: Maybe<Scalars['String']['output']>;
};

export type CoursePage = {
  nodes: Array<Course>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type CourseProgress = {
  accepted: Scalars['Int']['output'];
  submitted: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export enum CourseStatuses {
  /** Status for draft courses */
  DRAFT = 'DRAFT',
  /** Status for published courses */
  PUBLISHED = 'PUBLISHED'
}

export enum CourseTypes {
  /** Courses of high school type */
  HIGH_SCHOOL = 'HIGH_SCHOOL',
  /** Courses of middle school type */
  MIDDLE_SCHOOL = 'MIDDLE_SCHOOL'
}

/** Autogenerated input type of CreateAssessmentAttemptMutation */
export type CreateAssessmentAttemptMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateAssessmentAttemptMutation. */
export type CreateAssessmentAttemptMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
};

/** Autogenerated input type of CreateAssessmentResultMutation */
export type CreateAssessmentResultMutationInput = {
  attemptId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateAssessmentResultMutation. */
export type CreateAssessmentResultMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of CreateAssignmentSubmissionFileFromGoogleDriveMutation */
export type CreateAssignmentSubmissionFileFromGoogleDriveMutationInput = {
  accessToken: Scalars['String']['input'];
  assignmentSubmissionId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileId: Scalars['String']['input'];
};

/** Autogenerated return type of CreateAssignmentSubmissionFileFromGoogleDriveMutation. */
export type CreateAssignmentSubmissionFileFromGoogleDriveMutationPayload = {
  assignmentSubmissionFile: Maybe<AssignmentSubmissionFile>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateAssignmentSubmissionFileMutation */
export type CreateAssignmentSubmissionFileMutationInput = {
  assignmentSubmissionId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateAssignmentSubmissionFileMutation. */
export type CreateAssignmentSubmissionFileMutationPayload = {
  assignmentSubmissionFile: Maybe<AssignmentSubmissionFile>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateAssignmentSubmissionMutation */
export type CreateAssignmentSubmissionMutationInput = {
  assignmentId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contextId: Scalars['ID']['input'];
  contextType: AssignmentSubmissionContextTypes;
};

/** Autogenerated return type of CreateAssignmentSubmissionMutation. */
export type CreateAssignmentSubmissionMutationPayload = {
  assignmentSubmission: Maybe<AssignmentSubmission>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateCareerReviewSurveyAnswersMutation */
export type CreateCareerReviewSurveyAnswersMutationInput = {
  answers: Array<CareerReviewSurveyAnswerAttributes>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contextId?: InputMaybe<Scalars['ID']['input']>;
  contextType?: InputMaybe<CareerReviewSurveyAnswerContextTypes>;
};

/** Autogenerated return type of CreateCareerReviewSurveyAnswersMutation. */
export type CreateCareerReviewSurveyAnswersMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of CreateCareerReviewSurveyAttemptMutation */
export type CreateCareerReviewSurveyAttemptMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contextId?: InputMaybe<Scalars['ID']['input']>;
  contextType?: InputMaybe<CareerReviewSurveyAnswerContextTypes>;
};

/** Autogenerated return type of CreateCareerReviewSurveyAttemptMutation. */
export type CreateCareerReviewSurveyAttemptMutationPayload = {
  careerReviewSurveyAttempt: Maybe<CareerReviewSurveyAttempt>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateCheckInQuestionAnswerMutation */
export type CreateCheckInQuestionAnswerMutationInput = {
  answer: Scalars['String']['input'];
  checkInQuestionId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId?: InputMaybe<Scalars['ID']['input']>;
  lessonId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateCheckInQuestionAnswerMutation. */
export type CreateCheckInQuestionAnswerMutationPayload = {
  checkInQuestionAnswer: CheckInQuestionAnswer;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateContactLinkMutation */
export type CreateContactLinkMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  type: ContactLinkTypes;
  value: Scalars['String']['input'];
  visible?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of CreateContactLinkMutation. */
export type CreateContactLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  contactLink: Maybe<ContactLink>;
};

/** Autogenerated input type of CreateEvaluationCommentMutation */
export type CreateEvaluationCommentMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  statementId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEvaluationCommentMutation. */
export type CreateEvaluationCommentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
};

/** Autogenerated input type of CreateEvaluationMutation */
export type CreateEvaluationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  planId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEvaluationMutation. */
export type CreateEvaluationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
};

/** Autogenerated input type of CreateInstitutionApplicationMutation */
export type CreateInstitutionApplicationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  institutionId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateInstitutionApplicationMutation. */
export type CreateInstitutionApplicationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  institutionApplication: InstitutionApplication;
};

/** Autogenerated input type of CreateInterestsAnswersMutation */
export type CreateInterestsAnswersMutationInput = {
  answers: Array<InterestsAnswerAttributes>;
  async?: InputMaybe<Scalars['Boolean']['input']>;
  attemptId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateInterestsAnswersMutation. */
export type CreateInterestsAnswersMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of CreateOpportunityApplicationMutation */
export type CreateOpportunityApplicationMutationInput = {
  answers?: InputMaybe<Array<OpportunityApplicationAnswerAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  opportunityId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateOpportunityApplicationMutation. */
export type CreateOpportunityApplicationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  opportunityApplication: OpportunityApplication;
};

/** Autogenerated input type of CreatePlanGroupStatementEvidenceMutation */
export type CreatePlanGroupStatementEvidenceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evidences: Array<PlanGroupStatementEvidenceItemAttributes>;
  planGroupStatementId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePlanGroupStatementEvidenceMutation. */
export type CreatePlanGroupStatementEvidenceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of CreatePortfolioProjectFileMutation */
export type CreatePortfolioProjectFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
  portfolioProjectId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePortfolioProjectFileMutation. */
export type CreatePortfolioProjectFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  portfolioProjectFile: Maybe<PortfolioSubmissionFile>;
};

/** Autogenerated input type of CreatePortfolioProjectMutation */
export type CreatePortfolioProjectMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreatePortfolioProjectMutation. */
export type CreatePortfolioProjectMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  portfolioProject: Maybe<PortfolioProject>;
};

/** Autogenerated input type of CreateResumeMutation */
export type CreateResumeMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateResumeMutation. */
export type CreateResumeMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  resume: Maybe<ExternalResume>;
};

/** Autogenerated input type of CreateSharedSessionTokenMutation */
export type CreateSharedSessionTokenMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateSharedSessionTokenMutation. */
export type CreateSharedSessionTokenMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  token: Scalars['String']['output'];
};

/** Autogenerated input type of CreateStudentItemMutation */
export type CreateStudentItemMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  itemId: Scalars['ID']['input'];
  itemType: LessonItemTypes;
};

/** Autogenerated return type of CreateStudentItemMutation. */
export type CreateStudentItemMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of CreateStudyPreferencesAnswersMutation */
export type CreateStudyPreferencesAnswersMutationInput = {
  answers: Array<StudyPreferencesAnswerAttributes>;
  async?: InputMaybe<Scalars['Boolean']['input']>;
  attemptId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateStudyPreferencesAnswersMutation. */
export type CreateStudyPreferencesAnswersMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of CreateWorkValuesAnswersMutation */
export type CreateWorkValuesAnswersMutationInput = {
  answers: Array<WorkValuesAnswerAttributes>;
  async?: InputMaybe<Scalars['Boolean']['input']>;
  attemptId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateWorkValuesAnswersMutation. */
export type CreateWorkValuesAnswersMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

export type DashboardRecentResource = {
  collection: Maybe<Collection>;
  imageUrl: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  pathways: Array<Pathway>;
  resourceId: Scalars['ID']['output'];
  resourceType: DashboardRecentResourceTypes;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum DashboardRecentResourceTypes {
  /** Course type */
  COURSE = 'COURSE',
  /** Virtual Internship type */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum Degree {
  /** Associate's Degree */
  ASSOCIATES_DEGREE = 'ASSOCIATES_DEGREE',
  /** Bachelor's Degree */
  BACHELORS_DEGREE = 'BACHELORS_DEGREE',
  /** Certificates */
  CERTIFICATES = 'CERTIFICATES',
  /** Doctor's Degree */
  DOCTORS_DEGREE = 'DOCTORS_DEGREE',
  /** Master's Degree */
  MASTERS_DEGREE = 'MASTERS_DEGREE',
  /** Post-baccalaureate Certificate */
  POST_BACCALAUREATE_CERTIFICATE = 'POST_BACCALAUREATE_CERTIFICATE'
}

/** Autogenerated input type of DeleteAssignmentSubmissionFileMutation */
export type DeleteAssignmentSubmissionFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteAssignmentSubmissionFileMutation. */
export type DeleteAssignmentSubmissionFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteContactLinkMutation */
export type DeleteContactLinkMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteContactLinkMutation. */
export type DeleteContactLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteInstitutionApplicationMutation */
export type DeleteInstitutionApplicationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  institutionApplicationId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteInstitutionApplicationMutation. */
export type DeleteInstitutionApplicationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of DeleteOpportunityApplicationMutation */
export type DeleteOpportunityApplicationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  opportunityApplicationId: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteOpportunityApplicationMutation. */
export type DeleteOpportunityApplicationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of DeletePlanGroupStatementEvidenceMutation */
export type DeletePlanGroupStatementEvidenceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePlanGroupStatementEvidenceMutation. */
export type DeletePlanGroupStatementEvidenceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of DeletePortfolioProjectFileMutation */
export type DeletePortfolioProjectFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePortfolioProjectFileMutation. */
export type DeletePortfolioProjectFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeletePortfolioProjectMutation */
export type DeletePortfolioProjectMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePortfolioProjectMutation. */
export type DeletePortfolioProjectMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteResumeMutation */
export type DeleteResumeMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteResumeMutation. */
export type DeleteResumeMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DisenrollFromCourseMutation */
export type DisenrollFromCourseMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId: Scalars['ID']['input'];
};

/** Autogenerated return type of DisenrollFromCourseMutation. */
export type DisenrollFromCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  courseId: Scalars['ID']['output'];
};

/** Autogenerated input type of EnrollInCourseMutation */
export type EnrollInCourseMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId: Scalars['ID']['input'];
};

/** Autogenerated return type of EnrollInCourseMutation. */
export type EnrollInCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  course: Course;
};

/** Autogenerated input type of EvaluateStudentMutation */
export type EvaluateStudentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  results: Array<EvaluationResultAttributes>;
};

/** Autogenerated return type of EvaluateStudentMutation. */
export type EvaluateStudentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
};

export type Evaluation = {
  /** @deprecated Use comments from `statement` instead */
  comments: Array<EvaluationComment>;
  id: Scalars['ID']['output'];
  results: Array<EvaluationResult>;
  resultsHistory: Array<EvaluationResult>;
};


export type EvaluationResultsHistoryArgs = {
  statementId: Scalars['ID']['input'];
};

export type EvaluationComment = {
  author: Evaluator;
  body: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  statement: PlanGroupStatement;
};

export type EvaluationResult = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  evaluator: Evaluator;
  result: EvaluationResultValues;
  statement: PlanGroupStatement;
};

/** Attributes for evaluating students */
export type EvaluationResultAttributes = {
  result: EvaluationResultValues;
  statementId: Scalars['ID']['input'];
};

export enum EvaluationResultValues {
  /** Evaluation result with the  */
  COMPLETED = 'COMPLETED',
  /** Evaluation result with the  */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Evaluation result with the  */
  NOT_MET = 'NOT_MET',
  /** Evaluation with no result yet */
  NOT_STARTED = 'NOT_STARTED'
}

export type Evaluator = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export enum EvidenceContextKind {
  /** Course */
  COURSE = 'COURSE',
  /** Virtual Internship */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum EvidenceKind {
  /** Assignment submission */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** Opportunity application */
  OPPORTUNITY_APPLICATION = 'OPPORTUNITY_APPLICATION',
  /** Personal Portfolio Project */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Product submission */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION',
  /** Rubric Grade */
  RUBRIC_GRADE = 'RUBRIC_GRADE'
}

export type ExtensionField = {
  author: ExtensionFieldAuthor;
  description: Scalars['String']['output'];
  files: Array<ExtensionFieldFile>;
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  links: Array<ExtensionFieldLink>;
  name: Scalars['String']['output'];
};

/** Extension Field Author */
export type ExtensionFieldAuthor = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type ExtensionFieldFile = {
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};


export type ExtensionFieldFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

export type ExtensionFieldLink = {
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type ExternalPresentation = {
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  isExpandable: Scalars['Boolean']['output'];
  source: Scalars['String']['output'];
  step: Scalars['Int']['output'];
};

export type ExternalResume = {
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};


export type ExternalResumeUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

export type FinalReport = {
  additionalPathways: Array<Pathway>;
  assessmentAttempt: Maybe<AssessmentAttempt>;
  currentCourses: Array<Course>;
  finishedCourses: Array<Course>;
  interestsResult: Array<InterestsResult>;
  recommendedCourses: Array<Course>;
  recommendedPathways: Array<Pathway>;
  studyPreferencesResult: Array<StudyPreferencesResult>;
  workValuesResult: Array<WorkValuesResult>;
};

/** Autogenerated input type of FindOrCreateConversationMutation */
export type FindOrCreateConversationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contextId?: InputMaybe<Scalars['ID']['input']>;
  contextType?: InputMaybe<ConversationContextTypes>;
  receiverType: ConversationParticipantTypes;
  receiverUuid: Scalars['ID']['input'];
  type: ConversationTypes;
};

/** Autogenerated return type of FindOrCreateConversationMutation. */
export type FindOrCreateConversationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  conversation: Conversation;
};

export type FormStatus = {
  downloadedDate: Maybe<Scalars['ISO8601DateTime']['output']>;
  formType: CommonAppFormTypes;
  status: FormStatuses;
  submittedDate: Maybe<Scalars['ISO8601DateTime']['output']>;
};

export enum FormStatuses {
  /** Completed */
  COMPLETED = 'COMPLETED',
  /** Downloaded */
  DOWNLOADED = 'DOWNLOADED',
  /** In progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Not started */
  NOT_STARTED = 'NOT_STARTED',
  /** Submitted */
  SUBMITTED = 'SUBMITTED'
}

/** Autogenerated input type of GenerateFerpaUrlMutation */
export type GenerateFerpaUrlMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of GenerateFerpaUrlMutation. */
export type GenerateFerpaUrlMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  url: Scalars['String']['output'];
};

/** Autogenerated input type of GeneratePresignedUploadUrlMutation */
export type GeneratePresignedUploadUrlMutationInput = {
  assetType: Asset;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  filename: Scalars['String']['input'];
  resourceClass: ResourceClass;
};

/** Autogenerated return type of GeneratePresignedUploadUrlMutation. */
export type GeneratePresignedUploadUrlMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  url: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type GoalPerformanceData = {
  averageScore: Scalars['Float']['output'];
  results: Array<Result>;
  tag: Tag;
};

export type HighlightedProjectAttributes = {
  projectId: Scalars['ID']['input'];
  projectType: PortfolioResourceClass;
};

/** Institution */
export type Institution = {
  actMax: Maybe<Scalars['Int']['output']>;
  actMin: Maybe<Scalars['Int']['output']>;
  address: InstitutionAddress;
  admissionRate: Maybe<Scalars['Float']['output']>;
  applicationId: Maybe<Scalars['ID']['output']>;
  applicationType: Maybe<InstitutionApplicationProvider>;
  commonAppApplicationUrl: Maybe<Scalars['String']['output']>;
  commonAppEnabled: Scalars['Boolean']['output'];
  contact: InstitutionContact;
  cost: Maybe<Scalars['Int']['output']>;
  dates: Array<InstitutionDate>;
  degrees: Array<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  hasApplied: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  isFavorite: Scalars['Boolean']['output'];
  isIpeds: Scalars['Boolean']['output'];
  maxTeacherEval: Maybe<Scalars['Int']['output']>;
  minTeacherEval: Maybe<Scalars['Int']['output']>;
  name: Scalars['String']['output'];
  programs: ProgramPage;
  satMathMax: Maybe<Scalars['Int']['output']>;
  satMathMin: Maybe<Scalars['Int']['output']>;
  satReadingMax: Maybe<Scalars['Int']['output']>;
  satReadingMin: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use size_type instead */
  size: Maybe<Scalars['String']['output']>;
  sizeDescription: Maybe<InstitutionSizeDescriptions>;
  sizeType: Maybe<InstitutionSizeTypes>;
  studentFacultyRatio: Maybe<Scalars['Int']['output']>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  type: Maybe<Scalars['String']['output']>;
};


/** Institution */
export type InstitutionProgramsArgs = {
  filter: InputMaybe<ProgramFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Institution address */
export type InstitutionAddress = {
  area: InstitutionArea;
  city: Maybe<Scalars['String']['output']>;
  state: Maybe<Scalars['String']['output']>;
  stateCode: Maybe<Scalars['String']['output']>;
  street: Maybe<Scalars['String']['output']>;
  zip: Maybe<Scalars['String']['output']>;
};

export type InstitutionApplication = {
  acceptsTeacherRecommendation: Scalars['Boolean']['output'];
  appliedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  deadline: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  institution: Institution;
  name: Scalars['String']['output'];
  recommenders: Maybe<Array<Recommender>>;
  status: InstitutionApplicationStatuses;
  type: InstitutionApplicationProvider;
};

export enum InstitutionApplicationDirectStatuses {
  /**
   * Application to institution completed
   * @deprecated Use SUBMITTED instead
   */
  COMPLETED = 'COMPLETED',
  /** Application to institution in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Application to institution not started yet */
  NOT_STARTED = 'NOT_STARTED',
  /** Application to institution submitted */
  SUBMITTED = 'SUBMITTED'
}

export type InstitutionApplicationPage = {
  nodes: Array<InstitutionApplication>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum InstitutionApplicationProvider {
  /** Application to institution via CommonApp */
  COMMON_APP = 'COMMON_APP',
  /** Direct application to institution */
  DIRECT = 'DIRECT'
}

export enum InstitutionApplicationStatuses {
  /** Application to institution completed */
  COMPLETED = 'COMPLETED',
  /** Application to institution downloaded */
  DOWNLOADED = 'DOWNLOADED',
  /** Application to institution in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Application to institution not started yet */
  NOT_STARTED = 'NOT_STARTED',
  /** Application to institution submitted */
  SUBMITTED = 'SUBMITTED'
}

export type InstitutionArea = {
  kind: Maybe<Scalars['String']['output']>;
  type: Maybe<Scalars['String']['output']>;
};

/** Institution contact */
export type InstitutionContact = {
  phone: Maybe<Scalars['String']['output']>;
  urlAdmissions: Maybe<Scalars['String']['output']>;
  urlApplications: Maybe<Scalars['String']['output']>;
  urlFinancialAid: Maybe<Scalars['String']['output']>;
  urlGeneral: Maybe<Scalars['String']['output']>;
  urlNetPriceCalculator: Maybe<Scalars['String']['output']>;
};

export type InstitutionDate = {
  deadlineDate: Scalars['ISO8601Date']['output'];
  decisionType: Scalars['String']['output'];
  term: Maybe<Scalars['String']['output']>;
};

export type InstitutionPage = {
  nodes: Array<Institution>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum InstitutionSizeDescriptions {
  /** Institutions of 500-1999 undergraduates */
  FROM_500_TO_1999 = 'FROM_500_TO_1999',
  /** Institutions of 1000-2999 undergraduates */
  FROM_1000_TO_2999 = 'FROM_1000_TO_2999',
  /** Institutions of 2000-4999 undergraduates */
  FROM_2000_TO_4999 = 'FROM_2000_TO_4999',
  /** Institutions of 3000-9999 undergraduates */
  FROM_3000_TO_9999 = 'FROM_3000_TO_9999',
  /** Institutions of 5000-9999 undergraduates */
  FROM_5000_TO_9999 = 'FROM_5000_TO_9999',
  /** Institutions of less than 500 undergraduates */
  LESS_THAN_500 = 'LESS_THAN_500',
  /** Institutions of less than 1000 undergraduates */
  LESS_THAN_1000 = 'LESS_THAN_1000',
  /** Institutions of more than 10000 undergraduates */
  MORE_THAN_10000 = 'MORE_THAN_10000'
}

export enum InstitutionSizeTypes {
  /** Institutions of large size */
  LARGE = 'LARGE',
  /** Institutions of medium size */
  MEDIUM = 'MEDIUM',
  /** Institutions of small size */
  SMALL = 'SMALL',
  /** Institutions of very large size */
  VERY_LARGE = 'VERY_LARGE',
  /** Institutions of very small size */
  VERY_SMALL = 'VERY_SMALL'
}

export enum InstitutionTypes {
  /** Private for-profit, 2-year */
  PRV_FP_2 = 'PRV_FP_2',
  /** Private for-profit, 4-year or above */
  PRV_FP_4 = 'PRV_FP_4',
  /** Private for-profit, less-than 2-year */
  PRV_FP_LT2 = 'PRV_FP_LT2',
  /** Private not-for-profit, 2-year */
  PRV_NFP_2 = 'PRV_NFP_2',
  /** Private not-for-profit, 4-year or above */
  PRV_NFP_4 = 'PRV_NFP_4',
  /** Private not-for-profit, less-than 2-year */
  PRV_NFP_LT2 = 'PRV_NFP_LT2',
  /** Public, 2-year */
  PUB_2 = 'PUB_2',
  /** Public, 4-year or above */
  PUB_4 = 'PUB_4',
  /** Public, less-than 2-year */
  PUB_LT2 = 'PUB_LT2'
}

export type InterestsAnswer = {
  checked: Scalars['Boolean']['output'];
  option: InterestsOption;
};

/** Attributes for creating Assessment answer for question of Interest type */
export type InterestsAnswerAttributes = {
  checked: Scalars['Boolean']['input'];
  optionId: Scalars['ID']['input'];
};

export type InterestsGroup = {
  category: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  options: Array<InterestsOption>;
};

export type InterestsOption = {
  activity: Scalars['String']['output'];
  group: InterestsGroup;
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
};

export type InterestsResult = {
  interest: Scalars['String']['output'];
  score: Scalars['Int']['output'];
};

export type Lesson = ConversationContext & StudentBadgeResource & {
  assignments: Array<Assignment>;
  attachments: Array<Attachment>;
  careerReviewSurvey: Maybe<CareerReviewSurvey>;
  checkInGroups: Array<CheckInGroup>;
  checkInQuestions: Array<CheckInQuestion>;
  description: Maybe<LessonDescription>;
  extensionFields: Array<ExtensionField>;
  externalPresentations: Array<ExternalPresentation>;
  hasPresentation: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  progress: LessonProgress;
  researchLinks: Array<ResearchLink>;
  step: Maybe<Scalars['Int']['output']>;
  texts: Array<Text>;
  thumbnailUrl: Scalars['String']['output'];
  type: Scalars['String']['output'];
  videos: Array<Video>;
  vocabularies: Array<Vocabulary>;
};


export type LessonCheckInQuestionsArgs = {
  answeredOnly: InputMaybe<Scalars['Boolean']['input']>;
};

export type LessonDescription = {
  audience: Maybe<Scalars['String']['output']>;
  goal: Maybe<Scalars['String']['output']>;
  introduction: Maybe<Scalars['String']['output']>;
  role: Maybe<Scalars['String']['output']>;
  situation: Maybe<Scalars['String']['output']>;
};

export type LessonItem = {
  completed: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  step: Scalars['Int']['output'];
  type: Scalars['String']['output'];
};

export enum LessonItemTypes {
  /** Assignment lesson item type */
  ASSIGNMENT = 'ASSIGNMENT',
  /** Attachment lesson item type */
  ATTACHMENT = 'ATTACHMENT',
  /** ExternalPresentation lesson item type */
  PRESENTATION = 'PRESENTATION',
  /** Research link lesson item type */
  RESEARCH_LINK = 'RESEARCH_LINK',
  /** Text lesson item type */
  TEXT = 'TEXT',
  /** Video lesson item type */
  VIDEO = 'VIDEO',
  /** Vocabulary lesson item type */
  VOCABULARY = 'VOCABULARY'
}

export type LessonProgress = {
  accepted: Scalars['Int']['output'];
  submitted: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export enum LessonTypes {
  /** Career cluster lesson type */
  CAREER_CLUSTER = 'CAREER_CLUSTER',
  /** Career readiness lesson type */
  CAREER_READINESS = 'CAREER_READINESS',
  /** Career review survey lesson type */
  CAREER_REVIEW_SURVEY = 'CAREER_REVIEW_SURVEY',
  /** Dig deeper into career lesson type */
  DIG_DEEPER_INTO_CAREER = 'DIG_DEEPER_INTO_CAREER',
  /** Experience opportunity lesson type */
  EXPERIENCE_OPPORTUNITY = 'EXPERIENCE_OPPORTUNITY',
  /** Generic lesson type */
  GENERIC = 'GENERIC',
  /** Pathway lesson type */
  PATHWAY = 'PATHWAY',
  /** Project lesson type */
  PROJECT = 'PROJECT',
  /** Virtual internship lesson type */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export type LtiDetails = {
  isLti: Scalars['Boolean']['output'];
  ltiConsumerKey: Maybe<Scalars['String']['output']>;
  ltiContextId: Maybe<Scalars['String']['output']>;
  ltiResourceLinkId: Maybe<Scalars['String']['output']>;
};

export type LtiResource = {
  consumerKey: Maybe<Scalars['String']['output']>;
  contextId: Maybe<Scalars['String']['output']>;
  ltiResourceLinkId: Maybe<Scalars['String']['output']>;
  originatorId: Maybe<Scalars['ID']['output']>;
  productId: Maybe<Scalars['ID']['output']>;
  studentId: Maybe<Scalars['ID']['output']>;
  taskId: Maybe<Scalars['ID']['output']>;
  userId: Maybe<Scalars['ID']['output']>;
};

/** Autogenerated input type of ManageOpportunityExperienceLessonsMutation */
export type ManageOpportunityExperienceLessonsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  lessonIds: Array<Scalars['ID']['input']>;
  virtualInternshipId: Scalars['ID']['input'];
};

/** Autogenerated return type of ManageOpportunityExperienceLessonsMutation. */
export type ManageOpportunityExperienceLessonsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  virtualInternship: Maybe<VirtualInternship>;
};

/** Autogenerated input type of MarkAllNotificationsAsReadMutation */
export type MarkAllNotificationsAsReadMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  type: NotificationTypes;
};

/** Autogenerated return type of MarkAllNotificationsAsReadMutation. */
export type MarkAllNotificationsAsReadMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of MarkFinalReportAsSeenMutation */
export type MarkFinalReportAsSeenMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of MarkFinalReportAsSeenMutation. */
export type MarkFinalReportAsSeenMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of MarkOnboardingAsCompletedMutation */
export type MarkOnboardingAsCompletedMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of MarkOnboardingAsCompletedMutation. */
export type MarkOnboardingAsCompletedMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

export type Message = {
  author: ConversationParticipant;
  body: Scalars['String']['output'];
  conversation: Conversation;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
};

/** The connection type for Message. */
export type MessageConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<MessageEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Message>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type MessageEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Message>;
};

/** All mutations for student */
export type MutationStudent = {
  /** Mutation for adding opportunity to favorites */
  addOpportunityToFavorites: Maybe<AddOpportunityToFavoritesMutationPayload>;
  /** Mutation for answering a question in a statement of a plan group */
  answerPlanGroupStatementQuestion: Maybe<AnswerPlanGroupStatementQuestionMutationPayload>;
  /** Mutation for creating Assessment attempt */
  createAssessmentAttempt: Maybe<CreateAssessmentAttemptMutationPayload>;
  /** Mutation for creating Assessment Result */
  createAssessmentResult: Maybe<CreateAssessmentResultMutationPayload>;
  /** Mutation for creating an Assignment Submission */
  createAssignmentSubmission: Maybe<CreateAssignmentSubmissionMutationPayload>;
  /** Mutation for creating an Assignment Submission File */
  createAssignmentSubmissionFile: Maybe<CreateAssignmentSubmissionFileMutationPayload>;
  /** Mutation for creating an Assignment Submission File from Google Drive */
  createAssignmentSubmissionFileFromGoogleDrive: Maybe<CreateAssignmentSubmissionFileFromGoogleDriveMutationPayload>;
  /** Mutation for creating Career Review Survey Answers */
  createCareerReviewSurveyAnswers: Maybe<CreateCareerReviewSurveyAnswersMutationPayload>;
  /** Mutation for creating Career Review Survey Attempt */
  createCareerReviewSurveyAttempt: Maybe<CreateCareerReviewSurveyAttemptMutationPayload>;
  /** Mutation for creating Check In Question Answer */
  createCheckInQuestionAnswer: Maybe<CreateCheckInQuestionAnswerMutationPayload>;
  /** Mutation for creating Contact Link */
  createContactLink: Maybe<CreateContactLinkMutationPayload>;
  /** Mutation for creating a evaluation */
  createEvaluation: Maybe<CreateEvaluationMutationPayload>;
  /** Mutation for creating a EvaluationComment */
  createEvaluationComment: Maybe<CreateEvaluationCommentMutationPayload>;
  /** Mutation for creating an application to an institution */
  createInstitutionApplication: Maybe<CreateInstitutionApplicationMutationPayload>;
  /** Mutation for creating Assessment answers for questions of Interest type */
  createInterestsAnswers: Maybe<CreateInterestsAnswersMutationPayload>;
  /** Mutation for creating an application to an opportunity */
  createOpportunityApplication: Maybe<CreateOpportunityApplicationMutationPayload>;
  /** Mutation for creating a plan group statement evidence */
  createPlanGroupStatementEvidence: Maybe<CreatePlanGroupStatementEvidenceMutationPayload>;
  /** Mutation for creating a Portfolio Project */
  createPortfolioProject: Maybe<CreatePortfolioProjectMutationPayload>;
  /** Mutation for creating a Portfolio Project File */
  createPortfolioProjectFile: Maybe<CreatePortfolioProjectFileMutationPayload>;
  /** Mutation for creating a Resume */
  createResume: Maybe<CreateResumeMutationPayload>;
  /** Mutation for creating a shared session token */
  createSharedSessionToken: Maybe<CreateSharedSessionTokenMutationPayload>;
  /** Mutation for creating Student Item */
  createStudentItem: Maybe<CreateStudentItemMutationPayload>;
  /** Mutation for creating Assessment answers for questions of StudyPreferences type */
  createStudyPreferencesAnswers: Maybe<CreateStudyPreferencesAnswersMutationPayload>;
  /** Mutation for creating Assessment answers for questions of WorkValues type */
  createWorkValuesAnswers: Maybe<CreateWorkValuesAnswersMutationPayload>;
  /** Mutation for deleting an Assignment Submission File */
  deleteAssignmentSubmissionFile: Maybe<DeleteAssignmentSubmissionFileMutationPayload>;
  /** Mutation for deleting a Contact Link */
  deleteContactLink: Maybe<DeleteContactLinkMutationPayload>;
  /** Mutation for deleting an institution application */
  deleteInstitutionApplication: Maybe<DeleteInstitutionApplicationMutationPayload>;
  /** Mutation for deleting an opportunity application */
  deleteOpportunityApplication: Maybe<DeleteOpportunityApplicationMutationPayload>;
  /** Mutation for deleting a plan group statement evidence */
  deletePlanGroupStatementEvidence: Maybe<DeletePlanGroupStatementEvidenceMutationPayload>;
  /** Mutation for deleting a Portfolio Project */
  deletePortfolioProject: Maybe<DeletePortfolioProjectMutationPayload>;
  /** Mutation for deleting a Portfolio Project File */
  deletePortfolioProjectFile: Maybe<DeletePortfolioProjectFileMutationPayload>;
  /** Mutation for deleting a Resume */
  deleteResume: Maybe<DeleteResumeMutationPayload>;
  /** Mutation for disenrolling student from a Course */
  disenrollFromCourse: Maybe<DisenrollFromCourseMutationPayload>;
  /** Mutation for enrolling in a Course */
  enrollInCourse: Maybe<EnrollInCourseMutationPayload>;
  /** Mutation for evaluating a student */
  evaluateStudent: Maybe<EvaluateStudentMutationPayload>;
  /** Mutation for finding or creating Conversation */
  findOrCreateConversation: Maybe<FindOrCreateConversationMutationPayload>;
  /** Mutation for creating a FERPA url */
  generateFerpaUrl: Maybe<GenerateFerpaUrlMutationPayload>;
  /** Mutation for creating a presigned upload URL */
  generatePresignedUploadUrl: Maybe<GeneratePresignedUploadUrlMutationPayload>;
  /** Mutation to manage Experience Opportunity Lessons in Virtual Internship for Student */
  manageOpportunityExperienceLessons: Maybe<ManageOpportunityExperienceLessonsMutationPayload>;
  /** Mutation for updating all student's notifications as read */
  markAllNotificationsAsRead: Maybe<MarkAllNotificationsAsReadMutationPayload>;
  /** Mutation for marking Final Report as seen */
  markFinalReportAsSeen: Maybe<MarkFinalReportAsSeenMutationPayload>;
  /** Mutation for marking Onboarding as completed */
  markOnboardingAsCompleted: Maybe<MarkOnboardingAsCompletedMutationPayload>;
  /** Mutation for removing opportunity from favorites */
  removeOpportunityFromFavorites: Maybe<RemoveOpportunityFromFavoritesMutationPayload>;
  /** Mutation for selecting a counselor */
  selectCounselor: Maybe<SelectCounselorMutationPayload>;
  selectTeachers: Maybe<SelectTeachersMutationPayload>;
  /** Mutation for sending Message */
  sendMessage: Maybe<SendMessageMutationPayload>;
  syncCommonAppData: Maybe<SyncCommonAppDataMutationPayload>;
  /** Mutation for toggling favorite status of Institution */
  toggleInstitutionFavorite: Maybe<ToggleInstitutionFavoriteMutationPayload>;
  /** Mutation for toggling OpportunityApplication finished */
  toggleOpportunityApplicationFinished: Maybe<ToggleOpportunityApplicationFinishedMutationPayload>;
  /** Mutation for updating Assessment attempt */
  updateAssessmentAttempt: Maybe<UpdateAssessmentAttemptMutationPayload>;
  /** Mutation for updating an Assignment Submission */
  updateAssignmentSubmission: Maybe<UpdateAssignmentSubmissionMutationPayload>;
  /** Mutation for updating Check In Question Answer */
  updateCheckInQuestionAnswer: Maybe<UpdateCheckInQuestionAnswerMutationPayload>;
  updateCommonAppMetadata: Maybe<UpdateCommonAppMetadataMutationPayload>;
  /** Mutation for updating Contact Link */
  updateContactLink: Maybe<UpdateContactLinkMutationPayload>;
  /** Mutation for updating an Institution Application */
  updateInstitutionApplication: Maybe<UpdateInstitutionApplicationMutationPayload>;
  /** Mutation for updating a notification */
  updateNotification: Maybe<UpdateNotificationMutationPayload>;
  /** Mutation for updating Portfolio Project */
  updatePortfolioProject: Maybe<UpdatePortfolioProjectMutationPayload>;
  /** Mutation for updating Resume */
  updateResume: Maybe<UpdateResumeMutationPayload>;
};


/** All mutations for student */
export type MutationStudentAddOpportunityToFavoritesArgs = {
  input: AddOpportunityToFavoritesMutationInput;
};


/** All mutations for student */
export type MutationStudentAnswerPlanGroupStatementQuestionArgs = {
  input: AnswerPlanGroupStatementQuestionMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateAssessmentAttemptArgs = {
  input: CreateAssessmentAttemptMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateAssessmentResultArgs = {
  input: CreateAssessmentResultMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateAssignmentSubmissionArgs = {
  input: CreateAssignmentSubmissionMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateAssignmentSubmissionFileArgs = {
  input: CreateAssignmentSubmissionFileMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateAssignmentSubmissionFileFromGoogleDriveArgs = {
  input: CreateAssignmentSubmissionFileFromGoogleDriveMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateCareerReviewSurveyAnswersArgs = {
  input: CreateCareerReviewSurveyAnswersMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateCareerReviewSurveyAttemptArgs = {
  input: CreateCareerReviewSurveyAttemptMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateCheckInQuestionAnswerArgs = {
  input: CreateCheckInQuestionAnswerMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateContactLinkArgs = {
  input: CreateContactLinkMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateEvaluationArgs = {
  input: CreateEvaluationMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateEvaluationCommentArgs = {
  input: CreateEvaluationCommentMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateInstitutionApplicationArgs = {
  input: CreateInstitutionApplicationMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateInterestsAnswersArgs = {
  input: CreateInterestsAnswersMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateOpportunityApplicationArgs = {
  input: CreateOpportunityApplicationMutationInput;
};


/** All mutations for student */
export type MutationStudentCreatePlanGroupStatementEvidenceArgs = {
  input: CreatePlanGroupStatementEvidenceMutationInput;
};


/** All mutations for student */
export type MutationStudentCreatePortfolioProjectArgs = {
  input: CreatePortfolioProjectMutationInput;
};


/** All mutations for student */
export type MutationStudentCreatePortfolioProjectFileArgs = {
  input: CreatePortfolioProjectFileMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateResumeArgs = {
  input: CreateResumeMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateSharedSessionTokenArgs = {
  input: CreateSharedSessionTokenMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateStudentItemArgs = {
  input: CreateStudentItemMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateStudyPreferencesAnswersArgs = {
  input: CreateStudyPreferencesAnswersMutationInput;
};


/** All mutations for student */
export type MutationStudentCreateWorkValuesAnswersArgs = {
  input: CreateWorkValuesAnswersMutationInput;
};


/** All mutations for student */
export type MutationStudentDeleteAssignmentSubmissionFileArgs = {
  input: DeleteAssignmentSubmissionFileMutationInput;
};


/** All mutations for student */
export type MutationStudentDeleteContactLinkArgs = {
  input: DeleteContactLinkMutationInput;
};


/** All mutations for student */
export type MutationStudentDeleteInstitutionApplicationArgs = {
  input: DeleteInstitutionApplicationMutationInput;
};


/** All mutations for student */
export type MutationStudentDeleteOpportunityApplicationArgs = {
  input: DeleteOpportunityApplicationMutationInput;
};


/** All mutations for student */
export type MutationStudentDeletePlanGroupStatementEvidenceArgs = {
  input: DeletePlanGroupStatementEvidenceMutationInput;
};


/** All mutations for student */
export type MutationStudentDeletePortfolioProjectArgs = {
  input: DeletePortfolioProjectMutationInput;
};


/** All mutations for student */
export type MutationStudentDeletePortfolioProjectFileArgs = {
  input: DeletePortfolioProjectFileMutationInput;
};


/** All mutations for student */
export type MutationStudentDeleteResumeArgs = {
  input: DeleteResumeMutationInput;
};


/** All mutations for student */
export type MutationStudentDisenrollFromCourseArgs = {
  input: DisenrollFromCourseMutationInput;
};


/** All mutations for student */
export type MutationStudentEnrollInCourseArgs = {
  input: EnrollInCourseMutationInput;
};


/** All mutations for student */
export type MutationStudentEvaluateStudentArgs = {
  input: EvaluateStudentMutationInput;
};


/** All mutations for student */
export type MutationStudentFindOrCreateConversationArgs = {
  input: FindOrCreateConversationMutationInput;
};


/** All mutations for student */
export type MutationStudentGenerateFerpaUrlArgs = {
  input: GenerateFerpaUrlMutationInput;
};


/** All mutations for student */
export type MutationStudentGeneratePresignedUploadUrlArgs = {
  input: GeneratePresignedUploadUrlMutationInput;
};


/** All mutations for student */
export type MutationStudentManageOpportunityExperienceLessonsArgs = {
  input: ManageOpportunityExperienceLessonsMutationInput;
};


/** All mutations for student */
export type MutationStudentMarkAllNotificationsAsReadArgs = {
  input: MarkAllNotificationsAsReadMutationInput;
};


/** All mutations for student */
export type MutationStudentMarkFinalReportAsSeenArgs = {
  input: MarkFinalReportAsSeenMutationInput;
};


/** All mutations for student */
export type MutationStudentMarkOnboardingAsCompletedArgs = {
  input: MarkOnboardingAsCompletedMutationInput;
};


/** All mutations for student */
export type MutationStudentRemoveOpportunityFromFavoritesArgs = {
  input: RemoveOpportunityFromFavoritesMutationInput;
};


/** All mutations for student */
export type MutationStudentSelectCounselorArgs = {
  input: SelectCounselorMutationInput;
};


/** All mutations for student */
export type MutationStudentSelectTeachersArgs = {
  input: SelectTeachersMutationInput;
};


/** All mutations for student */
export type MutationStudentSendMessageArgs = {
  input: SendMessageMutationInput;
};


/** All mutations for student */
export type MutationStudentSyncCommonAppDataArgs = {
  input: SyncCommonAppDataMutationInput;
};


/** All mutations for student */
export type MutationStudentToggleInstitutionFavoriteArgs = {
  input: ToggleInstitutionFavoriteMutationInput;
};


/** All mutations for student */
export type MutationStudentToggleOpportunityApplicationFinishedArgs = {
  input: ToggleOpportunityApplicationFinishedMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdateAssessmentAttemptArgs = {
  input: UpdateAssessmentAttemptMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdateAssignmentSubmissionArgs = {
  input: UpdateAssignmentSubmissionMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdateCheckInQuestionAnswerArgs = {
  input: UpdateCheckInQuestionAnswerMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdateCommonAppMetadataArgs = {
  input: UpdateCommonAppMetadataMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdateContactLinkArgs = {
  input: UpdateContactLinkMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdateInstitutionApplicationArgs = {
  input: UpdateInstitutionApplicationMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdateNotificationArgs = {
  input: UpdateNotificationMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdatePortfolioProjectArgs = {
  input: UpdatePortfolioProjectMutationInput;
};


/** All mutations for student */
export type MutationStudentUpdateResumeArgs = {
  input: UpdateResumeMutationInput;
};

export type Notification = {
  actor: NotificationActor;
  body: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  read: Scalars['Boolean']['output'];
  target: NotificationTarget;
  type: NotificationTypes;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Notification Actor */
export type NotificationActor = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type NotificationPage = {
  nodes: Array<Notification>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum NotificationStatus {
  /** All notifications */
  ALL = 'ALL',
  /** Read notifications only */
  READ = 'READ',
  /** Unread notifications only */
  UNREAD = 'UNREAD'
}

/** Notification Target */
export type NotificationTarget = {
  id: Scalars['ID']['output'];
};

export enum NotificationTypes {
  /** Contextual notification type */
  ANNOUNCEMENT = 'ANNOUNCEMENT',
  /** General notification type */
  GENERAL = 'GENERAL'
}

/** Opportunity */
export type Opportunity = ConversationContext & NotificationTarget & {
  applicationStatus: Maybe<ApplicationStatus>;
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  automaticAcceptance: Maybe<Scalars['Boolean']['output']>;
  availableSpots: Maybe<Scalars['Int']['output']>;
  creditsOutcomes: Maybe<Scalars['String']['output']>;
  deadline: Maybe<Scalars['ISO8601Date']['output']>;
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageFitToContainer: Scalars['Boolean']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  isFavorite: Scalars['Boolean']['output'];
  isRecommended: Scalars['Boolean']['output'];
  location: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  opportunityApplication: Maybe<OpportunityApplication>;
  opportunityType: OpportunityTypes;
  partner: Maybe<Partner>;
  pathways: Array<Pathway>;
  periodEnd: Maybe<Scalars['ISO8601Date']['output']>;
  periodStart: Maybe<Scalars['ISO8601Date']['output']>;
  questions: Array<OpportunityQuestion>;
  salaryInformation: Maybe<Scalars['String']['output']>;
  tags: Array<Scalars['String']['output']>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  virtualInternship: Maybe<VirtualInternship>;
  visibilityScope: VisibilityScope;
};


/** Opportunity */
export type OpportunityVirtualInternshipArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};

/** OpportunityApplication */
export type OpportunityApplication = NotificationTarget & {
  answers: Array<OpportunityApplicationAnswer>;
  appliedAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  isFinished: Scalars['Boolean']['output'];
  lastChangedBy: Maybe<User>;
  opportunity: Opportunity;
  status: ApplicationStatus;
};

/** OpportunityApplicationAnswer */
export type OpportunityApplicationAnswer = {
  answer: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  question: OpportunityQuestion;
};

/** Attributes for creating Opportunity Application Answer */
export type OpportunityApplicationAnswerAttributes = {
  answer: Scalars['String']['input'];
  questionId: Scalars['ID']['input'];
};

export type OpportunityPage = {
  nodes: Array<Opportunity>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Opportunity Question */
export type OpportunityQuestion = {
  id: Scalars['ID']['output'];
  question: Scalars['String']['output'];
  step: Scalars['Int']['output'];
};

export enum OpportunityTypes {
  /** Apprenticeship opportunity type */
  APPRENTICESHIP = 'APPRENTICESHIP',
  /** Clinical experience opportunity type */
  CLINICAL_EXPERIENCE = 'CLINICAL_EXPERIENCE',
  /** College visit opportunity type */
  COLLEGE_VISIT = 'COLLEGE_VISIT',
  /** Internship opportunity type */
  INTERNSHIP = 'INTERNSHIP',
  /** Job opportunity type */
  JOB = 'JOB',
  /** Job shadow opportunity type */
  JOB_SHADOW = 'JOB_SHADOW',
  /** Other opportunity type */
  OTHER = 'OTHER',
  /** Practicum opportunity type */
  PRACTICUM = 'PRACTICUM',
  /** Pre apprenticeship opportunity type */
  PRE_APPRENTICESHIP = 'PRE_APPRENTICESHIP',
  /** Speaker opportunity type */
  SPEAKER = 'SPEAKER',
  /** Virtual internship opportunity type */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP',
  /** Workplace tour opportunity type */
  WORKPLACE_TOUR = 'WORKPLACE_TOUR'
}

export type OverallData = {
  completed: Scalars['Int']['output'];
  inProgress: Scalars['Int']['output'];
  notMet: Scalars['Int']['output'];
  notStarted: Scalars['Int']['output'];
  /** @deprecated Use plan { name } instead */
  planName: Scalars['String']['output'];
  /** @deprecated Use student { full_name } instead */
  studentFullName: Scalars['String']['output'];
};

export type OverallProgress = {
  assessmentFinished: Scalars['Boolean']['output'];
  courseCompleted: Scalars['Boolean']['output'];
  enrolledInCourse: Scalars['Boolean']['output'];
  finalReportSeen: Scalars['Boolean']['output'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor: Maybe<Scalars['String']['output']>;
};

export type Partner = {
  about: Scalars['String']['output'];
  additionalUrls: Maybe<Array<Scalars['String']['output']>>;
  address: Maybe<Scalars['String']['output']>;
  courses: Array<Course>;
  details: Maybe<Scalars['String']['output']>;
  email: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageFitToContainer: Scalars['Boolean']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  opportunities: Array<Opportunity>;
  phone: Maybe<Scalars['String']['output']>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  url: Maybe<Scalars['String']['output']>;
};

export type PartnerPage = {
  nodes: Array<Partner>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type Pathway = {
  cluster: Cluster;
  courses: Array<Course>;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
};

export type Plan = {
  description: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `results` and `coments` in `PlanGroupStatment` instead */
  evaluation: Maybe<Evaluation>;
  groups: Array<PlanGroup>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  progress: PlanProgress;
};

export type PlanGroup = NotificationTarget & {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  statements: Array<PlanGroupStatement>;
  step: Maybe<Scalars['Int']['output']>;
};

export type PlanGroupStatement = {
  comments: Array<EvaluationComment>;
  evidences: Array<PlanGroupStatementEvidence>;
  id: Scalars['ID']['output'];
  isLocked: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  question: Maybe<PlanGroupStatementQuestion>;
  results: Array<EvaluationResult>;
  step: Maybe<Scalars['Int']['output']>;
};

export type PlanGroupStatementEvidence = {
  contextType: Maybe<EvidenceContextKind>;
  id: Maybe<Scalars['ID']['output']>;
  isTeamSubmission: Scalars['Boolean']['output'];
  itemId: Maybe<Scalars['ID']['output']>;
  label: Scalars['String']['output'];
  rubricScores: Maybe<Array<RubricScore>>;
  service: ServiceNames;
  type: EvidenceKind;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type PlanGroupStatementEvidenceItemAttributes = {
  itemId: Scalars['ID']['input'];
  itemType: EvidenceKind;
};

export type PlanGroupStatementQuestion = {
  answer: Maybe<PlanGroupStatementQuestionAnswer>;
  id: Scalars['ID']['output'];
  options: Array<PlanGroupStatementQuestionOption>;
  questionType: PlanGroupStatementQuestionTypes;
  text: Scalars['String']['output'];
};

export type PlanGroupStatementQuestionAnswer = {
  answer: Array<Scalars['String']['output']>;
  author: Maybe<Evaluator>;
  id: Scalars['ID']['output'];
};

export type PlanGroupStatementQuestionOption = {
  id: Scalars['ID']['output'];
  option: Scalars['String']['output'];
};

export enum PlanGroupStatementQuestionTypes {
  /** Long text question type */
  LONG_TEXT = 'LONG_TEXT',
  /** Multiple choice question type */
  MULTIPLE_CHOICE = 'MULTIPLE_CHOICE',
  /** Multiple choice dropdown question type */
  MULTIPLE_CHOICE_DROPDOWN = 'MULTIPLE_CHOICE_DROPDOWN',
  /** Short text question type */
  SHORT_TEXT = 'SHORT_TEXT',
  /** Single choice question type */
  SINGLE_CHOICE = 'SINGLE_CHOICE'
}

export type PlanProgress = {
  completed: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export type Portfolio = {
  careerExperience: Maybe<CareerExperienceEntry>;
  careerExperiences: Array<CareerExperienceEntry>;
  currentCourses: Array<Course>;
  plans: Array<Maybe<Plan>>;
  projects: Maybe<PortfolioProjectConnection>;
  resumes: Maybe<Array<ExternalResume>>;
  sharedResume: Maybe<Resume>;
  studentId: Scalars['ID']['output'];
};


export type PortfolioCareerExperienceArgs = {
  id: Scalars['ID']['input'];
};


export type PortfolioProjectsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  type: PortfolioKind;
};

export enum PortfolioKind {
  /** Portfolio projects created in Careers */
  CAREERS = 'CAREERS',
  /** Portfolio projects created in Learning */
  LEARNING = 'LEARNING',
  /**
   * Portfolio projects created in Learning (PBL)
   * @deprecated {:reason=>"Use LEARNING instead"}
   */
  PBL = 'PBL',
  /** Personal portfolio projects */
  PERSONAL = 'PERSONAL'
}

export type PortfolioProject = {
  description: Maybe<Scalars['String']['output']>;
  finishedAt: Scalars['ISO8601Date']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  isHighlighted: Scalars['Boolean']['output'];
  isTeamSubmission: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  parentName: Maybe<Scalars['String']['output']>;
  portfolioKind: PortfolioKind;
  resourceClass: PortfolioResourceClass;
  startedAt: Maybe<Scalars['ISO8601Date']['output']>;
  submission: PortfolioSubmission;
  /** @deprecated Use `finished_at` instead */
  submittedAt: Scalars['ISO8601DateTime']['output'];
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  type: Maybe<PortfolioProjectKind>;
};

/** The connection type for PortfolioProject. */
export type PortfolioProjectConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<PortfolioProjectEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<PortfolioProject>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PortfolioProjectEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<PortfolioProject>;
};

export enum PortfolioProjectKind {
  /** Course */
  COURSE = 'COURSE',
  /**
   * Lesson
   * @deprecated Use `COURSE` instead
   */
  LESSON = 'LESSON',
  /** Opportunity */
  OPPORTUNITY = 'OPPORTUNITY',
  /** Virtual Internship */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum PortfolioResourceClass {
  /** Portfolio projects created in Careers */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** All portfolio projects */
  OPPORTUNITY_APPLICATION = 'OPPORTUNITY_APPLICATION',
  /** Personal portfolio projects */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Portfolio projects created in Learning */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION'
}

export type PortfolioSubmission = {
  files: Array<PortfolioSubmissionFile>;
  status: Maybe<SubmissionStatus>;
};

export type PortfolioSubmissionFile = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  googleWeblink: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isOwner: Scalars['Boolean']['output'];
  source: Maybe<SubmissionFileSource>;
  submitter: Maybe<ProductSubmissionFileSubmitter>;
  url: Scalars['String']['output'];
};

/** Options for AWS Presigned URLs */
export type PresignedUrlOptions = {
  responseContentDisposition?: InputMaybe<Scalars['String']['input']>;
};

export type Product = ConversationContext & StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type ProductSubmission = ConversationContext & {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** Returns who submitted the product submission file */
export type ProductSubmissionFileSubmitter = {
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type Program = {
  definition: Maybe<Scalars['String']['output']>;
  degrees: Array<Scalars['String']['output']>;
  title: Scalars['String']['output'];
};

/** Attributes for filtering Programs */
export type ProgramFilter = {
  degrees?: InputMaybe<Array<Degree>>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ProgramPage = {
  nodes: Array<Program>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type Recommender = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  formStatuses: Maybe<Array<FormStatus>>;
  lastName: Maybe<Scalars['String']['output']>;
  type: Maybe<RecommenderKind>;
  uuid: Scalars['ID']['output'];
};

export enum RecommenderKind {
  /** Counselor */
  COUNSELOR = 'COUNSELOR',
  /** Teacher */
  TEACHER = 'TEACHER'
}

/** Autogenerated input type of RemoveOpportunityFromFavoritesMutation */
export type RemoveOpportunityFromFavoritesMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RemoveOpportunityFromFavoritesMutation. */
export type RemoveOpportunityFromFavoritesMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  opportunity: Opportunity;
};

export type ResearchLink = {
  author: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  resourceLink: Scalars['String']['output'];
  sourceName: Scalars['String']['output'];
  step: Scalars['Int']['output'];
};

export enum ResourceClass {
  /** Assignment submission file resource */
  ASSIGNMENT_SUBMISSION_FILE = 'ASSIGNMENT_SUBMISSION_FILE',
  /** New Resume avatar resource */
  NEW_RESUME = 'NEW_RESUME',
  /** Portfolio Project resource */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Portfolio Project File resource */
  PORTFOLIO_PROJECT_FILE = 'PORTFOLIO_PROJECT_FILE',
  /** Resume resource */
  RESUME = 'RESUME'
}

export type Result = {
  contextName: Scalars['String']['output'];
  gradedAt: Scalars['ISO8601Date']['output'];
  origin: ServiceNames;
  rubricName: Scalars['String']['output'];
  scoreEarned: Scalars['Int']['output'];
  tag: Tag;
};

export type Resume = {
  avatarUrl: Maybe<Scalars['String']['output']>;
  badges: Array<Badge>;
  bio: Maybe<Scalars['String']['output']>;
  contactLinks: Array<ContactLink>;
  educations: Array<ResumeItem>;
  experiences: Array<ResumeItem>;
  externalResumes: Array<ExternalResume>;
  extraCurriculars: Array<ResumeItem>;
  highlightedBadges: Array<Badge>;
  highlightedProjects: Array<PortfolioProject>;
  highlightedProjectsEnabled: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  projects: Maybe<PortfolioProjectConnection>;
  shareCode: Maybe<Scalars['String']['output']>;
  /** @deprecated Use share_code instead */
  sharedUrl: Maybe<Scalars['String']['output']>;
  sharedUrlEnabled: Scalars['Boolean']['output'];
};


export type ResumeProjectsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  type: PortfolioKind;
};

export type ResumeItem = {
  description: Maybe<Scalars['String']['output']>;
  endedAt: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  startedAt: Scalars['ISO8601Date']['output'];
  type: ResumeItemTypes;
  visible: Scalars['Boolean']['output'];
};

export type ResumeItemAttributes = {
  description?: InputMaybe<Scalars['String']['input']>;
  endedAt?: InputMaybe<Scalars['ISO8601Date']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  startedAt: Scalars['ISO8601Date']['input'];
  visible: Scalars['Boolean']['input'];
};

export enum ResumeItemTypes {
  /** Education Resume Item */
  EDUCATION = 'EDUCATION',
  /** Experience Resume Item */
  EXPERIENCE = 'EXPERIENCE',
  /** Extra curricular Resume Item */
  EXTRA_CURRICULAR = 'EXTRA_CURRICULAR'
}

/** All queries for Student */
export type Root = {
  allCourses: CoursePage;
  announcement: Maybe<Announcement>;
  announcements: AnnouncementConnection;
  assessmentProgress: Maybe<AssessmentProgress>;
  availableCounselors: Array<User>;
  availableTeachers: UserPage;
  careersCatalog: Maybe<Catalog>;
  clusters: Array<Cluster>;
  collections: Array<Collection>;
  conversation: Maybe<Conversation>;
  conversationGroup: ConversationGroup;
  conversationGroups: ConversationGroupConnection;
  conversationRecipients: ConversationRecipientConnection;
  conversations: ConversationConnection;
  course: Course;
  currentCourses: Array<Course>;
  dashboardRecentResources: Array<DashboardRecentResource>;
  finalReport: FinalReport;
  institution: Maybe<Institution>;
  institutionApplication: Maybe<InstitutionApplication>;
  institutionApplications: InstitutionApplicationPage;
  institutions: InstitutionPage;
  interestsGroups: Array<InterestsGroup>;
  interestsResult: Array<InterestsResult>;
  lesson: Lesson;
  ltiResource: Maybe<LtiResource>;
  myInstitutions: InstitutionPage;
  myOpportunities: OpportunityPage;
  notifications: NotificationPage;
  opportunities: OpportunityPage;
  opportunity: Maybe<Opportunity>;
  opportunityTags: Array<Scalars['String']['output']>;
  overallProgress: OverallProgress;
  partner: Partner;
  partners: PartnerPage;
  plan: Maybe<Plan>;
  plans: Array<Maybe<Plan>>;
  portfolio: Maybe<Portfolio>;
  recommendedCourses: Array<Course>;
  sharedResume: Resume;
  standardSets: Array<StandardSet>;
  studentReport: StudentReport;
  studyPreferencesOptions: Array<StudyPreferencesOption>;
  studyPreferencesResult: Array<StudyPreferencesResult>;
  surveyQuestions: Array<CareerReviewSurveyQuestion>;
  userInfo: UserInfo;
  users: UserPage;
  workValuesPairs: Array<WorkValuesPair>;
  workValuesResult: Array<WorkValuesResult>;
};


/** All queries for Student */
export type RootAllCoursesArgs = {
  filter: InputMaybe<StudentCourseFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootAnnouncementArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootAnnouncementsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootAssessmentProgressArgs = {
  scope: InputMaybe<AssessmentAttemptStatus>;
};


/** All queries for Student */
export type RootAvailableTeachersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootConversationArgs = {
  id: Scalars['ID']['input'];
  markAsRead: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student */
export type RootConversationGroupArgs = {
  with: InputMaybe<ConversationParticipantFilter>;
};


/** All queries for Student */
export type RootConversationGroupsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootConversationRecipientsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConversationRecipientFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootConversationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  with: InputMaybe<ConversationParticipantFilter>;
};


/** All queries for Student */
export type RootCourseArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student */
export type RootFinalReportArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student */
export type RootInstitutionArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student */
export type RootInstitutionApplicationArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootInstitutionApplicationsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootInstitutionsArgs = {
  filter?: InputMaybe<StudentInstitutionFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student */
export type RootInterestsResultArgs = {
  assessmentAttemptId: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootLessonArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootLtiResourceArgs = {
  ltiResourceLinkId: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootMyInstitutionsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootMyOpportunitiesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootNotificationsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<NotificationStatus>;
  type: NotificationTypes;
};


/** All queries for Student */
export type RootOpportunitiesArgs = {
  filter: InputMaybe<StudentOpportunityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootOpportunityArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student */
export type RootPartnerArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootPartnersArgs = {
  filter?: InputMaybe<StudentPartnerFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootPlanArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootPortfolioArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for Student */
export type RootSharedResumeArgs = {
  shareCode: Scalars['String']['input'];
};


/** All queries for Student */
export type RootStudentReportArgs = {
  planId: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootStudyPreferencesResultArgs = {
  assessmentAttemptId: Scalars['ID']['input'];
};


/** All queries for Student */
export type RootUsersArgs = {
  filter: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for Student */
export type RootWorkValuesResultArgs = {
  assessmentAttemptId: Scalars['ID']['input'];
};

export type Rubric = {
  criteriaLabels: Array<RubricCriteriaLabel>;
  criterias: Array<RubricCriteria>;
  description: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  hasAlignedStatements: Scalars['Boolean']['output'];
  headings: Array<RubricHeading>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricCriteria = {
  id: Scalars['ID']['output'];
  rubricCriteriaLabelId: Scalars['ID']['output'];
  rubricHeadingId: Scalars['ID']['output'];
  text: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricCriteriaLabel = {
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  score: Scalars['Int']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricGradeResult = {
  criteriaId: Scalars['ID']['output'];
  trait: Maybe<Scalars['String']['output']>;
};

export type RubricHeading = {
  id: Scalars['ID']['output'];
  multiplier: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricScore = {
  currentScore: Scalars['Int']['output'];
  label: Scalars['String']['output'];
  maxScore: Scalars['Int']['output'];
};

export type SchoolClass = AnnouncementTarget & {
  name: Maybe<Scalars['String']['output']>;
  parentName: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Autogenerated input type of SelectCounselorMutation */
export type SelectCounselorMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  userUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of SelectCounselorMutation. */
export type SelectCounselorMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  counselor: Maybe<Recommender>;
};

/** Autogenerated input type of SelectTeachersMutation */
export type SelectTeachersMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  institutionId: Scalars['Int']['input'];
  userUuids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of SelectTeachersMutation. */
export type SelectTeachersMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  teachers: Array<User>;
};

/** Autogenerated input type of SendMessageMutation */
export type SendMessageMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  conversationId: Scalars['ID']['input'];
};

/** Autogenerated return type of SendMessageMutation. */
export type SendMessageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  message: Message;
};

export enum ServiceNames {
  /** Careers service */
  CAREERS = 'CAREERS',
  /** Learning service */
  LEARNING = 'LEARNING',
  /**
   * Pbl service
   * @deprecated Use LEARNING instead
   */
  PBL = 'PBL'
}

export type Settings = {
  assessmentEnabled: Scalars['Boolean']['output'];
  assessmentType: AssessmentTypes;
  onboardingEnabled: Scalars['Boolean']['output'];
  selfEvaluationEnabled: Scalars['Boolean']['output'];
};

export enum SizeTypes {
  /** Size for large institutions */
  LARGE = 'LARGE',
  /** Size for medium institutions */
  MEDIUM = 'MEDIUM',
  /** Size for small institutions */
  SMALL = 'SMALL',
  /** Size for very large institutions */
  VERY_LARGE = 'VERY_LARGE',
  /** Size for very small institutions */
  VERY_SMALL = 'VERY_SMALL'
}

export type StandardSet = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  setId: Scalars['ID']['output'];
};

export type Student = ConversationMember & ConversationParticipant & Evaluator & ProductSubmissionFileSubmitter & {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  gradYear: Maybe<Scalars['Int']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  sisId: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Returns for which resource badge was awarded */
export type StudentBadgeResource = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** Attributes for filtering Courses */
export type StudentCourseFilter = {
  collectionIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  pathwayIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  searchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<CourseTypes>;
};

/** Attributes for filtering Institutions */
export type StudentInstitutionFilter = {
  commonAppEnabledEq?: InputMaybe<Scalars['Boolean']['input']>;
  costRange?: InputMaybe<Array<CostRanges>>;
  searchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
  sizeTypeIn?: InputMaybe<Array<SizeTypes>>;
  stateIn?: InputMaybe<Array<UsStates>>;
  typeIn?: InputMaybe<Array<InstitutionTypes>>;
};

/** Attributes for filtering Opportunities */
export type StudentOpportunityFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  partnersIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  pathwaysIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  tagsContain?: InputMaybe<Array<Scalars['String']['input']>>;
  typeIn?: InputMaybe<Array<OpportunityTypes>>;
};

/** Attributes for filtering Partners */
export type StudentPartnerFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type StudentReport = {
  goalPerformanceIndicatorsData: Array<GoalPerformanceData>;
  overallData: OverallData;
  plan: Plan;
  student: Student;
};

export type StudyPreferencesAnswer = {
  option: StudyPreferencesOption;
  position: Scalars['Int']['output'];
};

/** Attributes for creating Assessment answer for question of StudyPreferences type */
export type StudyPreferencesAnswerAttributes = {
  optionId: Scalars['ID']['input'];
  position: Scalars['Int']['input'];
};

export type StudyPreferencesOption = {
  area: Scalars['String']['output'];
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
};

export type StudyPreferencesResult = {
  area: Scalars['String']['output'];
  description: Scalars['String']['output'];
  position: Scalars['Int']['output'];
};

export enum SubmissionFileSource {
  /** Submissions uploaded from Google Drive */
  GOOGLE = 'GOOGLE',
  /** Submissions uploaded from disk */
  LOCAL = 'LOCAL'
}

export type SubmissionGrade = NotificationTarget & {
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  lastGradedBy: Maybe<User>;
  status: SubmissionGradeStatuses;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum SubmissionGradeStatuses {
  /** Status for accepted submission grades */
  ACCEPTED = 'ACCEPTED',
  /** Status for not accepted submission grades */
  NOT_ACCEPTED = 'NOT_ACCEPTED'
}

export enum SubmissionStatus {
  /** Submissions of draft status */
  DRAFT = 'DRAFT',
  /** Submissions of submitted status */
  SUBMITTED = 'SUBMITTED'
}

/** Autogenerated input type of SyncCommonAppDataMutation */
export type SyncCommonAppDataMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of SyncCommonAppDataMutation. */
export type SyncCommonAppDataMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: CommonAppSyncStatus;
};

export type Tag = {
  id: Scalars['ID']['output'];
  isDefault: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  type: TagTypes;
};

export enum TagTypes {
  /** Entity */
  ENTITY = 'ENTITY',
  /** System */
  SYSTEM = 'SYSTEM'
}

export type Task = ConversationContext & StudentBadgeResource & {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type Team = ConversationParticipant & {
  email: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  members: Maybe<Array<ConversationMember>>;
  name: Scalars['String']['output'];
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type Text = {
  content: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  step: Scalars['Int']['output'];
};

/** Autogenerated input type of ToggleInstitutionFavoriteMutation */
export type ToggleInstitutionFavoriteMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  institutionId: Scalars['ID']['input'];
};

/** Autogenerated return type of ToggleInstitutionFavoriteMutation. */
export type ToggleInstitutionFavoriteMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  institution: Maybe<Institution>;
};

/** Autogenerated input type of ToggleOpportunityApplicationFinishedMutation */
export type ToggleOpportunityApplicationFinishedMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  opportunityApplicationId: Scalars['ID']['input'];
};

/** Autogenerated return type of ToggleOpportunityApplicationFinishedMutation. */
export type ToggleOpportunityApplicationFinishedMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  opportunityApplication: Maybe<OpportunityApplication>;
};

export type Track = {
  description: Maybe<Scalars['String']['output']>;
  grades: Array<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  resourcesCount: Scalars['Int']['output'];
  shortDescription: Maybe<Scalars['String']['output']>;
  thumbnailUrl: Scalars['String']['output'];
  units: Array<Unit>;
};

export type Unit = {
  courses: Array<Course>;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  opportunities: Array<Opportunity>;
  resources: Array<UnitResource>;
  thumbnailUrl: Scalars['String']['output'];
};

export type UnitResource = {
  description: Maybe<Scalars['String']['output']>;
  imageUrl: Maybe<Scalars['String']['output']>;
  isVirtualInternship: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  pathways: Array<Pathway>;
  resourceId: Scalars['ID']['output'];
  resourceType: UnitResourceTypes;
  step: Scalars['Int']['output'];
  thumbnailUrl: Maybe<Scalars['String']['output']>;
};

export enum UnitResourceTypes {
  /** Course resource type */
  COURSE = 'COURSE',
  /** Opportunity resource type */
  OPPORTUNITY = 'OPPORTUNITY'
}

/** Autogenerated input type of UpdateAssessmentAttemptMutation */
export type UpdateAssessmentAttemptMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  status: AssessmentAttemptStatus;
};

/** Autogenerated return type of UpdateAssessmentAttemptMutation. */
export type UpdateAssessmentAttemptMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of UpdateAssignmentSubmissionMutation */
export type UpdateAssignmentSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId?: InputMaybe<Scalars['ID']['input']>;
  id: Scalars['ID']['input'];
  status?: InputMaybe<AssignmentSubmissionStatus>;
};

/** Autogenerated return type of UpdateAssignmentSubmissionMutation. */
export type UpdateAssignmentSubmissionMutationPayload = {
  assignmentSubmission: Maybe<AssignmentSubmission>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateCheckInQuestionAnswerMutation */
export type UpdateCheckInQuestionAnswerMutationInput = {
  answer: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId?: InputMaybe<Scalars['ID']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateCheckInQuestionAnswerMutation. */
export type UpdateCheckInQuestionAnswerMutationPayload = {
  checkInQuestionAnswer: Maybe<CheckInQuestionAnswer>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateCommonAppMetadataMutation */
export type UpdateCommonAppMetadataMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  commonAppMetadataAttributes: CommonAppMetadataAttributes;
};

/** Autogenerated return type of UpdateCommonAppMetadataMutation. */
export type UpdateCommonAppMetadataMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  userInfo: UserInfo;
};

/** Autogenerated input type of UpdateContactLinkMutation */
export type UpdateContactLinkMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  type?: InputMaybe<ContactLinkTypes>;
  value?: InputMaybe<Scalars['String']['input']>;
  visible?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UpdateContactLinkMutation. */
export type UpdateContactLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  contactLink: Maybe<ContactLink>;
};

/** Autogenerated input type of UpdateInstitutionApplicationMutation */
export type UpdateInstitutionApplicationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  institutionApplicationId: Scalars['ID']['input'];
  status?: InputMaybe<InstitutionApplicationDirectStatuses>;
};

/** Autogenerated return type of UpdateInstitutionApplicationMutation. */
export type UpdateInstitutionApplicationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  institutionApplication: Maybe<InstitutionApplication>;
};

/** Autogenerated input type of UpdateNotificationMutation */
export type UpdateNotificationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  read: Scalars['Boolean']['input'];
};

/** Autogenerated return type of UpdateNotificationMutation. */
export type UpdateNotificationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  notification: Notification;
};

/** Autogenerated input type of UpdatePortfolioProjectMutation */
export type UpdatePortfolioProjectMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePortfolioProjectMutation. */
export type UpdatePortfolioProjectMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  portfolioProject: PortfolioProject;
};

/** Autogenerated input type of UpdateResumeMutation */
export type UpdateResumeMutationInput = {
  avatarFilename?: InputMaybe<Scalars['String']['input']>;
  avatarUuid?: InputMaybe<Scalars['ID']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contactLinks?: InputMaybe<Array<ContactLinkAttributes>>;
  educations?: InputMaybe<Array<ResumeItemAttributes>>;
  experiences?: InputMaybe<Array<ResumeItemAttributes>>;
  extraCurriculars?: InputMaybe<Array<ResumeItemAttributes>>;
  highlightedBadgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  highlightedProjects?: InputMaybe<Array<HighlightedProjectAttributes>>;
  highlightedProjectsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  sharedUrlEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UpdateResumeMutation. */
export type UpdateResumeMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  resume: Resume;
};

export enum UsStates {
  /** Alabama */
  ALABAMA = 'ALABAMA',
  /** Alaska */
  ALASKA = 'ALASKA',
  /** American Samoa */
  AMERICAN_SAMOA = 'AMERICAN_SAMOA',
  /** Arizona */
  ARIZONA = 'ARIZONA',
  /** Arkansas */
  ARKANSAS = 'ARKANSAS',
  /** California */
  CALIFORNIA = 'CALIFORNIA',
  /** Colorado */
  COLORADO = 'COLORADO',
  /** Connecticut */
  CONNECTICUT = 'CONNECTICUT',
  /** Delaware */
  DELAWARE = 'DELAWARE',
  /** District Of Columbia */
  DISTRICT_OF_COLUMBIA = 'DISTRICT_OF_COLUMBIA',
  /** Florida */
  FLORIDA = 'FLORIDA',
  /** Georgia */
  GEORGIA = 'GEORGIA',
  /** Guam */
  GUAM = 'GUAM',
  /** Hawaii */
  HAWAII = 'HAWAII',
  /** Idaho */
  IDAHO = 'IDAHO',
  /** Illinois */
  ILLINOIS = 'ILLINOIS',
  /** Indiana */
  INDIANA = 'INDIANA',
  /** International */
  INTERNATIONAL = 'INTERNATIONAL',
  /** Iowa */
  IOWA = 'IOWA',
  /** Kansas */
  KANSAS = 'KANSAS',
  /** Kentucky */
  KENTUCKY = 'KENTUCKY',
  /** Louisiana */
  LOUISIANA = 'LOUISIANA',
  /** Maine */
  MAINE = 'MAINE',
  /** Maryland */
  MARYLAND = 'MARYLAND',
  /** Massachusetts */
  MASSACHUSETTS = 'MASSACHUSETTS',
  /** Michigan */
  MICHIGAN = 'MICHIGAN',
  /** Minnesota */
  MINNESOTA = 'MINNESOTA',
  /** Mississippi */
  MISSISSIPPI = 'MISSISSIPPI',
  /** Missouri */
  MISSOURI = 'MISSOURI',
  /** Montana */
  MONTANA = 'MONTANA',
  /** Nebraska */
  NEBRASKA = 'NEBRASKA',
  /** Nevada */
  NEVADA = 'NEVADA',
  /** New Hampshire */
  NEW_HAMPSHIRE = 'NEW_HAMPSHIRE',
  /** New Jersey */
  NEW_JERSEY = 'NEW_JERSEY',
  /** New Mexico */
  NEW_MEXICO = 'NEW_MEXICO',
  /** New York */
  NEW_YORK = 'NEW_YORK',
  /** North Carolina */
  NORTH_CAROLINA = 'NORTH_CAROLINA',
  /** North Dakota */
  NORTH_DAKOTA = 'NORTH_DAKOTA',
  /** Ohio */
  OHIO = 'OHIO',
  /** Oklahoma */
  OKLAHOMA = 'OKLAHOMA',
  /** Oregon */
  OREGON = 'OREGON',
  /** Pennsylvania */
  PENNSYLVANIA = 'PENNSYLVANIA',
  /** Puerto Rico */
  PUERTO_RICO = 'PUERTO_RICO',
  /** Rhode Island */
  RHODE_ISLAND = 'RHODE_ISLAND',
  /** South Carolina */
  SOUTH_CAROLINA = 'SOUTH_CAROLINA',
  /** South Dakota */
  SOUTH_DAKOTA = 'SOUTH_DAKOTA',
  /** Tennessee */
  TENNESSEE = 'TENNESSEE',
  /** Texas */
  TEXAS = 'TEXAS',
  /** Utah */
  UTAH = 'UTAH',
  /** Vermont */
  VERMONT = 'VERMONT',
  /** Virginia */
  VIRGINIA = 'VIRGINIA',
  /** Virgin Islands */
  VIRGIN_ISLANDS = 'VIRGIN_ISLANDS',
  /** Washington */
  WASHINGTON = 'WASHINGTON',
  /** West Virginia */
  WEST_VIRGINIA = 'WEST_VIRGINIA',
  /** Wisconsin */
  WISCONSIN = 'WISCONSIN',
  /** Wyoming */
  WYOMING = 'WYOMING'
}

export type User = AnnouncementAuthor & ConversationMember & ConversationParticipant & Evaluator & ExtensionFieldAuthor & NotificationActor & ProductSubmissionFileSubmitter & {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering Users */
export type UserFilter = {
  fullNameCont?: InputMaybe<Scalars['String']['input']>;
};

export type UserInfo = {
  commonAppData: CommonAppData;
  currentSchoolYear: Scalars['Int']['output'];
  definedLearningUuid: Scalars['ID']['output'];
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  gradYear: Maybe<Scalars['Int']['output']>;
  hasAccessToCareers: Scalars['Boolean']['output'];
  hasAccessToLearning: Scalars['Boolean']['output'];
  /** @deprecated Use hasAccessToLearning instead */
  hasAccessToPbl: Scalars['Boolean']['output'];
  hasCompletedAssessment: Scalars['Boolean']['output'];
  hasCompletedOnboarding: Scalars['Boolean']['output'];
  hasOpportunitiesEnabled: Scalars['Boolean']['output'];
  hasPlans: Scalars['Boolean']['output'];
  hasUnreadConversation: Scalars['Boolean']['output'];
  iconUrl: Maybe<Scalars['String']['output']>;
  isImpersonated: Scalars['Boolean']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  logoUrl: Maybe<Scalars['String']['output']>;
  ltiDetails: Maybe<LtiDetails>;
  /** @deprecated Use hasOpportunitiesEnabled instead */
  opportunitiesEnabled: Scalars['Boolean']['output'];
  postSecondaryApplicationsEnabled: Scalars['Boolean']['output'];
  settings: Settings;
  sisId: Maybe<Scalars['String']['output']>;
  state: Maybe<UsStates>;
  status: Scalars['String']['output'];
  unreadAnnouncementsCount: Scalars['Int']['output'];
  unreadNotificationsCount: Scalars['Int']['output'];
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
  welcomeMessage: Maybe<Scalars['String']['output']>;
};

export type UserPage = {
  nodes: Array<User>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type Video = {
  description: Scalars['String']['output'];
  displayName: Scalars['String']['output'];
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  step: Scalars['Int']['output'];
  url: Scalars['String']['output'];
};

/** Virtual Internship */
export type VirtualInternship = StudentBadgeResource & {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  calendarLessons: Array<Lesson>;
  content: Array<VirtualInternshipContent>;
  experienceOpportunityLessons: Array<Lesson>;
  id: Scalars['ID']['output'];
  lesson: Lesson;
  name: Scalars['String']['output'];
  opportunity: Opportunity;
  postExperienceLessons: Array<Lesson>;
  readinessSkillsLessons: Array<Lesson>;
  requiredExperiences: Scalars['Int']['output'];
  roadmapItemsCount: Scalars['Int']['output'];
  status: VirtualInternshipStatuses;
  studentExperienceOpportunityLessons: Array<Lesson>;
};


/** Virtual Internship */
export type VirtualInternshipLessonArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};

export type VirtualInternshipContent = {
  checkIns: Array<LessonItem>;
  extensionFields: Array<ExtensionField>;
  id: Scalars['ID']['output'];
  items: Array<LessonItem>;
  name: Scalars['String']['output'];
  type: LessonTypes;
};

export enum VirtualInternshipStatuses {
  /** Completed */
  COMPLETED = 'COMPLETED',
  /** In progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Not started */
  NOT_STARTED = 'NOT_STARTED'
}

export enum VisibilityScope {
  /** Resource visible in all Entities */
  ALL = 'ALL',
  /** Resource visible only in provided Entities */
  ENTITY = 'ENTITY'
}

export type Vocabulary = {
  definition: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  step: Scalars['Int']['output'];
  term: Scalars['String']['output'];
};

export type WorkValuesAnswer = {
  option: WorkValuesOption;
  tokens: Scalars['Int']['output'];
};

/** Attributes for creating Assessment answer for question of WorkValues type */
export type WorkValuesAnswerAttributes = {
  optionId: Scalars['ID']['input'];
  tokens: Scalars['Int']['input'];
};

export type WorkValuesOption = {
  category: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  pair: WorkValuesPair;
  value: Scalars['String']['output'];
};

export type WorkValuesPair = {
  id: Scalars['ID']['output'];
  options: Array<WorkValuesOption>;
  step: Maybe<Scalars['Int']['output']>;
};

export type WorkValuesResult = {
  score: Scalars['Int']['output'];
  workValue: Scalars['String']['output'];
};
