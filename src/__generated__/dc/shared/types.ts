export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601Date: { input: string; output: string; }
  ISO8601DateTime: { input: string; output: string; }
};

export type AcademyCourse = {
  category: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  endDate: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
  progress: Maybe<AcademyCourseProgress>;
  startDate: Maybe<Scalars['ISO8601Date']['output']>;
};

export type AcademyCourseProgress = {
  completed: Maybe<Scalars['Int']['output']>;
  total: Maybe<Scalars['Int']['output']>;
};

export type AdminDashboard = {
  entities: EntityDataPage;
  entity: Maybe<EntityData>;
  userId: Scalars['ID']['output'];
  users: UserDataPage;
};


export type AdminDashboardEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


export type AdminDashboardEntityArgs = {
  uuid: Scalars['ID']['input'];
};


export type AdminDashboardUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type AdminDashboardClusterEnrollmentStatsEntry = {
  cluster: Cluster;
  studentsCount: Scalars['Int']['output'];
};

export type AdminDashboardMyReport = {
  assessmentsFinished: Scalars['Int']['output'];
  assignmentsSubmitted: Scalars['Int']['output'];
  coursesEnrolled: Scalars['Int']['output'];
  coursesFinished: Scalars['Int']['output'];
};


export type AdminDashboardMyReportAssessmentsFinishedArgs = {
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type AdminDashboardMyReportAssignmentsSubmittedArgs = {
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type AdminDashboardMyReportCoursesEnrolledArgs = {
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type AdminDashboardMyReportCoursesFinishedArgs = {
  startYear?: InputMaybe<Scalars['Int']['input']>;
};

export type AdminDashboardPathwayEnrollmentStatsEntry = {
  pathway: Pathway;
  studentsCount: Scalars['Int']['output'];
};

export enum AggregationPeriod {
  /** monthly aggregation period */
  MONTH = 'MONTH',
  /** quarterly aggregation period */
  QUARTER = 'QUARTER',
  /** semesterly aggregation period */
  SEMESTER = 'SEMESTER'
}

/** Autogenerated input type of AlignPlanGroupStatementToRubricHeadingMutation */
export type AlignPlanGroupStatementToRubricHeadingMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  planGroupStatementIds: Array<Scalars['ID']['input']>;
  rubricHeadingId: Scalars['ID']['input'];
};

/** Autogenerated return type of AlignPlanGroupStatementToRubricHeadingMutation. */
export type AlignPlanGroupStatementToRubricHeadingMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricHeading: RubricHeading;
};

export type Announcement = ConversationContext & {
  author: AnnouncementAuthor;
  body: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  target: AnnouncementTarget;
};

/** Announcement author */
export type AnnouncementAuthor = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** The connection type for Announcement. */
export type AnnouncementConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<AnnouncementEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Announcement>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type AnnouncementEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Announcement>;
};

/** Announcement Target */
export type AnnouncementTarget = {
  name: Scalars['String']['output'];
  parentName: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export enum AnnouncementTargetTypes {
  /** School Class announcement target type */
  SCHOOL_CLASS = 'SCHOOL_CLASS'
}

export type AnswerCount = {
  answer: Scalars['String']['output'];
  count: Scalars['Int']['output'];
};

/** Autogenerated input type of AnswerPlanGroupStatementQuestionMutation */
export type AnswerPlanGroupStatementQuestionMutationInput = {
  answer: Array<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  questionId: Scalars['ID']['input'];
};

/** Autogenerated return type of AnswerPlanGroupStatementQuestionMutation. */
export type AnswerPlanGroupStatementQuestionMutationPayload = {
  answer: PlanGroupStatementQuestionAnswer;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

export type Applicant = {
  applicantId: Scalars['ID']['output'];
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export enum ApplicationStatus {
  /** Accepted application */
  ACCEPTED = 'ACCEPTED',
  /** Finished application */
  FINISHED = 'FINISHED',
  /** Pending application */
  PENDING = 'PENDING',
  /** Rejected application */
  REJECTED = 'REJECTED',
  /** Started application */
  STARTED = 'STARTED'
}

export enum ArchivableStatus {
  /** Active records only */
  ACTIVE = 'ACTIVE',
  /** All records */
  ALL = 'ALL',
  /** Archived records only */
  ARCHIVED = 'ARCHIVED'
}

/** Autogenerated input type of ArchiveAssignmentMutation */
export type ArchiveAssignmentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveAssignmentMutation. */
export type ArchiveAssignmentMutationPayload = {
  assignment: Assignment;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ArchiveAttachmentFileMutation */
export type ArchiveAttachmentFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveAttachmentFileMutation. */
export type ArchiveAttachmentFileMutationPayload = {
  attachmentFile: AttachmentFile;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ArchiveAttachmentMutation */
export type ArchiveAttachmentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveAttachmentMutation. */
export type ArchiveAttachmentMutationPayload = {
  attachment: Attachment;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ArchiveBadgeMutation */
export type ArchiveBadgeMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveBadgeMutation. */
export type ArchiveBadgeMutationPayload = {
  badge: Maybe<Badge>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ArchiveCatalogMutation */
export type ArchiveCatalogMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveCatalogMutation. */
export type ArchiveCatalogMutationPayload = {
  catalog: Catalog;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ArchiveCheckInGroupMutation */
export type ArchiveCheckInGroupMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveCheckInGroupMutation. */
export type ArchiveCheckInGroupMutationPayload = {
  checkInGroup: CheckInGroup;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ArchiveCheckInQuestionMutation */
export type ArchiveCheckInQuestionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveCheckInQuestionMutation. */
export type ArchiveCheckInQuestionMutationPayload = {
  checkInQuestion: CheckInQuestion;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ArchiveCourseMutation */
export type ArchiveCourseMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveCourseMutation. */
export type ArchiveCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  course: Course;
};

/** Autogenerated input type of ArchiveExtensionFieldFileMutation */
export type ArchiveExtensionFieldFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveExtensionFieldFileMutation. */
export type ArchiveExtensionFieldFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  extensionFieldFile: ExtensionFieldFile;
};

/** Autogenerated input type of ArchiveExtensionFieldMutation */
export type ArchiveExtensionFieldMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveExtensionFieldMutation. */
export type ArchiveExtensionFieldMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  extensionField: ExtensionField;
};

/** Autogenerated input type of ArchiveExternalPresentationMutation */
export type ArchiveExternalPresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveExternalPresentationMutation. */
export type ArchiveExternalPresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  externalPresentation: ExternalPresentation;
};

/** Autogenerated input type of ArchiveLessonMutation */
export type ArchiveLessonMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveLessonMutation. */
export type ArchiveLessonMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  lesson: Lesson;
};

/** Autogenerated input type of ArchiveOpportunityMutation */
export type ArchiveOpportunityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveOpportunityMutation. */
export type ArchiveOpportunityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  opportunity: Maybe<Opportunity>;
};

/** Autogenerated input type of ArchivePartnerMutation */
export type ArchivePartnerMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchivePartnerMutation. */
export type ArchivePartnerMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  partner: Partner;
};

/** Autogenerated input type of ArchivePlanGroupMutation */
export type ArchivePlanGroupMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchivePlanGroupMutation. */
export type ArchivePlanGroupMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroup: PlanGroup;
};

/** Autogenerated input type of ArchivePlanGroupStatementMutation */
export type ArchivePlanGroupStatementMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchivePlanGroupStatementMutation. */
export type ArchivePlanGroupStatementMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: PlanGroupStatement;
};

/** Autogenerated input type of ArchivePlanMutation */
export type ArchivePlanMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchivePlanMutation. */
export type ArchivePlanMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  plan: Plan;
};

/** Autogenerated input type of ArchivePresentationMutation */
export type ArchivePresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchivePresentationMutation. */
export type ArchivePresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  presentation: Presentation;
};

/** Autogenerated input type of ArchiveProductMutation */
export type ArchiveProductMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveProductMutation. */
export type ArchiveProductMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  product: Product;
};

/** Autogenerated input type of ArchiveResearchLinkMutation */
export type ArchiveResearchLinkMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveResearchLinkMutation. */
export type ArchiveResearchLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  researchLink: ResearchLink;
};

/** Autogenerated input type of ArchiveRubricMutation */
export type ArchiveRubricMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveRubricMutation. */
export type ArchiveRubricMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubric: Rubric;
};

/** Autogenerated input type of ArchiveSlideBackgroundImageMutation */
export type ArchiveSlideBackgroundImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveSlideBackgroundImageMutation. */
export type ArchiveSlideBackgroundImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideBackgroundImage: SlideBackgroundImage;
};

/** Autogenerated input type of ArchiveSlideImageMutation */
export type ArchiveSlideImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveSlideImageMutation. */
export type ArchiveSlideImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideImage: SlideImage;
};

/** Autogenerated input type of ArchiveSlideMutation */
export type ArchiveSlideMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveSlideMutation. */
export type ArchiveSlideMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slide: Slide;
};

/** Autogenerated input type of ArchiveSlideVideoMutation */
export type ArchiveSlideVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveSlideVideoMutation. */
export type ArchiveSlideVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideVideo: SlideVideo;
};

/** Autogenerated input type of ArchiveTaskMutation */
export type ArchiveTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveTaskMutation. */
export type ArchiveTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Task;
};

/** Autogenerated input type of ArchiveTextMutation */
export type ArchiveTextMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveTextMutation. */
export type ArchiveTextMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  text: Text;
};

/** Autogenerated input type of ArchiveTrackMutation */
export type ArchiveTrackMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveTrackMutation. */
export type ArchiveTrackMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  track: Track;
};

/** Autogenerated input type of ArchiveUnitMutation */
export type ArchiveUnitMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveUnitMutation. */
export type ArchiveUnitMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  unit: Unit;
};

/** Autogenerated input type of ArchiveVideoMutation */
export type ArchiveVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveVideoMutation. */
export type ArchiveVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  video: Video;
};

/** Autogenerated input type of ArchiveVirtualInternshipMutation */
export type ArchiveVirtualInternshipMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveVirtualInternshipMutation. */
export type ArchiveVirtualInternshipMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  virtualInternship: Maybe<VirtualInternship>;
};

/** Autogenerated input type of ArchiveVocabularyMutation */
export type ArchiveVocabularyMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ArchiveVocabularyMutation. */
export type ArchiveVocabularyMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  vocabulary: Vocabulary;
};

export type AssessmentAttempt = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  status: AssessmentAttemptStatus;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum AssessmentAttemptStatus {
  /** Status for failed assessment attempts */
  FAILED = 'FAILED',
  /** Status for finished assessment attempts */
  FINISHED = 'FINISHED',
  /** Status for assessment attempts in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Status for assessment attempts for which assessment results are being processed */
  PROCESSING_RESULTS = 'PROCESSING_RESULTS',
  /** Status for rejected assessment attempts */
  REJECTED = 'REJECTED'
}

export type AssessmentEnabledSettings = {
  origin: StudentSettingsOrigins;
  value: Scalars['Boolean']['output'];
};

export type AssessmentReport = {
  clusterRecommendationCounts: Array<ClusterRecommendationCount>;
  interestsCategoryAverageCheckedScores: Array<InterestsCategoryAverageCheckedScore>;
  studentsCount: Scalars['Int']['output'];
  studyPreferencesPositionsDistributions: Array<StudyPreferencesPositionsDistribution>;
  summary: Summary;
  workValuesCategoryAverageTokens: Array<WorkValuesCategoryAverageTokens>;
};


export type AssessmentReportInterestsCategoryAverageCheckedScoresArgs = {
  type: AssessmentTypes;
};


export type AssessmentReportStudyPreferencesPositionsDistributionsArgs = {
  type: AssessmentTypes;
};


export type AssessmentReportWorkValuesCategoryAverageTokensArgs = {
  type: AssessmentTypes;
};

export type AssessmentReportFile = {
  id: Scalars['ID']['output'];
  startYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type AssessmentReportFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering assessment reports */
export type AssessmentReportFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type AssessmentReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type AssessmentReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type AssessmentReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type AssessmentReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export enum AssessmentReportLevels {
  /** Entity level */
  ENTITY = 'ENTITY',
  /** School Class level */
  SCHOOL_CLASS = 'SCHOOL_CLASS',
  /** User level */
  USER = 'USER'
}

export type AssessmentResult = {
  additionalPathways: Array<Pathway>;
  id: Scalars['ID']['output'];
  interestsResult: Array<InterestsResult>;
  recommendedPathways: Array<Pathway>;
  studyPreferencesResult: Array<StudyPreferencesResult>;
  workValuesResult: Array<WorkValuesResult>;
};

/** Attributes for assessment type */
export type AssessmentTypeAttributes = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  force?: InputMaybe<Scalars['Boolean']['input']>;
  value: AssessmentTypes;
};

export type AssessmentTypeSettings = {
  origin: StudentSettingsOrigins;
  value: AssessmentTypes;
};

export enum AssessmentTypes {
  /** Courses of high school type */
  HIGH_SCHOOL = 'HIGH_SCHOOL',
  /** Courses of middle school type */
  MIDDLE_SCHOOL = 'MIDDLE_SCHOOL'
}

export enum Asset {
  /** Generic file asset type */
  DC_ICON = 'DC_ICON',
  /** Generic file asset type */
  DC_LOGO = 'DC_LOGO',
  /** Generic file asset type */
  DL_ICON = 'DL_ICON',
  /** Generic file asset type */
  DL_LOGO = 'DL_LOGO',
  /** Generic file asset type */
  FILE = 'FILE',
  /** Image asset type */
  IMAGE = 'IMAGE',
  /** Video asset type */
  VIDEO = 'VIDEO'
}

/** Autogenerated input type of AssignCatalogsToEntityMutation */
export type AssignCatalogsToEntityMutationInput = {
  assignToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  catalogIds: Array<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignCatalogsToEntityMutation. */
export type AssignCatalogsToEntityMutationPayload = {
  catalogs: Maybe<Array<Catalog>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AssignExtensionFieldToEntityMutation */
export type AssignExtensionFieldToEntityMutationInput = {
  assignToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  extensionFieldId: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignExtensionFieldToEntityMutation. */
export type AssignExtensionFieldToEntityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  extensionField: Maybe<ExtensionField>;
};

/** Autogenerated input type of AssignPlanToEntityMutation */
export type AssignPlanToEntityMutationInput = {
  assignToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  planId: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignPlanToEntityMutation. */
export type AssignPlanToEntityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  plan: Maybe<Plan>;
};

/** Autogenerated input type of AssignRubricToAssignmentMutation */
export type AssignRubricToAssignmentMutationInput = {
  assignmentId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  rubricId: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignRubricToAssignmentMutation. */
export type AssignRubricToAssignmentMutationPayload = {
  assignment: Maybe<Assignment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AssignRubricToProductMutation */
export type AssignRubricToProductMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['ID']['input'];
  rubricId: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignRubricToProductMutation. */
export type AssignRubricToProductMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  product: Maybe<Product>;
};

/** Autogenerated input type of AssignSchoolClassToCourseMutation */
export type AssignSchoolClassToCourseMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId: Scalars['ID']['input'];
  schoolClassUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignSchoolClassToCourseMutation. */
export type AssignSchoolClassToCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of AssignStandardSetToEntityMutation */
export type AssignStandardSetToEntityMutationInput = {
  assignToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  standardSetId: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignStandardSetToEntityMutation. */
export type AssignStandardSetToEntityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  standardSet: Maybe<StandardSet>;
};

/** Autogenerated input type of AssignStudentToCourseMutation */
export type AssignStudentToCourseMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of AssignStudentToCourseMutation. */
export type AssignStudentToCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  course: Course;
};

/** Autogenerated input type of AssignStudentsToCounselorMutation */
export type AssignStudentsToCounselorMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  studentUuids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of AssignStudentsToCounselorMutation. */
export type AssignStudentsToCounselorMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  students: Array<Student>;
};

export type Assignment = ConversationContext & StudentActivityContext & StudentBadgeResource & {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  assetName: Scalars['String']['output'];
  badges: Array<Badge>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lessons: Array<Lesson>;
  name: Scalars['String']['output'];
  rubrics: Array<Rubric>;
  step: Maybe<Scalars['Int']['output']>;
  submission: Maybe<AssignmentSubmission>;
};


export type AssignmentSubmissionArgs = {
  studentUuid: InputMaybe<Scalars['ID']['input']>;
};

/** Attributes for filtering Assignments */
export type AssignmentFilter = {
  assetNameCont?: InputMaybe<Scalars['String']['input']>;
  descriptionCont?: InputMaybe<Scalars['String']['input']>;
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
};

export type AssignmentPage = {
  nodes: Array<Assignment>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type AssignmentSubmission = {
  acceptanceGrade: Maybe<SubmissionGrade>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  files: Array<AssignmentSubmissionFile>;
  /** @deprecated Use acceptanceGrade instead */
  grade: Maybe<SubmissionGrade>;
  id: Scalars['ID']['output'];
  rubricGrade: Maybe<AssignmentSubmissionRubricGrade>;
  status: AssignmentSubmissionStatus;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type AssignmentSubmissionFile = {
  filename: Scalars['String']['output'];
  googleWeblink: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  source: Scalars['String']['output'];
  url: Scalars['String']['output'];
};


export type AssignmentSubmissionFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

export type AssignmentSubmissionRubricGrade = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  lastGradedBy: Maybe<User>;
  pointsAvailable: Scalars['Int']['output'];
  pointsScored: Scalars['Int']['output'];
  results: Array<RubricGradeResult>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum AssignmentSubmissionStatus {
  /** Status for draft submissions */
  DRAFT = 'DRAFT',
  /** Status for submitted submissions */
  SUBMITTED = 'SUBMITTED'
}

export type Attachment = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  displayName: Maybe<Scalars['String']['output']>;
  files: Array<AttachmentFile>;
  id: Scalars['ID']['output'];
  lessons: Array<Lesson>;
  name: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
};


export type AttachmentFilesArgs = {
  scope: InputMaybe<ArchivableStatus>;
};

export type AttachmentFile = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  attachment: Attachment;
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};


export type AttachmentFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering Attachments */
export type AttachmentFilter = {
  descriptionCont?: InputMaybe<Scalars['String']['input']>;
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type AttachmentPage = {
  nodes: Array<Attachment>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type Badge = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
};

/** Attributes for filtering Badges */
export type BadgeFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type BadgePage = {
  nodes: Array<Badge>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type CareerExperienceEntry = {
  clusterId: Scalars['ID']['output'];
  clusterName: Scalars['String']['output'];
  submissions: Array<CareerExperienceSubmissionEntry>;
  submissionsCount: Scalars['Int']['output'];
};

export type CareerExperienceSubmissionEntry = {
  contextName: Scalars['String']['output'];
  isTeamSubmission: Scalars['Boolean']['output'];
  service: ServiceNames;
  submissionName: Scalars['String']['output'];
  submittedAt: Scalars['ISO8601DateTime']['output'];
};

export type CareerReviewSurvey = {
  questions: Array<CareerReviewSurveyQuestion>;
};

export type CareerReviewSurveyAnswer = {
  type: CareerReviewSurveyAnswerTypes;
  value: Scalars['String']['output'];
};

export enum CareerReviewSurveyAnswerContextTypes {
  /** Assessment Career review survey answer context type */
  ASSESSMENT = 'ASSESSMENT',
  /** Course Career review survey answer context type */
  COURSE = 'COURSE',
  /** Virtual Internship Career review survey answer context type */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export type CareerReviewSurveyAnswerStatsEntry = {
  count: Scalars['Int']['output'];
  option: Scalars['String']['output'];
};

export enum CareerReviewSurveyAnswerTypes {
  /** Custom answer type */
  CUSTOM = 'CUSTOM',
  /** Predefined answer type */
  PREDEFINED = 'PREDEFINED'
}

export type CareerReviewSurveyAnswerWithQuestion = {
  answer: Array<CareerReviewSurveyAnswer>;
  question: CareerReviewSurveyQuestion;
};

export type CareerReviewSurveyQuestion = {
  answer: Array<Maybe<Scalars['String']['output']>>;
  id: Scalars['ID']['output'];
  options: Array<CareerReviewSurveyQuestionOption>;
  question: Scalars['String']['output'];
  type: CareerReviewSurveyQuestionTypes;
};

export type CareerReviewSurveyQuestionOption = {
  option: Scalars['String']['output'];
  step: Scalars['Int']['output'];
};

export type CareerReviewSurveyQuestionReport = {
  options: Array<CareerReviewSurveyAnswerStatsEntry>;
  question: Scalars['String']['output'];
};

export enum CareerReviewSurveyQuestionTypes {
  /** Single Choice type of question */
  MULTIPLE_CHOICE = 'MULTIPLE_CHOICE',
  /** Single Choice type of question */
  SINGLE_CHOICE = 'SINGLE_CHOICE'
}

export type CareerReviewSurveyReport = {
  questionAnswerCounts: Array<QuestionAnswerCount>;
  results: CareerReviewSurveyReportResultPage;
  studentsAnsweredCount: Scalars['Int']['output'];
  studentsCount: Scalars['Int']['output'];
};


export type CareerReviewSurveyReportResultsArgs = {
  filter?: InputMaybe<CareerReviewSurveyReportResultFilter>;
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<CareerReviewSurveyReportResultSortAttributes>;
};

export type CareerReviewSurveyReportFile = {
  endDate: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  startDate: Maybe<Scalars['ISO8601Date']['output']>;
  uploadStatus: Maybe<ReportUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type CareerReviewSurveyReportFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering Career Review Survey report */
export type CareerReviewSurveyReportFilter = {
  endDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  startDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type CareerReviewSurveyReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type CareerReviewSurveyReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type CareerReviewSurveyReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type CareerReviewSurveyReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type CareerReviewSurveyReportResult = {
  answers: Array<CareerReviewSurveyAnswerWithQuestion>;
  contextName: Maybe<Scalars['String']['output']>;
  contextType: Maybe<CareerReviewSurveyAnswerContextTypes>;
  isBaseline: Scalars['Boolean']['output'];
  isCurrent: Scalars['Boolean']['output'];
  studentName: Scalars['String']['output'];
  studentSisId: Maybe<Scalars['String']['output']>;
  takeNumber: Scalars['Int']['output'];
  takenAt: Scalars['ISO8601DateTime']['output'];
};

export type CareerReviewSurveyReportResultFilter = {
  contextTypeIn?: InputMaybe<Array<CareerReviewSurveyAnswerContextTypes>>;
  fullNameOrSisIdCont?: InputMaybe<Scalars['String']['input']>;
};

export type CareerReviewSurveyReportResultPage = {
  nodes: Array<CareerReviewSurveyReportResult>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type CareerReviewSurveyReportResultSortAttributes = {
  column?: InputMaybe<CareerReviewSurveyReportResultSortColumns>;
  order?: InputMaybe<SortOrders>;
};

export enum CareerReviewSurveyReportResultSortColumns {
  /** Sorting by Context type */
  CONTEXT_TYPE = 'CONTEXT_TYPE',
  /** Sorting by Student name */
  STUDENT_NAME = 'STUDENT_NAME',
  /** Sorting by Student sis id */
  STUDENT_SIS_ID = 'STUDENT_SIS_ID',
  /** Sorting by Last taken at */
  TAKEN_AT = 'TAKEN_AT'
}

export type Catalog = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Maybe<Scalars['String']['output']>;
  entities: EntityPage;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  service: Services;
  status: CatalogStatuses;
  thumbnailUrl: Scalars['String']['output'];
  track: Track;
  tracks: Array<Track>;
};


export type CatalogEntitiesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type CatalogTrackArgs = {
  id: Scalars['ID']['input'];
};

/** Attributes for filtering Catalogs */
export type CatalogFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  serviceEq?: InputMaybe<Services>;
  statusEq?: InputMaybe<CatalogStatuses>;
};

export type CatalogPage = {
  nodes: Array<Catalog>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum CatalogStatuses {
  /** Status for draft catalogs */
  DRAFT = 'DRAFT',
  /** Status for published catalogs */
  PUBLISHED = 'PUBLISHED'
}

/** Attributes for creating and updating catalog tracks */
export type CatalogTrackAttributes = {
  step: Scalars['Int']['input'];
  trackId: Scalars['ID']['input'];
};

export type CheckInGroup = StudentBadgeResource & {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  badges: Array<Badge>;
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  questions: Array<CheckInQuestion>;
  step: Maybe<Scalars['Int']['output']>;
};

/** Attributes for filtering CheckInGroups */
export type CheckInGroupFilter = {
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type CheckInGroupPage = {
  nodes: Array<CheckInGroup>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for creating and updating check-in items */
export type CheckInItemAttributes = {
  itemId: Scalars['ID']['input'];
  itemType: CheckInItemTypes;
  step?: InputMaybe<Scalars['Int']['input']>;
};

export enum CheckInItemTypes {
  /** Group of check-in questions */
  CHECK_IN_GROUP = 'CHECK_IN_GROUP',
  /** Single check-in question */
  CHECK_IN_QUESTION = 'CHECK_IN_QUESTION'
}

export type CheckInQuestion = {
  answer: Maybe<CheckInQuestionAnswer>;
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  question: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
};

export type CheckInQuestionAnswer = ConversationContext & {
  answer: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  grade: Maybe<SubmissionGrade>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Attributes for creating and updating check in questions */
export type CheckInQuestionAttributes = {
  questionId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

/** Attributes for filtering CheckInQuestions */
export type CheckInQuestionFilter = {
  questionCont?: InputMaybe<Scalars['String']['input']>;
};

export type CheckInQuestionPage = {
  nodes: Array<CheckInQuestion>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Autogenerated input type of ClearCacheMutation */
export type ClearCacheMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of ClearCacheMutation. */
export type ClearCacheMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

export type Cluster = {
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  pathways: Array<Pathway>;
  thumbnailUrl: Scalars['String']['output'];
};

export type ClusterApplicationCount = {
  applicationsCount: Scalars['Int']['output'];
  cluster: Cluster;
  /** @deprecated returned flat as `pathwayCounts` in the `OpportunityReport` query */
  pathwayApplicationCounts: Array<PathwayApplicationCount>;
};

export type ClusterCompletionStatsEntry = {
  cluster: Cluster;
  studentsCount: Scalars['Int']['output'];
};

export type ClusterRecommendationCount = {
  cluster: Cluster;
  pathwayRecommendationCounts: Array<PathwayRecommendationCount>;
  recommendationsCount: Scalars['Int']['output'];
};

export type ClusterRecommendationStatsEntry = {
  cluster: Cluster;
  studentsCount: Scalars['Int']['output'];
};

export type ClusterVisitCount = {
  cluster: Cluster;
  pathwayVisitCounts: Array<PathwayVisitCount>;
  visitsCount: Scalars['Int']['output'];
};

export type Collection = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type CommonAppData = {
  hasCounselorInvitation: Scalars['Boolean']['output'];
  hasCounselorProfileFormCompleted: Scalars['Boolean']['output'];
  hasPostSecondaryApplicationsEnabled: Scalars['Boolean']['output'];
  hasRecommenderInvitation: Scalars['Boolean']['output'];
  hasTeacherInvitation: Scalars['Boolean']['output'];
  hasTeacherProfileFormCompleted: Scalars['Boolean']['output'];
  syncStatus: Maybe<CommonAppSyncStatus>;
};

export type CommonAppForm = {
  deadline: Maybe<Scalars['ISO8601DateTime']['output']>;
  formType: CommonAppFormTypes;
  previewUrl: Maybe<Scalars['String']['output']>;
  status: FormStatuses;
};

/** Attributes for a CommonApp form response */
export type CommonAppFormResponseAttributes = {
  filename?: InputMaybe<Scalars['String']['input']>;
  questionId: Scalars['Int']['input'];
  response: Scalars['String']['input'];
};

export enum CommonAppFormTypes {
  /** Counselor early decision form */
  COUNSELOR_EARLY_DECISION = 'COUNSELOR_EARLY_DECISION',
  /** Counselor early decision 2 form */
  COUNSELOR_EARLY_DECISION_2 = 'COUNSELOR_EARLY_DECISION_2',
  /** Counselor fee waiver form */
  COUNSELOR_FEE_WAIVER = 'COUNSELOR_FEE_WAIVER',
  /** Counselor final report form */
  COUNSELOR_FINAL_REPORT = 'COUNSELOR_FINAL_REPORT',
  /** Counselor midyear report form */
  COUNSELOR_MIDYEAR_REPORT = 'COUNSELOR_MIDYEAR_REPORT',
  /** Counselor optional report form */
  COUNSELOR_OPTIONAL_REPORT = 'COUNSELOR_OPTIONAL_REPORT',
  /** Counselor optional report 2 form */
  COUNSELOR_OPTIONAL_REPORT_2 = 'COUNSELOR_OPTIONAL_REPORT_2',
  /** Counselor profile form */
  COUNSELOR_PROFILE = 'COUNSELOR_PROFILE',
  /** Counselor recommendation form */
  COUNSELOR_RECOMMENDATION = 'COUNSELOR_RECOMMENDATION',
  /** Counselor secondary report form */
  COUNSELOR_SECONDARY_REPORT = 'COUNSELOR_SECONDARY_REPORT',
  /** Teacher profile form */
  TEACHER_PROFILE = 'TEACHER_PROFILE',
  /** Teacher recommendation form */
  TEACHER_RECOMMENDATION = 'TEACHER_RECOMMENDATION'
}

export type CommonAppSyncStatus = {
  lastSyncedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  status: CommonAppSyncStatuses;
};

export enum CommonAppSyncStatuses {
  /** Sync attempts that are completed */
  COMPLETED = 'COMPLETED',
  /** Sync attempts that failed */
  FAILED = 'FAILED',
  /** Sync attempts that are still in progress */
  IN_PROGRESS = 'IN_PROGRESS'
}

export type ContactLink = {
  id: Scalars['ID']['output'];
  type: ContactLinkTypes;
  value: Scalars['String']['output'];
};

export enum ContactLinkTypes {
  /** Behance Contact Link */
  BEHANCE = 'BEHANCE',
  /** Custom Contact Link */
  CUSTOM = 'CUSTOM',
  /** Dribbble Contact Link */
  DRIBBBLE = 'DRIBBBLE',
  /** Email Contact Link */
  EMAIL = 'EMAIL',
  /** Instagram Contact Link */
  INSTAGRAM = 'INSTAGRAM',
  /** Linkedin Contact Link */
  LINKEDIN = 'LINKEDIN',
  /** Phone Contact Link */
  PHONE = 'PHONE'
}

export type Contract = {
  definedLearningUuid: Scalars['ID']['output'];
  endDate: Scalars['ISO8601Date']['output'];
  entities: Array<Entity>;
  id: Scalars['ID']['output'];
  name: Maybe<Scalars['String']['output']>;
  startDate: Scalars['ISO8601Date']['output'];
  syncable: Scalars['Boolean']['output'];
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering Contracts */
export type ContractFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  serviceNameEq?: InputMaybe<ServiceNames>;
};

export type ContractPage = {
  nodes: Array<Contract>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type Conversation = {
  conversationContext: Maybe<ConversationContext>;
  id: Scalars['ID']['output'];
  messages: MessageConnection;
  messagesRead: Scalars['Boolean']['output'];
  participant: ConversationParticipant;
  /** @deprecated To be removed */
  participants: Array<ConversationParticipant>;
  recentMessage: Maybe<Message>;
  serviceName: Maybe<Scalars['String']['output']>;
  type: ConversationTypes;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type ConversationMessagesArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Conversation. */
export type ConversationConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Conversation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** Conversation Context */
export type ConversationContext = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export enum ConversationContextTypes {
  /** Announcement conversation context type */
  ANNOUNCEMENT = 'ANNOUNCEMENT',
  /** Assignment conversation context type */
  ASSIGNMENT = 'ASSIGNMENT',
  /** Check-in answer conversation context type */
  CHECK_IN_ANSWER = 'CHECK_IN_ANSWER',
  /** Course conversation context type */
  COURSE = 'COURSE',
  /** Lesson conversation context type */
  LESSON = 'LESSON',
  /** Opportunity conversation context type */
  OPPORTUNITY = 'OPPORTUNITY'
}

/** An edge in a connection. */
export type ConversationEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Conversation>;
};

export type ConversationGroup = {
  hasUnreadConversation: Scalars['Boolean']['output'];
  participant: ConversationParticipant;
  recentConversation: Conversation;
};

/** The connection type for ConversationGroup. */
export type ConversationGroupConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationGroupEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<ConversationGroup>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ConversationGroupEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<ConversationGroup>;
};

/** Conversation Member - a single member of a conversation (either as a direct participant or as a member of a group participant, e.g. student from a team.) */
export type ConversationMember = {
  email: Maybe<Scalars['String']['output']>;
  name: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Conversation Participant - can be a single member (User or Student) or a group of members (Team). Group participants return additional attributes: owner and members. */
export type ConversationParticipant = {
  email: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering conversation participants */
export type ConversationParticipantFilter = {
  participantType: ConversationParticipantTypes;
  participantUuid: Scalars['ID']['input'];
};

export enum ConversationParticipantTypes {
  /** Student conversation participant type */
  STUDENT = 'STUDENT',
  /** Team conversation participant type */
  TEAM = 'TEAM',
  /** User conversation participant type */
  USER = 'USER'
}

export type ConversationRecipient = {
  name: Scalars['String']['output'];
  recipientType: ConversationParticipantTypes;
  recipientUuid: Scalars['ID']['output'];
};

/** The connection type for ConversationRecipient. */
export type ConversationRecipientConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<ConversationRecipientEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<ConversationRecipient>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type ConversationRecipientEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<ConversationRecipient>;
};

/** Attributes for filtering conversation recipients */
export type ConversationRecipientFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<ConversationRecipientTypes>;
};

export enum ConversationRecipientTypes {
  /** Student conversation recipient type */
  STUDENT = 'STUDENT',
  /** Team conversation recipient type */
  TEAM = 'TEAM',
  /** User conversation recipient type */
  USER = 'USER'
}

export enum ConversationTypes {
  /** Contextual conversation type */
  CONTEXTUAL = 'CONTEXTUAL',
  /** General conversation type */
  GENERAL = 'GENERAL'
}

export enum CostRanges {
  /** Institution cost value between 5001 and 10000 */
  FROM_5001_TO_10000 = 'FROM_5001_TO_10000',
  /** Institution cost value between 10001 and 15000 */
  FROM_10001_TO_15000 = 'FROM_10001_TO_15000',
  /** Institution cost value between 15001 and 20000 */
  FROM_15001_TO_20000 = 'FROM_15001_TO_20000',
  /** Institution cost value between 0 and 5000 */
  LESS_THAN_5000 = 'LESS_THAN_5000',
  /** Institution cost value higher than 20000 */
  MORE_THAN_20000 = 'MORE_THAN_20000'
}

export type Course = ConversationContext & StudentActivityTarget & StudentBadgeResource & {
  activity: Maybe<Array<CourseActivity>>;
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  assignments: Maybe<Array<Assignment>>;
  badges: Maybe<Array<Badge>>;
  careerName: Maybe<Scalars['String']['output']>;
  collection: Maybe<Collection>;
  content: Array<CourseContent>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  enrolledSchoolClasses: Maybe<SchoolClassPage>;
  gradingNeeded: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  isCopy: Scalars['Boolean']['output'];
  isEnrolled: Scalars['Boolean']['output'];
  isGlobal: Scalars['Boolean']['output'];
  isRecommended: Scalars['Boolean']['output'];
  lessons: Array<Lesson>;
  match: Maybe<Scalars['Int']['output']>;
  metadata: CourseMetadata;
  name: Scalars['String']['output'];
  parent: Maybe<Course>;
  pathway: Maybe<Pathway>;
  progress: CourseProgress;
  reviewSurvey: Maybe<CareerReviewSurvey>;
  sharedResource: Maybe<SharedResource>;
  status: CourseStatuses;
  thumbnailUrl: Scalars['String']['output'];
  type: CourseTypes;
};


export type CourseEnrolledSchoolClassesArgs = {
  gradingNeeded?: InputMaybe<Scalars['Boolean']['input']>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type CourseGradingNeededArgs = {
  studentUuid: Scalars['ID']['input'];
};

export type CourseActivity = {
  assignments: Maybe<Array<Assignment>>;
  checkInQuestions: Maybe<Array<CheckInQuestion>>;
  lessonName: Scalars['String']['output'];
};

export type CourseCompletionStatsEntry = {
  course: Course;
  studentsCount: Scalars['Int']['output'];
};

export type CourseContent = {
  checkIns: Array<LessonItem>;
  extensionFields: Array<ExtensionField>;
  id: Scalars['ID']['output'];
  items: Array<LessonItem>;
  name: Scalars['String']['output'];
  surveyPerformed: Scalars['Boolean']['output'];
  type: LessonTypes;
};

export type CourseEnrollmentStatsEntry = {
  course: Course;
  studentsCount: Scalars['Int']['output'];
};

/** Attributes for filtering Courses */
export type CourseFilter = {
  adminSearchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
  collectionIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
  pathwayIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  pathwayNameCont?: InputMaybe<Scalars['String']['input']>;
  searchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
  statusEq?: InputMaybe<CourseStatuses>;
  typeEq?: InputMaybe<CourseTypes>;
};

/** Attributes for creating and updating course lessons */
export type CourseLessonAttributes = {
  lessonId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type CourseMetadata = {
  alternativeTitles: Maybe<Scalars['String']['output']>;
  averageSalary: Maybe<Scalars['String']['output']>;
  jobZone: Maybe<Scalars['String']['output']>;
  onetCode: Maybe<Scalars['String']['output']>;
  outlook: Maybe<Scalars['String']['output']>;
};

/** Attributes for creating and updating course metadata */
export type CourseMetadataAttributes = {
  alternativeTitles?: InputMaybe<Scalars['String']['input']>;
  averageSalary?: InputMaybe<Scalars['String']['input']>;
  jobZone?: InputMaybe<Scalars['Int']['input']>;
  onetCode?: InputMaybe<Scalars['String']['input']>;
  outlook?: InputMaybe<Scalars['String']['input']>;
};

export type CoursePage = {
  nodes: Array<Course>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type CourseProgress = {
  submitted: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export type CourseReport = {
  id: Scalars['ID']['output'];
  startYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type CourseReportUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

export enum CourseReportLevels {
  /** Entity level */
  ENTITY = 'ENTITY',
  /** School Class level */
  SCHOOL_CLASS = 'SCHOOL_CLASS',
  /** User level */
  USER = 'USER'
}

export enum CourseStatuses {
  /** Status for draft courses */
  DRAFT = 'DRAFT',
  /** Status for published courses */
  PUBLISHED = 'PUBLISHED'
}

export enum CourseTypes {
  /** Courses of high school type */
  HIGH_SCHOOL = 'HIGH_SCHOOL',
  /** Courses of middle school type */
  MIDDLE_SCHOOL = 'MIDDLE_SCHOOL'
}

/** Autogenerated input type of CreateAnnouncementMutation */
export type CreateAnnouncementMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  targetType: AnnouncementTargetTypes;
  targetUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateAnnouncementMutation. */
export type CreateAnnouncementMutationPayload = {
  announcement: Announcement;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateAssignmentMutation */
export type CreateAssignmentMutationInput = {
  assetName: Scalars['String']['input'];
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  rubricIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of CreateAssignmentMutation. */
export type CreateAssignmentMutationPayload = {
  assignment: Maybe<Assignment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateAttachmentFileMutation */
export type CreateAttachmentFileMutationInput = {
  attachmentId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateAttachmentFileMutation. */
export type CreateAttachmentFileMutationPayload = {
  attachmentFile: Maybe<AttachmentFile>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateAttachmentMutation */
export type CreateAttachmentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreateAttachmentMutation. */
export type CreateAttachmentMutationPayload = {
  attachment: Maybe<Attachment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateBadgeMutation */
export type CreateBadgeMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreateBadgeMutation. */
export type CreateBadgeMutationPayload = {
  badge: Maybe<Badge>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateCatalogMutation */
export type CreateCatalogMutationInput = {
  catalogTracks?: InputMaybe<Array<CatalogTrackAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  service?: InputMaybe<Services>;
  status: CatalogStatuses;
};

/** Autogenerated return type of CreateCatalogMutation. */
export type CreateCatalogMutationPayload = {
  catalog: Maybe<Catalog>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateCheckInGroupMutation */
export type CreateCheckInGroupMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  checkInQuestions?: InputMaybe<Array<CheckInQuestionAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreateCheckInGroupMutation. */
export type CreateCheckInGroupMutationPayload = {
  checkInGroup: Maybe<CheckInGroup>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateCheckInQuestionMutation */
export type CreateCheckInQuestionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  question: Scalars['String']['input'];
};

/** Autogenerated return type of CreateCheckInQuestionMutation. */
export type CreateCheckInQuestionMutationPayload = {
  checkInQuestion: Maybe<CheckInQuestion>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateCourseMutation */
export type CreateCourseMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  collectionId?: InputMaybe<Scalars['ID']['input']>;
  courseLessons?: InputMaybe<Array<CourseLessonAttributes>>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  isGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<CourseMetadataAttributes>;
  name: Scalars['String']['input'];
  pathwayId?: InputMaybe<Scalars['ID']['input']>;
  status: CourseStatuses;
  type?: InputMaybe<CourseTypes>;
};

/** Autogenerated return type of CreateCourseMutation. */
export type CreateCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  course: Maybe<Course>;
};

/** Autogenerated input type of CreateEvaluationCommentMutation */
export type CreateEvaluationCommentMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  statementId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEvaluationCommentMutation. */
export type CreateEvaluationCommentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
};

/** Autogenerated input type of CreateEvaluationMutation */
export type CreateEvaluationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  planId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateEvaluationMutation. */
export type CreateEvaluationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
};

/** Autogenerated input type of CreateExtensionFieldFileMutation */
export type CreateExtensionFieldFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  extensionFieldId: Scalars['ID']['input'];
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateExtensionFieldFileMutation. */
export type CreateExtensionFieldFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  extensionFieldFile: Maybe<ExtensionFieldFile>;
};

/** Autogenerated input type of CreateExtensionFieldMutation */
export type CreateExtensionFieldMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  clusterIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  courseIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  description: Scalars['String']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  links?: InputMaybe<Array<ExtensionFieldLinkAttributes>>;
  name: Scalars['String']['input'];
  pathwayIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  publishedFrom?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  publishedTo?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  status?: InputMaybe<ExtensionFieldStatuses>;
};

/** Autogenerated return type of CreateExtensionFieldMutation. */
export type CreateExtensionFieldMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  extensionField: Maybe<ExtensionField>;
};

/** Autogenerated input type of CreateExternalPresentationMutation */
export type CreateExternalPresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  isExpandable?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  source: Scalars['String']['input'];
};

/** Autogenerated return type of CreateExternalPresentationMutation. */
export type CreateExternalPresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  externalPresentation: Maybe<ExternalPresentation>;
};

/** Autogenerated input type of CreateLessonMutation */
export type CreateLessonMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  checkInItems?: InputMaybe<Array<CheckInItemAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<LessonDescriptionAttributes>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  lessonItems?: InputMaybe<Array<LessonItemAttributes>>;
  name: Scalars['String']['input'];
  type: LessonTypes;
};

/** Autogenerated return type of CreateLessonMutation. */
export type CreateLessonMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  lesson: Maybe<Lesson>;
};

/** Autogenerated input type of CreateOpportunityMutation */
export type CreateOpportunityMutationInput = {
  automaticAcceptance?: InputMaybe<Scalars['Boolean']['input']>;
  availableSpots?: InputMaybe<Scalars['Int']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  creditsOutcomes?: InputMaybe<Scalars['String']['input']>;
  deadline?: InputMaybe<Scalars['ISO8601Date']['input']>;
  description: Scalars['String']['input'];
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageFitToContainer?: InputMaybe<Scalars['Boolean']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  opportunityType: OpportunityTypes;
  partnerId?: InputMaybe<Scalars['ID']['input']>;
  pathwayIds: Array<Scalars['ID']['input']>;
  periodEnd?: InputMaybe<Scalars['ISO8601Date']['input']>;
  periodStart?: InputMaybe<Scalars['ISO8601Date']['input']>;
  salaryInformation?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  visibilityScope: VisibilityScope;
};

/** Autogenerated return type of CreateOpportunityMutation. */
export type CreateOpportunityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  opportunity: Maybe<Opportunity>;
};

/** Autogenerated input type of CreatePartnerFileMutation */
export type CreatePartnerFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['ID']['input'];
  partnerId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePartnerFileMutation. */
export type CreatePartnerFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  partnerFile: Maybe<PartnerFile>;
};

/** Autogenerated input type of CreatePartnerMutation */
export type CreatePartnerMutationInput = {
  about: Scalars['String']['input'];
  additionalUrls?: InputMaybe<Array<Scalars['String']['input']>>;
  address?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  details?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageFitToContainer?: InputMaybe<Scalars['Boolean']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  opportunityIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  pathwayIds: Array<Scalars['ID']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<PartnerStatuses>;
  url?: InputMaybe<Scalars['String']['input']>;
  visibilityScope?: InputMaybe<VisibilityScope>;
};

/** Autogenerated return type of CreatePartnerMutation. */
export type CreatePartnerMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  partner: Maybe<Partner>;
};

/** Autogenerated input type of CreatePlanGroupMutation */
export type CreatePlanGroupMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreatePlanGroupMutation. */
export type CreatePlanGroupMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroup: Maybe<PlanGroup>;
};

/** Autogenerated input type of CreatePlanGroupStatementEvidenceMutation */
export type CreatePlanGroupStatementEvidenceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evidences: Array<PlanGroupStatementEvidenceItemAttributes>;
  planGroupStatementId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePlanGroupStatementEvidenceMutation. */
export type CreatePlanGroupStatementEvidenceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of CreatePlanGroupStatementMutation */
export type CreatePlanGroupStatementMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  planGroupId?: InputMaybe<Scalars['ID']['input']>;
  question?: InputMaybe<PlanGroupStatementQuestionAttributes>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  step?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of CreatePlanGroupStatementMutation. */
export type CreatePlanGroupStatementMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of CreatePlanMutation */
export type CreatePlanMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  planGroups?: InputMaybe<Array<PlanGroupAttributes>>;
};

/** Autogenerated return type of CreatePlanMutation. */
export type CreatePlanMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  plan: Maybe<Plan>;
};

/** Autogenerated input type of CreatePresentationMutation */
export type CreatePresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  status: PresentationStatuses;
  taskId: Scalars['ID']['input'];
  transition?: InputMaybe<Scalars['String']['input']>;
  typography?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreatePresentationMutation. */
export type CreatePresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  presentation: Maybe<Presentation>;
};

/** Autogenerated input type of CreateProductMutation */
export type CreateProductMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  rubricIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  rubricsUrl?: InputMaybe<Scalars['String']['input']>;
  status: ProductStatuses;
};

/** Autogenerated return type of CreateProductMutation. */
export type CreateProductMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  product: Maybe<Product>;
};

/** Autogenerated input type of CreatePublicResourceMutation */
export type CreatePublicResourceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  filename: Scalars['String']['input'];
  type: Asset;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreatePublicResourceMutation. */
export type CreatePublicResourceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  publicResource: Maybe<PublicResource>;
};

/** Autogenerated input type of CreateResearchLinkMutation */
export type CreateResearchLinkMutationInput = {
  author?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  resourceLink: Scalars['String']['input'];
  sourceName: Scalars['String']['input'];
};

/** Autogenerated return type of CreateResearchLinkMutation. */
export type CreateResearchLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  researchLink: Maybe<ResearchLink>;
};

/** Autogenerated input type of CreateRubricCriteriaLabelMutation */
export type CreateRubricCriteriaLabelMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  rubricId: Scalars['ID']['input'];
  score: Scalars['Int']['input'];
};

/** Autogenerated return type of CreateRubricCriteriaLabelMutation. */
export type CreateRubricCriteriaLabelMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricCriteriaLabel: Maybe<RubricCriteriaLabel>;
};

/** Autogenerated input type of CreateRubricCriteriaMutation */
export type CreateRubricCriteriaMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  rubricCriteriaLabelId: Scalars['ID']['input'];
  rubricHeadingId: Scalars['ID']['input'];
  text: Scalars['String']['input'];
};

/** Autogenerated return type of CreateRubricCriteriaMutation. */
export type CreateRubricCriteriaMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricCriteria: Maybe<RubricCriteria>;
};

/** Autogenerated input type of CreateRubricHeadingMutation */
export type CreateRubricHeadingMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  multiplier?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  rubricId: Scalars['ID']['input'];
  tagIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of CreateRubricHeadingMutation. */
export type CreateRubricHeadingMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricHeading: Maybe<RubricHeading>;
};

/** Autogenerated input type of CreateRubricMutation */
export type CreateRubricMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreateRubricMutation. */
export type CreateRubricMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubric: Maybe<Rubric>;
};

/** Autogenerated input type of CreateSharedSessionTokenMutation */
export type CreateSharedSessionTokenMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateSharedSessionTokenMutation. */
export type CreateSharedSessionTokenMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  token: Scalars['String']['output'];
};

/** Autogenerated input type of CreateSlideBackgroundImageMutation */
export type CreateSlideBackgroundImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  slideId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateSlideBackgroundImageMutation. */
export type CreateSlideBackgroundImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideBackgroundImage: Maybe<SlideBackgroundImage>;
};

/** Autogenerated input type of CreateSlideImageMutation */
export type CreateSlideImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contentId: Scalars['ID']['input'];
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  position?: InputMaybe<Scalars['String']['input']>;
  slideId: Scalars['ID']['input'];
  style: Scalars['String']['input'];
};

/** Autogenerated return type of CreateSlideImageMutation. */
export type CreateSlideImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideImage: Maybe<SlideImage>;
};

/** Autogenerated input type of CreateSlideMutation */
export type CreateSlideMutationInput = {
  backgroundColor?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  iframeUrl?: InputMaybe<Scalars['String']['input']>;
  isShared?: InputMaybe<Scalars['Boolean']['input']>;
  links?: InputMaybe<Array<SlideLinksAttributes>>;
  name: Scalars['String']['input'];
  notes?: InputMaybe<Scalars['String']['input']>;
  presentation?: InputMaybe<PresentationAttributes>;
  slide?: InputMaybe<SlideAttributes>;
  template: Scalars['String']['input'];
  textItems?: InputMaybe<Array<SlideTextItemsAttributes>>;
};

/** Autogenerated return type of CreateSlideMutation. */
export type CreateSlideMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slide: Maybe<Slide>;
};

/** Autogenerated input type of CreateSlideVideoMutation */
export type CreateSlideVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contentId: Scalars['ID']['input'];
  slideId: Scalars['ID']['input'];
  videoFilename?: InputMaybe<Scalars['String']['input']>;
  videoUrl?: InputMaybe<Scalars['String']['input']>;
  videoUuid?: InputMaybe<Scalars['ID']['input']>;
};

/** Autogenerated return type of CreateSlideVideoMutation. */
export type CreateSlideVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideVideo: Maybe<SlideVideo>;
};

/** Autogenerated input type of CreateTagMutation */
export type CreateTagMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  isDefault?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  type?: InputMaybe<TagTypes>;
};

/** Autogenerated return type of CreateTagMutation. */
export type CreateTagMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  tag: Maybe<Tag>;
};

/** Autogenerated input type of CreateTaskFileMutation */
export type CreateTaskFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fileFilename: Scalars['String']['input'];
  fileUuid: Scalars['String']['input'];
  name: Scalars['String']['input'];
  step: Scalars['Int']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateTaskFileMutation. */
export type CreateTaskFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  taskFile: Maybe<TaskFile>;
};

/** Autogenerated input type of CreateTaskMutation */
export type CreateTaskMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  checkInItems?: InputMaybe<Array<CheckInItemAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  introduction?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  pathwayIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  presentationUrl?: InputMaybe<Scalars['String']['input']>;
  standard?: InputMaybe<Scalars['String']['input']>;
  status: TaskStatuses;
  studentResources?: InputMaybe<Scalars['String']['input']>;
  taskProducts?: InputMaybe<Array<TaskProductAttributes>>;
  teachingResources?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of CreateTaskMutation. */
export type CreateTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

/** Autogenerated input type of CreateTextMutation */
export type CreateTextMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  content: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreateTextMutation. */
export type CreateTextMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  text: Maybe<Text>;
};

/** Autogenerated input type of CreateTrackMutation */
export type CreateTrackMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  grades?: InputMaybe<Array<Scalars['String']['input']>>;
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  service?: InputMaybe<Services>;
  shortDescription?: InputMaybe<Scalars['String']['input']>;
  status: TrackStatuses;
  trackUnits?: InputMaybe<Array<TrackUnitAttributes>>;
};

/** Autogenerated return type of CreateTrackMutation. */
export type CreateTrackMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  track: Maybe<Track>;
};

/** Autogenerated input type of CreateUnitMutation */
export type CreateUnitMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  imageFilename: Scalars['String']['input'];
  imageUuid: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  service?: InputMaybe<Services>;
  status: UnitStatuses;
  unitResources?: InputMaybe<Array<UnitResourceAttributes>>;
  unitTasks?: InputMaybe<Array<UnitTaskAttributes>>;
};

/** Autogenerated return type of CreateUnitMutation. */
export type CreateUnitMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  unit: Maybe<Unit>;
};

/** Autogenerated input type of CreateVideoMutation */
export type CreateVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  videoFilename: Scalars['String']['input'];
  videoUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateVideoMutation. */
export type CreateVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  video: Maybe<Video>;
};

/** Autogenerated input type of CreateVirtualInternshipMutation */
export type CreateVirtualInternshipMutationInput = {
  availableSpots?: InputMaybe<Scalars['Int']['input']>;
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  calendarLessonsIds?: InputMaybe<Array<VirtualInternshipLessonAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  creditsOutcomes?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  experienceOpportunityLessonsIds?: InputMaybe<Array<VirtualInternshipLessonAttributes>>;
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name: Scalars['String']['input'];
  pathwayIds: Array<Scalars['ID']['input']>;
  postExperienceLessonsIds?: InputMaybe<Array<VirtualInternshipLessonAttributes>>;
  readinessSkillsLessonsIds?: InputMaybe<Array<VirtualInternshipLessonAttributes>>;
  requiredExperiences?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<VirtualInternshipStatuses>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** Autogenerated return type of CreateVirtualInternshipMutation. */
export type CreateVirtualInternshipMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  virtualInternship: Maybe<VirtualInternship>;
};

/** Autogenerated input type of CreateVocabularyMutation */
export type CreateVocabularyMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  definition: Scalars['String']['input'];
  term: Scalars['String']['input'];
};

/** Autogenerated return type of CreateVocabularyMutation. */
export type CreateVocabularyMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  vocabulary: Maybe<Vocabulary>;
};

/** Attributes for updating entity school year start date */
export type DateAttributes = {
  day: Scalars['Int']['input'];
  month: Scalars['Int']['input'];
};

export enum Degree {
  /** Associate's Degree */
  ASSOCIATES_DEGREE = 'ASSOCIATES_DEGREE',
  /** Bachelor's Degree */
  BACHELORS_DEGREE = 'BACHELORS_DEGREE',
  /** Certificates */
  CERTIFICATES = 'CERTIFICATES',
  /** Doctor's Degree */
  DOCTORS_DEGREE = 'DOCTORS_DEGREE',
  /** Master's Degree */
  MASTERS_DEGREE = 'MASTERS_DEGREE',
  /** Post-baccalaureate Certificate */
  POST_BACCALAUREATE_CERTIFICATE = 'POST_BACCALAUREATE_CERTIFICATE'
}

/** Autogenerated input type of DeletePartnerFileMutation */
export type DeletePartnerFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePartnerFileMutation. */
export type DeletePartnerFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  partnerFile: Maybe<PartnerFile>;
};

/** Autogenerated input type of DeletePlanGroupStatementEvidenceMutation */
export type DeletePlanGroupStatementEvidenceMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeletePlanGroupStatementEvidenceMutation. */
export type DeletePlanGroupStatementEvidenceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of DeletePublicResourcesMutation */
export type DeletePublicResourcesMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  type: Asset;
  uuids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of DeletePublicResourcesMutation. */
export type DeletePublicResourcesMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteRubricCriteriaLabelMutation */
export type DeleteRubricCriteriaLabelMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteRubricCriteriaLabelMutation. */
export type DeleteRubricCriteriaLabelMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteRubricHeadingMutation */
export type DeleteRubricHeadingMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteRubricHeadingMutation. */
export type DeleteRubricHeadingMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteTagMutation */
export type DeleteTagMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteTagMutation. */
export type DeleteTagMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DeleteTaskFileMutation */
export type DeleteTaskFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DeleteTaskFileMutation. */
export type DeleteTaskFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of DuplicateCourseMutation */
export type DuplicateCourseMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DuplicateCourseMutation. */
export type DuplicateCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  course: Maybe<Course>;
};

/** Autogenerated input type of DuplicateRubricMutation */
export type DuplicateRubricMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DuplicateRubricMutation. */
export type DuplicateRubricMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubric: Maybe<Rubric>;
};

/** Autogenerated input type of DuplicateTaskMutation */
export type DuplicateTaskMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of DuplicateTaskMutation. */
export type DuplicateTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

export type Entity = StudentEntity & {
  catalogs: Maybe<Array<Catalog>>;
  children: Maybe<EntityPage>;
  contracts: Maybe<Array<Contract>>;
  dcIconUrl: Maybe<Scalars['String']['output']>;
  dcLogoUrl: Maybe<Scalars['String']['output']>;
  dlIconUrl: Maybe<Scalars['String']['output']>;
  dlLogoUrl: Maybe<Scalars['String']['output']>;
  extensionFields: Maybe<Array<ExtensionField>>;
  gradingNeeded: Scalars['Boolean']['output'];
  hasCareersContract: Scalars['Boolean']['output'];
  hasLearningContract: Scalars['Boolean']['output'];
  /** @deprecated Use hasLearningContract instead */
  hasPblContract: Scalars['Boolean']['output'];
  name: Maybe<Scalars['String']['output']>;
  parent: Maybe<Entity>;
  plans: Maybe<Array<Plan>>;
  regionName: Maybe<Scalars['String']['output']>;
  reportTypes: Maybe<Array<ReportTypes>>;
  schoolClasses: Maybe<SchoolClassPage>;
  settings: EntitySettings;
  standardSets: Maybe<Array<StandardSet>>;
  tags: Maybe<Array<Tag>>;
  users: Maybe<UserPage>;
  uuid: Scalars['ID']['output'];
  welcomeMessage: Maybe<WelcomeMessage>;
};


export type EntityChildrenArgs = {
  filter: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type EntitySchoolClassesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type EntityUsersArgs = {
  filter: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for creating and updating entity catalogs */
export type EntityCatalogAttributes = {
  catalogId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type EntityData = {
  catalogs: Maybe<Array<Catalog>>;
  children: EntityDataPage;
  clusterEnrollmentStats: Array<AdminDashboardClusterEnrollmentStatsEntry>;
  extensionFields: Maybe<Array<ExtensionField>>;
  gradingNeeded: Scalars['Boolean']['output'];
  hasChildren: Scalars['Boolean']['output'];
  hierarchyMetrics: Maybe<HierarchyMetrics>;
  myReports: AdminDashboardMyReport;
  name: Scalars['String']['output'];
  parent: Maybe<EntityData>;
  pathwayEnrollmentStats: Array<AdminDashboardPathwayEnrollmentStatsEntry>;
  plans: Maybe<Array<Plan>>;
  settings: EntitySettings;
  standardSets: Maybe<Array<StandardSet>>;
  studentMetrics: Maybe<StudentMetrics>;
  users: UserDataPage;
  uuid: Scalars['ID']['output'];
};


export type EntityDataChildrenArgs = {
  filter: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type EntityDataClusterEnrollmentStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type EntityDataPathwayEnrollmentStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type EntityDataUsersArgs = {
  filter: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type EntityDataPage = {
  nodes: Array<EntityData>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for filtering Entities */
export type EntityFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type EntityPage = {
  nodes: Array<Entity>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for creating and updating entity plans */
export type EntityPlanAttributes = {
  planId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type EntitySettings = {
  assessmentEnabled: Scalars['Boolean']['output'];
  assessmentType: AssessmentTypes;
  classManagementEnabled: Scalars['Boolean']['output'];
  onboardingEnabled: Scalars['Boolean']['output'];
  opportunitiesEnabled: Scalars['Boolean']['output'];
  postSecondaryApplicationsEnabled: Scalars['Boolean']['output'];
  schoolYearStartDate: SchoolYearStartDate;
  selfEvaluationEnabled: Scalars['Boolean']['output'];
};

/** Attributes for updating entity settings */
export type EntitySettingsAttributes = {
  assessmentEnabled?: InputMaybe<SettingsAttributes>;
  assessmentType?: InputMaybe<AssessmentTypeAttributes>;
  classManagementEnabled?: InputMaybe<SettingsAttributes>;
  onboardingEnabled?: InputMaybe<SettingsAttributes>;
  opportunitiesEnabled?: InputMaybe<SettingsAttributes>;
  postSecondaryApplicationsEnabled?: InputMaybe<SettingsAttributes>;
  schoolYearStartDate?: InputMaybe<SchoolYearStartDateAttributes>;
  selfEvaluationEnabled?: InputMaybe<SettingsAttributes>;
};

/** Autogenerated input type of EvaluateStudentMutation */
export type EvaluateStudentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  evaluationId: Scalars['ID']['input'];
  results: Array<EvaluationResultAttributes>;
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of EvaluateStudentMutation. */
export type EvaluateStudentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  evaluation: Maybe<Evaluation>;
  student: Maybe<Student>;
};

export type Evaluation = {
  /** @deprecated Use comments from `statement` instead */
  comments: Array<EvaluationComment>;
  id: Scalars['ID']['output'];
  plan: Plan;
  results: Array<EvaluationResult>;
  resultsHistory: Array<EvaluationResult>;
  student: Student;
};


export type EvaluationResultsHistoryArgs = {
  statementId: Scalars['ID']['input'];
};

export type EvaluationComment = {
  author: Evaluator;
  body: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  statement: PlanGroupStatement;
};

export type EvaluationResult = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  evaluation: Evaluation;
  evaluator: Evaluator;
  result: EvaluationResultValues;
  statement: PlanGroupStatement;
};

/** Attributes for evaluating students */
export type EvaluationResultAttributes = {
  result: EvaluationResultValues;
  statementId: Scalars['ID']['input'];
};

export enum EvaluationResultValues {
  /** Evaluation result with the  */
  COMPLETED = 'COMPLETED',
  /** Evaluation result with the  */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Evaluation result with the  */
  NOT_MET = 'NOT_MET',
  /** Evaluation with no result yet */
  NOT_STARTED = 'NOT_STARTED'
}

export type Evaluator = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export enum EvidenceContextKind {
  /** Course */
  COURSE = 'COURSE',
  /** Virtual Internship */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum EvidenceKind {
  /** Assignment submission */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** Opportunity application */
  OPPORTUNITY_APPLICATION = 'OPPORTUNITY_APPLICATION',
  /** Personal Portfolio Project */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Product submission */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION',
  /** Rubric Grade */
  RUBRIC_GRADE = 'RUBRIC_GRADE'
}

export type ExtensionField = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  author: ExtensionFieldAuthor;
  clusters: Array<Cluster>;
  courses: Array<Course>;
  description: Scalars['String']['output'];
  entities: EntityPage;
  files: Array<ExtensionFieldFile>;
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  links: Array<ExtensionFieldLink>;
  name: Scalars['String']['output'];
  pathways: Array<Pathway>;
  publishedFrom: Maybe<Scalars['ISO8601DateTime']['output']>;
  publishedTo: Maybe<Scalars['ISO8601DateTime']['output']>;
  status: ExtensionFieldStatuses;
};


export type ExtensionFieldEntitiesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type ExtensionFieldFilesArgs = {
  scope?: InputMaybe<ArchivableStatus>;
};

/** Extension Field Author */
export type ExtensionFieldAuthor = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type ExtensionFieldFile = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};


export type ExtensionFieldFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering ExtensionFields */
export type ExtensionFieldFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  statusEq?: InputMaybe<ExtensionFieldStatuses>;
};

export type ExtensionFieldLink = {
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

/** Attributes for creating and updating extension field links */
export type ExtensionFieldLinkAttributes = {
  name: Scalars['String']['input'];
  url: Scalars['String']['input'];
};

export type ExtensionFieldPage = {
  nodes: Array<ExtensionField>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum ExtensionFieldStatuses {
  /** Status for draft extension fields */
  DRAFT = 'DRAFT',
  /** Status for published extension fields */
  PUBLISHED = 'PUBLISHED'
}

export type ExternalPresentation = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isExpandable: Scalars['Boolean']['output'];
  lessons: Array<Lesson>;
  name: Scalars['String']['output'];
  source: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
};

/** Attributes for filtering ExternalPresentations */
export type ExternalPresentationFilter = {
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
  sourceCont?: InputMaybe<Scalars['String']['input']>;
};

export type ExternalPresentationPage = {
  nodes: Array<ExternalPresentation>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type ExternalResume = {
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
};


export type ExternalResumeUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** FileSubmitter */
export type FileSubmitter = {
  entityName: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type FinalReport = {
  additionalPathways: Array<Pathway>;
  assessmentAttempt: Maybe<AssessmentAttempt>;
  currentCourses: Array<Course>;
  finishedCourses: Array<Course>;
  interestsResult: Array<InterestsResult>;
  recommendedCourses: Array<Course>;
  recommendedPathways: Array<Pathway>;
  studyPreferencesResult: Array<StudyPreferencesResult>;
  workValuesResult: Array<WorkValuesResult>;
};

/** Autogenerated input type of FindOrCreateConversationMutation */
export type FindOrCreateConversationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contextId?: InputMaybe<Scalars['ID']['input']>;
  contextType?: InputMaybe<ConversationContextTypes>;
  receiverType: ConversationParticipantTypes;
  receiverUuid: Scalars['ID']['input'];
  type: ConversationTypes;
};

/** Autogenerated return type of FindOrCreateConversationMutation. */
export type FindOrCreateConversationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  conversation: Conversation;
};

export type Form = {
  applicant: Maybe<Applicant>;
  id: Scalars['ID']['output'];
  responses: Array<FormResponse>;
  type: CommonAppFormTypes;
};

export type FormResponse = {
  filename: Maybe<Scalars['String']['output']>;
  questionId: Scalars['Int']['output'];
  response: Scalars['String']['output'];
};

export enum FormStatuses {
  /** Completed */
  COMPLETED = 'COMPLETED',
  /** Downloaded */
  DOWNLOADED = 'DOWNLOADED',
  /** In progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Not started */
  NOT_STARTED = 'NOT_STARTED',
  /** Submitted */
  SUBMITTED = 'SUBMITTED'
}

/** Autogenerated input type of GenerateAssessmentReportMutation */
export type GenerateAssessmentReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  level?: InputMaybe<AssessmentReportLevels>;
  levelUuid?: InputMaybe<Scalars['ID']['input']>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  startYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GenerateAssessmentReportMutation. */
export type GenerateAssessmentReportMutationPayload = {
  assessmentReport: Maybe<AssessmentReportFile>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of GenerateCareerReviewSurveyReportMutation */
export type GenerateCareerReviewSurveyReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  startDate?: InputMaybe<Scalars['ISO8601Date']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GenerateCareerReviewSurveyReportMutation. */
export type GenerateCareerReviewSurveyReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  report: Maybe<CareerReviewSurveyReportFile>;
};

/** Autogenerated input type of GenerateCourseReportMutation */
export type GenerateCourseReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  level: CourseReportLevels;
  levelUuid: Scalars['ID']['input'];
  startYear?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of GenerateCourseReportMutation. */
export type GenerateCourseReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  courseReport: Maybe<CourseReport>;
};

/** Autogenerated input type of GenerateGoalsPerformanceIndicatorsReportMutation */
export type GenerateGoalsPerformanceIndicatorsReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  tagIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GenerateGoalsPerformanceIndicatorsReportMutation. */
export type GenerateGoalsPerformanceIndicatorsReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  performanceIndicatorsReport: Maybe<GoalsPerformanceIndicatorsReport>;
};

/** Autogenerated input type of GenerateGoalsPlanReportMutation */
export type GenerateGoalsPlanReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  planId: Scalars['ID']['input'];
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  statementId?: InputMaybe<Scalars['ID']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GenerateGoalsPlanReportMutation. */
export type GenerateGoalsPlanReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planReport: Maybe<GoalsPlanReport>;
};

/** Autogenerated input type of GenerateOpportunityReportMutation */
export type GenerateOpportunityReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GenerateOpportunityReportMutation. */
export type GenerateOpportunityReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  opportunityReport: Maybe<OpportunityReportFile>;
};

/** Autogenerated input type of GeneratePathwayReportMutation */
export type GeneratePathwayReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of GeneratePathwayReportMutation. */
export type GeneratePathwayReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  pathwayReport: Maybe<PathwayReportFile>;
};

/** Autogenerated input type of GeneratePlanReportMutation */
export type GeneratePlanReportMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  level: PlanReportLevels;
  levelUuid: Scalars['ID']['input'];
  planId: Scalars['ID']['input'];
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of GeneratePlanReportMutation. */
export type GeneratePlanReportMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planReport: Maybe<PlanReportFile>;
};

/** Autogenerated input type of GeneratePresignedUploadUrlMutation */
export type GeneratePresignedUploadUrlMutationInput = {
  assetType: Asset;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  filename: Scalars['String']['input'];
  resourceClass: ResourceClass;
};

/** Autogenerated return type of GeneratePresignedUploadUrlMutation. */
export type GeneratePresignedUploadUrlMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  url: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type GoalPerformanceData = {
  averageScore: Scalars['Float']['output'];
  results: Array<Result>;
  tag: Tag;
};

export type GoalsPerformanceIndicatorsReport = {
  id: Scalars['ID']['output'];
  schoolYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportFileUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type GoalsPerformanceIndicatorsReportUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

export type GoalsPlanReport = {
  id: Scalars['ID']['output'];
  schoolYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportFileUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type GoalsPlanReportUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Autogenerated input type of GradeAssignmentSubmissionMutation */
export type GradeAssignmentSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  lessonId: Scalars['ID']['input'];
  results: Array<RubricGradeResultAttributes>;
  rubricId: Scalars['ID']['input'];
  submissionId: Scalars['ID']['input'];
};

/** Autogenerated return type of GradeAssignmentSubmissionMutation. */
export type GradeAssignmentSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  grade: Maybe<AssignmentSubmissionRubricGrade>;
};

/** Autogenerated input type of GradeSubmissionMutation */
export type GradeSubmissionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  lessonId: Scalars['ID']['input'];
  status: SubmissionGradeStatuses;
  submissionId: Scalars['ID']['input'];
  submissionType: SubmissionTypes;
};

/** Autogenerated return type of GradeSubmissionMutation. */
export type GradeSubmissionMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  submissionGrade: SubmissionGrade;
};

export enum GradingItemTypes {
  /** Assignment grading status */
  ASSIGNMENT = 'ASSIGNMENT',
  /** Check In Questions grading status */
  CHECK_IN_QUESTION = 'CHECK_IN_QUESTION'
}

/** Attributes for filtering students who need grading */
export type GradingNeededFilter = {
  courseId?: InputMaybe<Scalars['ID']['input']>;
  itemId: Scalars['ID']['input'];
  itemType: GradingItemTypes;
};

export enum GradingStatuses {
  /** Submissions that have already been graded */
  ALREADY_GRADED = 'ALREADY_GRADED',
  /** Submissions that have not yet been submitted */
  NOT_YET_SUBMITTED = 'NOT_YET_SUBMITTED',
  /** Submissions that are waiting for grading */
  WAITING_FOR_GRADING = 'WAITING_FOR_GRADING'
}

export type HierarchyMetrics = {
  entitiesCount: Scalars['Int']['output'];
  schoolClassesCount: Scalars['Int']['output'];
  studentsCount: Scalars['Int']['output'];
  teachersCount: Scalars['Int']['output'];
};

/** Institution */
export type Institution = {
  actMax: Maybe<Scalars['Int']['output']>;
  actMin: Maybe<Scalars['Int']['output']>;
  address: InstitutionAddress;
  admissionRate: Maybe<Scalars['Float']['output']>;
  commonAppApplicationUrl: Maybe<Scalars['String']['output']>;
  commonAppEnabled: Scalars['Boolean']['output'];
  contact: InstitutionContact;
  cost: Maybe<Scalars['Int']['output']>;
  dates: Array<InstitutionDate>;
  degrees: Array<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  isIpeds: Scalars['Boolean']['output'];
  maxTeacherEval: Maybe<Scalars['Int']['output']>;
  minTeacherEval: Maybe<Scalars['Int']['output']>;
  name: Scalars['String']['output'];
  programs: ProgramPage;
  satMathMax: Maybe<Scalars['Int']['output']>;
  satMathMin: Maybe<Scalars['Int']['output']>;
  satReadingMax: Maybe<Scalars['Int']['output']>;
  satReadingMin: Maybe<Scalars['Int']['output']>;
  sizeDescription: Maybe<InstitutionSizeDescriptions>;
  sizeType: Maybe<InstitutionSizeTypes>;
  studentFacultyRatio: Maybe<Scalars['Int']['output']>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  type: Maybe<Scalars['String']['output']>;
};


/** Institution */
export type InstitutionProgramsArgs = {
  filter: InputMaybe<ProgramFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Institution address */
export type InstitutionAddress = {
  area: InstitutionArea;
  city: Maybe<Scalars['String']['output']>;
  state: Maybe<Scalars['String']['output']>;
  stateCode: Maybe<Scalars['String']['output']>;
  street: Maybe<Scalars['String']['output']>;
  zip: Maybe<Scalars['String']['output']>;
};

export enum InstitutionApplicationStatus {
  /** Application to institution completed */
  COMPLETED = 'COMPLETED',
  /** Application to institution in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Application to institution not started yet */
  NOT_STARTED = 'NOT_STARTED'
}

export type InstitutionArea = {
  kind: Maybe<Scalars['String']['output']>;
  type: Maybe<Scalars['String']['output']>;
};

/** Institution contact */
export type InstitutionContact = {
  phone: Maybe<Scalars['String']['output']>;
  urlAdmissions: Maybe<Scalars['String']['output']>;
  urlApplications: Maybe<Scalars['String']['output']>;
  urlFinancialAid: Maybe<Scalars['String']['output']>;
  urlGeneral: Maybe<Scalars['String']['output']>;
  urlNetPriceCalculator: Maybe<Scalars['String']['output']>;
};

export type InstitutionDate = {
  deadlineDate: Scalars['ISO8601Date']['output'];
  decisionType: Scalars['String']['output'];
  term: Maybe<Scalars['String']['output']>;
};

export type InstitutionPage = {
  nodes: Array<Institution>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum InstitutionSizeDescriptions {
  /** Institutions of 500-1999 undergraduates */
  FROM_500_TO_1999 = 'FROM_500_TO_1999',
  /** Institutions of 1000-2999 undergraduates */
  FROM_1000_TO_2999 = 'FROM_1000_TO_2999',
  /** Institutions of 2000-4999 undergraduates */
  FROM_2000_TO_4999 = 'FROM_2000_TO_4999',
  /** Institutions of 3000-9999 undergraduates */
  FROM_3000_TO_9999 = 'FROM_3000_TO_9999',
  /** Institutions of 5000-9999 undergraduates */
  FROM_5000_TO_9999 = 'FROM_5000_TO_9999',
  /** Institutions of less than 500 undergraduates */
  LESS_THAN_500 = 'LESS_THAN_500',
  /** Institutions of less than 1000 undergraduates */
  LESS_THAN_1000 = 'LESS_THAN_1000',
  /** Institutions of more than 10000 undergraduates */
  MORE_THAN_10000 = 'MORE_THAN_10000'
}

export enum InstitutionSizeTypes {
  /** Institutions of large size */
  LARGE = 'LARGE',
  /** Institutions of medium size */
  MEDIUM = 'MEDIUM',
  /** Institutions of small size */
  SMALL = 'SMALL',
  /** Institutions of very large size */
  VERY_LARGE = 'VERY_LARGE',
  /** Institutions of very small size */
  VERY_SMALL = 'VERY_SMALL'
}

export enum InstitutionTypes {
  /** Private for-profit, 2-year */
  PRV_FP_2 = 'PRV_FP_2',
  /** Private for-profit, 4-year or above */
  PRV_FP_4 = 'PRV_FP_4',
  /** Private for-profit, less-than 2-year */
  PRV_FP_LT2 = 'PRV_FP_LT2',
  /** Private not-for-profit, 2-year */
  PRV_NFP_2 = 'PRV_NFP_2',
  /** Private not-for-profit, 4-year or above */
  PRV_NFP_4 = 'PRV_NFP_4',
  /** Private not-for-profit, less-than 2-year */
  PRV_NFP_LT2 = 'PRV_NFP_LT2',
  /** Public, 2-year */
  PUB_2 = 'PUB_2',
  /** Public, 4-year or above */
  PUB_4 = 'PUB_4',
  /** Public, less-than 2-year */
  PUB_LT2 = 'PUB_LT2'
}

export type InterestsCategoryAverageCheckedScore = {
  category: Scalars['String']['output'];
  score: Scalars['Float']['output'];
};

export type InterestsResult = {
  interest: Scalars['String']['output'];
  score: Scalars['Int']['output'];
};

export type InvalidResponse = {
  messages: Array<Scalars['String']['output']>;
  questionId: Scalars['ID']['output'];
};

export type Lesson = ConversationContext & StudentActivityContext & StudentBadgeResource & {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  assignments: Array<Assignment>;
  attachments: Array<Attachment>;
  badges: Array<Badge>;
  careerReviewSurvey: Maybe<CareerReviewSurvey>;
  checkInGroups: Array<CheckInGroup>;
  checkInQuestions: Array<CheckInQuestion>;
  courses: Array<Course>;
  description: Maybe<LessonDescription>;
  displayName: Scalars['String']['output'];
  extensionFields: Array<ExtensionField>;
  externalPresentations: Array<ExternalPresentation>;
  hasPresentation: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  isCopy: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  researchLinks: Array<ResearchLink>;
  step: Maybe<Scalars['Int']['output']>;
  texts: Array<Text>;
  thumbnailUrl: Scalars['String']['output'];
  type: Scalars['String']['output'];
  videos: Array<Video>;
  vocabularies: Array<Vocabulary>;
};


export type LessonAssignmentsArgs = {
  scope: InputMaybe<ArchivableStatus>;
};


export type LessonAttachmentsArgs = {
  scope: InputMaybe<ArchivableStatus>;
};


export type LessonCheckInQuestionsArgs = {
  answeredOnly: InputMaybe<Scalars['Boolean']['input']>;
};


export type LessonCoursesArgs = {
  scope: InputMaybe<ArchivableStatus>;
};


export type LessonExternalPresentationsArgs = {
  scope: InputMaybe<ArchivableStatus>;
};


export type LessonResearchLinksArgs = {
  scope: InputMaybe<ArchivableStatus>;
};


export type LessonTextsArgs = {
  scope: InputMaybe<ArchivableStatus>;
};


export type LessonVideosArgs = {
  scope: InputMaybe<ArchivableStatus>;
};


export type LessonVocabulariesArgs = {
  scope: InputMaybe<ArchivableStatus>;
};

export type LessonDescription = {
  audience: Maybe<Scalars['String']['output']>;
  goal: Maybe<Scalars['String']['output']>;
  introduction: Maybe<Scalars['String']['output']>;
  role: Maybe<Scalars['String']['output']>;
  situation: Maybe<Scalars['String']['output']>;
};

/** Attributes for creating and updating a lesson description */
export type LessonDescriptionAttributes = {
  audience?: InputMaybe<Scalars['String']['input']>;
  goal?: InputMaybe<Scalars['String']['input']>;
  introduction?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  situation?: InputMaybe<Scalars['String']['input']>;
};

/** Attributes for filtering Lessons */
export type LessonFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<Scalars['String']['input']>;
};

export type LessonItem = {
  completed: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  step: Scalars['Int']['output'];
  type: Scalars['String']['output'];
};

/** Attributes for creating and updating lesson items */
export type LessonItemAttributes = {
  itemId: Scalars['ID']['input'];
  itemType: LessonItemTypes;
  step: Scalars['Int']['input'];
};

export enum LessonItemTypes {
  /** Assignment lesson item type */
  ASSIGNMENT = 'ASSIGNMENT',
  /** Attachment lesson item type */
  ATTACHMENT = 'ATTACHMENT',
  /** ExternalPresentation lesson item type */
  PRESENTATION = 'PRESENTATION',
  /** Research link lesson item type */
  RESEARCH_LINK = 'RESEARCH_LINK',
  /** Text lesson item type */
  TEXT = 'TEXT',
  /** Video lesson item type */
  VIDEO = 'VIDEO',
  /** Vocabulary lesson item type */
  VOCABULARY = 'VOCABULARY'
}

export type LessonPage = {
  nodes: Array<Lesson>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum LessonTypes {
  /** Career cluster lesson type */
  CAREER_CLUSTER = 'CAREER_CLUSTER',
  /** Career readiness lesson type */
  CAREER_READINESS = 'CAREER_READINESS',
  /** Career review survey lesson type */
  CAREER_REVIEW_SURVEY = 'CAREER_REVIEW_SURVEY',
  /** Dig deeper into career lesson type */
  DIG_DEEPER_INTO_CAREER = 'DIG_DEEPER_INTO_CAREER',
  /** Experience opportunity lesson type */
  EXPERIENCE_OPPORTUNITY = 'EXPERIENCE_OPPORTUNITY',
  /** Generic lesson type */
  GENERIC = 'GENERIC',
  /** Pathway lesson type */
  PATHWAY = 'PATHWAY',
  /** Project lesson type */
  PROJECT = 'PROJECT',
  /** Virtual internship lesson type */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

/** Autogenerated input type of LockStatementMutation */
export type LockStatementMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  statementId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of LockStatementMutation. */
export type LockStatementMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  student: Maybe<Student>;
};

export type Message = {
  author: ConversationParticipant;
  body: Scalars['String']['output'];
  conversation: Conversation;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
};

/** The connection type for Message. */
export type MessageConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<MessageEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<Message>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type MessageEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<Message>;
};

/** All mutations for user */
export type MutationUser = {
  /** Mutation for aligning plan group statements to rubric heading */
  alignPlanGroupStatementToRubricHeading: Maybe<AlignPlanGroupStatementToRubricHeadingMutationPayload>;
  /** Mutation for answering a plan group statement question */
  answerPlanGroupStatementQuestion: Maybe<AnswerPlanGroupStatementQuestionMutationPayload>;
  /** Mutation for archiving an Assignment */
  archiveAssignment: Maybe<ArchiveAssignmentMutationPayload>;
  /** Mutation for archiving an Attachment */
  archiveAttachment: Maybe<ArchiveAttachmentMutationPayload>;
  /** Mutation for archiving an AttachmentFile */
  archiveAttachmentFile: Maybe<ArchiveAttachmentFileMutationPayload>;
  /** Mutation for archiving a Badge */
  archiveBadge: Maybe<ArchiveBadgeMutationPayload>;
  /** Mutation for archiving a Catalog */
  archiveCatalog: Maybe<ArchiveCatalogMutationPayload>;
  /** Mutation for archiving a CheckInGroup */
  archiveCheckInGroup: Maybe<ArchiveCheckInGroupMutationPayload>;
  /** Mutation for archiving a CheckInQuestion */
  archiveCheckInQuestion: Maybe<ArchiveCheckInQuestionMutationPayload>;
  /** Mutation for archiving a course */
  archiveCourse: Maybe<ArchiveCourseMutationPayload>;
  /** Mutation for archiving a ExtensionField */
  archiveExtensionField: Maybe<ArchiveExtensionFieldMutationPayload>;
  /** Mutation for archiving an ExtensionFieldFile */
  archiveExtensionFieldFile: Maybe<ArchiveExtensionFieldFileMutationPayload>;
  /** Mutation for archiving a ExternalPresentation */
  archiveExternalPresentation: Maybe<ArchiveExternalPresentationMutationPayload>;
  /** Mutation for archiving a lesson */
  archiveLesson: Maybe<ArchiveLessonMutationPayload>;
  /** Mutation for archiving an opportunity */
  archiveOpportunity: Maybe<ArchiveOpportunityMutationPayload>;
  /** Mutation for archiving a Partner */
  archivePartner: Maybe<ArchivePartnerMutationPayload>;
  /** Mutation for archiving a Plan */
  archivePlan: Maybe<ArchivePlanMutationPayload>;
  /** Mutation for archiving a PlanGroup */
  archivePlanGroup: Maybe<ArchivePlanGroupMutationPayload>;
  /** Mutation for archiving a PlanGroupStatement */
  archivePlanGroupStatement: Maybe<ArchivePlanGroupStatementMutationPayload>;
  /** Mutation for archiving a Presentation */
  archivePresentation: Maybe<ArchivePresentationMutationPayload>;
  /** Mutation for archiving an Product */
  archiveProduct: Maybe<ArchiveProductMutationPayload>;
  /** Mutation for archiving a research link */
  archiveResearchLink: Maybe<ArchiveResearchLinkMutationPayload>;
  /** Mutation for archiving a Rubric */
  archiveRubric: Maybe<ArchiveRubricMutationPayload>;
  /** Mutation for archiving a Slide */
  archiveSlide: Maybe<ArchiveSlideMutationPayload>;
  /** Mutation for archiving a SlideBackgroundImage */
  archiveSlideBackgroundImage: Maybe<ArchiveSlideBackgroundImageMutationPayload>;
  /** Mutation for archiving a SlideImage */
  archiveSlideImage: Maybe<ArchiveSlideImageMutationPayload>;
  /** Mutation for archiving a SlideVideo */
  archiveSlideVideo: Maybe<ArchiveSlideVideoMutationPayload>;
  /** Mutation for archiving a Task */
  archiveTask: Maybe<ArchiveTaskMutationPayload>;
  /** Mutation for archiving a text */
  archiveText: Maybe<ArchiveTextMutationPayload>;
  /** Mutation for archiving a Track */
  archiveTrack: Maybe<ArchiveTrackMutationPayload>;
  /** Mutation for archiving an Unit */
  archiveUnit: Maybe<ArchiveUnitMutationPayload>;
  /** Mutation for archiving a Video */
  archiveVideo: Maybe<ArchiveVideoMutationPayload>;
  /** Mutation for archiving a virtual internship */
  archiveVirtualInternship: Maybe<ArchiveVirtualInternshipMutationPayload>;
  /** Mutation for archiving a Vocabulary */
  archiveVocabulary: Maybe<ArchiveVocabularyMutationPayload>;
  /**
   * Mutation for assigning Catalogs to Entity
   * @deprecated Use SetEntityCatalogsMutation instead
   */
  assignCatalogsToEntity: Maybe<AssignCatalogsToEntityMutationPayload>;
  /** Mutation for assigning ExtensionField to Entity */
  assignExtensionFieldToEntity: Maybe<AssignExtensionFieldToEntityMutationPayload>;
  /** Mutation for assigning Plan to Entity */
  assignPlanToEntity: Maybe<AssignPlanToEntityMutationPayload>;
  /** Mutation for assigning Rubric to Assignment */
  assignRubricToAssignment: Maybe<AssignRubricToAssignmentMutationPayload>;
  /** Mutation for assigning Rubric to Product */
  assignRubricToProduct: Maybe<AssignRubricToProductMutationPayload>;
  /** Mutation for assigning SchoolClass students to a Course */
  assignSchoolClassToCourse: Maybe<AssignSchoolClassToCourseMutationPayload>;
  /** Mutation for assigning StandardSet to Entity */
  assignStandardSetToEntity: Maybe<AssignStandardSetToEntityMutationPayload>;
  /** Mutation for assigning Student to Course */
  assignStudentToCourse: Maybe<AssignStudentToCourseMutationPayload>;
  /** Assign students to counselor */
  assignStudentsToCounselor: Maybe<AssignStudentsToCounselorMutationPayload>;
  /** Mutation for clearing Rails cache */
  clearCache: Maybe<ClearCacheMutationPayload>;
  /** Mutation for creating Announcement */
  createAnnouncement: Maybe<CreateAnnouncementMutationPayload>;
  /** Mutation for creating a Assignment */
  createAssignment: Maybe<CreateAssignmentMutationPayload>;
  /** Mutation for creating a Attachment */
  createAttachment: Maybe<CreateAttachmentMutationPayload>;
  /** Mutation for creating a AttachmentFile */
  createAttachmentFile: Maybe<CreateAttachmentFileMutationPayload>;
  /** Mutation for creating a Badge */
  createBadge: Maybe<CreateBadgeMutationPayload>;
  /** Mutation for creating a Catalog */
  createCatalog: Maybe<CreateCatalogMutationPayload>;
  /** Mutation for creating a CheckInGroup */
  createCheckInGroup: Maybe<CreateCheckInGroupMutationPayload>;
  /** Mutation for creating a CheckInQuestion */
  createCheckInQuestion: Maybe<CreateCheckInQuestionMutationPayload>;
  /** Mutation for creating a course */
  createCourse: Maybe<CreateCourseMutationPayload>;
  /** Mutation for creating a evaluation */
  createEvaluation: Maybe<CreateEvaluationMutationPayload>;
  /** Mutation for creating a EvaluationComment */
  createEvaluationComment: Maybe<CreateEvaluationCommentMutationPayload>;
  /** Mutation for creating a ExtensionField */
  createExtensionField: Maybe<CreateExtensionFieldMutationPayload>;
  /** Mutation for creating a ExtensionFieldFile */
  createExtensionFieldFile: Maybe<CreateExtensionFieldFileMutationPayload>;
  /** Mutation for creating a ExternalPresentation */
  createExternalPresentation: Maybe<CreateExternalPresentationMutationPayload>;
  /** Mutation for creating a lesson */
  createLesson: Maybe<CreateLessonMutationPayload>;
  /** Mutation for creating an opportunity */
  createOpportunity: Maybe<CreateOpportunityMutationPayload>;
  /** Mutation for creating an partner */
  createPartner: Maybe<CreatePartnerMutationPayload>;
  /** Mutation for creating a PartnerFile */
  createPartnerFile: Maybe<CreatePartnerFileMutationPayload>;
  /** Mutation for creating a Plan */
  createPlan: Maybe<CreatePlanMutationPayload>;
  /** Mutation for creating a PlanGroup */
  createPlanGroup: Maybe<CreatePlanGroupMutationPayload>;
  /** Mutation for creating a PlanGroupStatement */
  createPlanGroupStatement: Maybe<CreatePlanGroupStatementMutationPayload>;
  /** Mutation for creating a plan group statement evidence */
  createPlanGroupStatementEvidence: Maybe<CreatePlanGroupStatementEvidenceMutationPayload>;
  /** Mutation for creating a Presentation */
  createPresentation: Maybe<CreatePresentationMutationPayload>;
  /** Mutation for creating a Product */
  createProduct: Maybe<CreateProductMutationPayload>;
  /** Mutation for creating a PublicResource */
  createPublicResource: Maybe<CreatePublicResourceMutationPayload>;
  /** Mutation for creating a Research Link */
  createResearchLink: Maybe<CreateResearchLinkMutationPayload>;
  /** Mutation for creating a Rubric */
  createRubric: Maybe<CreateRubricMutationPayload>;
  /** Mutation for creating a RubricCriteria */
  createRubricCriteria: Maybe<CreateRubricCriteriaMutationPayload>;
  /** Mutation for creating a RubricCriteriaLabel */
  createRubricCriteriaLabel: Maybe<CreateRubricCriteriaLabelMutationPayload>;
  /** Mutation for creating a RubricHeading */
  createRubricHeading: Maybe<CreateRubricHeadingMutationPayload>;
  /** Mutation for creating a shared session token */
  createSharedSessionToken: Maybe<CreateSharedSessionTokenMutationPayload>;
  createSlide: Maybe<CreateSlideMutationPayload>;
  /** Mutation for creating a SlideBackgroundImage */
  createSlideBackgroundImage: Maybe<CreateSlideBackgroundImageMutationPayload>;
  /** Mutation for creating a SlideImage */
  createSlideImage: Maybe<CreateSlideImageMutationPayload>;
  /** Mutation for creating a SlideVideo */
  createSlideVideo: Maybe<CreateSlideVideoMutationPayload>;
  /** Mutation for creating a Tag */
  createTag: Maybe<CreateTagMutationPayload>;
  /** Mutation for creating a task */
  createTask: Maybe<CreateTaskMutationPayload>;
  /** Mutation for creating a TaskFile */
  createTaskFile: Maybe<CreateTaskFileMutationPayload>;
  /** Mutation for creating a Text */
  createText: Maybe<CreateTextMutationPayload>;
  /** Mutation for creating a Track */
  createTrack: Maybe<CreateTrackMutationPayload>;
  /** Mutation for creating an Unit */
  createUnit: Maybe<CreateUnitMutationPayload>;
  /** Mutation for creating a Video */
  createVideo: Maybe<CreateVideoMutationPayload>;
  /** Mutation for creating a virtual internship */
  createVirtualInternship: Maybe<CreateVirtualInternshipMutationPayload>;
  /** Mutation for creating a Vocabulary */
  createVocabulary: Maybe<CreateVocabularyMutationPayload>;
  /** Mutation for deleting a PartnerFile */
  deletePartnerFile: Maybe<DeletePartnerFileMutationPayload>;
  /** Mutation for deleting a plan group statement evidence */
  deletePlanGroupStatementEvidence: Maybe<DeletePlanGroupStatementEvidenceMutationPayload>;
  /** Mutation for deleting Public Resources asynchronously */
  deletePublicResources: Maybe<DeletePublicResourcesMutationPayload>;
  /** Mutation for deleting a Rubric CriteriaLabel */
  deleteRubricCriteriaLabel: Maybe<DeleteRubricCriteriaLabelMutationPayload>;
  /** Mutation for deleting a Rubric Heading */
  deleteRubricHeading: Maybe<DeleteRubricHeadingMutationPayload>;
  /** Mutation for deleting a Tag */
  deleteTag: Maybe<DeleteTagMutationPayload>;
  /** Mutation for deleting a Task File */
  deleteTaskFile: Maybe<DeleteTaskFileMutationPayload>;
  /** Mutation for creating a deep copy of Course and its related resources */
  duplicateCourse: Maybe<DuplicateCourseMutationPayload>;
  /** Mutation for creating a duplicate of Rubric */
  duplicateRubric: Maybe<DuplicateRubricMutationPayload>;
  /** Mutation for creating a deep copy of Task and its related resources */
  duplicateTask: Maybe<DuplicateTaskMutationPayload>;
  /** Mutation for evaluating a student */
  evaluateStudent: Maybe<EvaluateStudentMutationPayload>;
  /** Mutation for finding or creating Conversation */
  findOrCreateConversation: Maybe<FindOrCreateConversationMutationPayload>;
  /** Mutation for generating Assessment Report */
  generateAssessmentReport: Maybe<GenerateAssessmentReportMutationPayload>;
  /** Mutation for generating CareerReviewSurvey Report */
  generateCareerReviewSurveyReport: Maybe<GenerateCareerReviewSurveyReportMutationPayload>;
  /** Mutation for generating Course Report */
  generateCourseReport: Maybe<GenerateCourseReportMutationPayload>;
  /** Mutation for generating Goals Performance Indicators Report */
  generateGoalsPerformanceIndicatorsReport: Maybe<GenerateGoalsPerformanceIndicatorsReportMutationPayload>;
  /** Mutation for generating Goals Plan Report */
  generateGoalsPlanReport: Maybe<GenerateGoalsPlanReportMutationPayload>;
  /** Mutation for generating Opportunity Report */
  generateOpportunityReport: Maybe<GenerateOpportunityReportMutationPayload>;
  /** Mutation for generating Pathway Report */
  generatePathwayReport: Maybe<GeneratePathwayReportMutationPayload>;
  /** Mutation for generating Plan Report */
  generatePlanReport: Maybe<GeneratePlanReportMutationPayload>;
  /** Mutation for creating a presigned upload URL */
  generatePresignedUploadUrl: Maybe<GeneratePresignedUploadUrlMutationPayload>;
  /** Mutation for grading student's assignment submission */
  gradeAssignmentSubmission: Maybe<GradeAssignmentSubmissionMutationPayload>;
  /** Mutation for grading student's submission */
  gradeSubmission: Maybe<GradeSubmissionMutationPayload>;
  /** Mutation for locking a statement for student */
  lockStatement: Maybe<LockStatementMutationPayload>;
  performContractsSync: Maybe<PerformContractsSyncMutationPayload>;
  performFullContractSync: Maybe<PerformFullContractSyncMutationPayload>;
  /** Mutation for recommending an opportunity to students */
  recommendOpportunity: Maybe<RecommendOpportunityMutationPayload>;
  /** Mutation for reindexing Tasks in Algolia */
  reindexTasks: Maybe<ReindexTasksMutationPayload>;
  /** Mutation for resetting post secondary applications setting for student */
  resetPostSecondaryApplicationsForStudent: Maybe<ResetPostSecondaryApplicationsForStudentMutationPayload>;
  /** Mutation for restoring a Catalog */
  restoreCatalog: Maybe<RestoreCatalogMutationPayload>;
  /** Mutation for restoring a ExtensionField */
  restoreExtensionField: Maybe<RestoreExtensionFieldMutationPayload>;
  /** Mutation for restoring a Partner */
  restorePartner: Maybe<RestorePartnerMutationPayload>;
  /** Mutation for restoring a Track */
  restoreTrack: Maybe<RestoreTrackMutationPayload>;
  /** Mutation for restoring a Unit */
  restoreUnit: Maybe<RestoreUnitMutationPayload>;
  /** Saves responses of a CommonApp form */
  saveCommonAppFormResponses: Maybe<SaveCommonAppFormResponsesMutationPayload>;
  /** Mutation for sending Message */
  sendMessage: Maybe<SendMessageMutationPayload>;
  /** Mutation for setting Catalogs on Entity and its hierarchy */
  setEntityCatalogs: Maybe<SetEntityCatalogsMutationPayload>;
  /** Mutation for setting available report types on Entity and its hierarchy */
  setEntityReportTypes: Maybe<SetEntityReportTypesMutationPayload>;
  /** Mutation for setting Tags on Entity and its hierarchy */
  setEntityTags: Maybe<SetEntityTagsMutationPayload>;
  /** Mutation for sharing a resource */
  shareResource: Maybe<ShareResourceMutationPayload>;
  /** Submit responses of a CommonApp form */
  submitCommonAppFormResponses: Maybe<SubmitCommonAppFormResponsesMutationPayload>;
  syncCommonAppData: Maybe<SyncCommonAppDataMutationPayload>;
  /** Mutation for syncing Standard Sets with EdGate API */
  syncStandardSets: Maybe<SyncStandardSetsMutationPayload>;
  /** Mutation for setting available report types on Entity and its hierarchy */
  toggleEntityReportTypeAvailability: Maybe<ToggleEntityReportTypeAvailabilityMutationPayload>;
  /** Toggle college applications */
  togglePostSecondaryApplicationsForStudents: Maybe<TogglePostSecondaryApplicationsForStudentsMutationPayload>;
  /**
   * Mutation for unassigning Catalog from Entity
   * @deprecated Use SetEntityCatalogsMutation instead
   */
  unassignCatalogFromEntity: Maybe<UnassignCatalogFromEntityMutationPayload>;
  /** Mutation for unassigning ExtensionField from Entity */
  unassignExtensionFieldFromEntity: Maybe<UnassignExtensionFieldFromEntityMutationPayload>;
  /** Mutation for unassigning Plan from Entity */
  unassignPlanFromEntity: Maybe<UnassignPlanFromEntityMutationPayload>;
  /** Mutation for unassigning Rubric from Assignment */
  unassignRubricFromAssignment: Maybe<UnassignRubricFromAssignmentMutationPayload>;
  /** Mutation for unassigning Rubric from Product */
  unassignRubricFromProduct: Maybe<UnassignRubricFromProductMutationPayload>;
  /** Mutation for unassigning SchoolClass students from a Course */
  unassignSchoolClassFromCourse: Maybe<UnassignSchoolClassFromCourseMutationPayload>;
  /** Mutation for unassigning StandardSet from Entity */
  unassignStandardSetFromEntity: Maybe<UnassignStandardSetFromEntityMutationPayload>;
  /** Mutation for unasigning student from a StudentCourse */
  unassignStudentFromCourse: Maybe<UnassignStudentFromCourseMutationPayload>;
  /** Mutation for unlocking a statement for student */
  unlockStatement: Maybe<UnlockStatementMutationPayload>;
  /** Unsubmit responses of a CommonApp form */
  unsubmitCommonAppFormResponses: Maybe<UnsubmitCommonAppFormResponsesMutationPayload>;
  /** Mutation for updating a Assignment */
  updateAssignment: Maybe<UpdateAssignmentMutationPayload>;
  /** Mutation for updating a Attachment */
  updateAttachment: Maybe<UpdateAttachmentMutationPayload>;
  /** Mutation for updating a Badge */
  updateBadge: Maybe<UpdateBadgeMutationPayload>;
  /** Mutation for updating a Catalog */
  updateCatalog: Maybe<UpdateCatalogMutationPayload>;
  /** Mutation for updating a CheckInGroup */
  updateCheckInGroup: Maybe<UpdateCheckInGroupMutationPayload>;
  /** Mutation for updating a CheckInQuestion */
  updateCheckInQuestion: Maybe<UpdateCheckInQuestionMutationPayload>;
  /** Mutation for updating a contract */
  updateContract: Maybe<UpdateContractMutationPayload>;
  /** Mutation for updating a course */
  updateCourse: Maybe<UpdateCourseMutationPayload>;
  /** Mutation for updating an Entity */
  updateEntity: Maybe<UpdateEntityMutationPayload>;
  /** Mutation for updating an Entity catalogs */
  updateEntityCatalogs: Maybe<UpdateEntityCatalogsMutationPayload>;
  /** Mutation for updating an Entity plans */
  updateEntityPlans: Maybe<UpdateEntityPlansMutationPayload>;
  /** Mutation for updating an Entity settings */
  updateEntitySettings: Maybe<UpdateEntitySettingsMutationPayload>;
  /** Mutation for updating a ExtensionField */
  updateExtensionField: Maybe<UpdateExtensionFieldMutationPayload>;
  /** Mutation for updating a ExternalPresentation */
  updateExternalPresentation: Maybe<UpdateExternalPresentationMutationPayload>;
  /** Mutation for updating a lesson */
  updateLesson: Maybe<UpdateLessonMutationPayload>;
  /** Mutation for updating an opportunity */
  updateOpportunity: Maybe<UpdateOpportunityMutationPayload>;
  /** Mutation for updating a opportunity application */
  updateOpportunityApplication: Maybe<UpdateOpportunityApplicationMutationPayload>;
  /** Mutation for updating a Partner */
  updatePartner: Maybe<UpdatePartnerMutationPayload>;
  /** Mutation for updating a Plan */
  updatePlan: Maybe<UpdatePlanMutationPayload>;
  /** Mutation for updating a PlanGroup */
  updatePlanGroup: Maybe<UpdatePlanGroupMutationPayload>;
  /** Mutation for updating a PlanGroupStatement */
  updatePlanGroupStatement: Maybe<UpdatePlanGroupStatementMutationPayload>;
  /** Mutation for updating a Presentation */
  updatePresentation: Maybe<UpdatePresentationMutationPayload>;
  /** Mutation for updating a Product */
  updateProduct: Maybe<UpdateProductMutationPayload>;
  /** Mutation for updating a Research Link */
  updateResearchLink: Maybe<UpdateResearchLinkMutationPayload>;
  /** Mutation for updating a Rubric */
  updateRubric: Maybe<UpdateRubricMutationPayload>;
  /** Mutation for updating a RubricCriteria */
  updateRubricCriteria: Maybe<UpdateRubricCriteriaMutationPayload>;
  /** Mutation for updating a RubricCriteriaLabel */
  updateRubricCriteriaLabel: Maybe<UpdateRubricCriteriaLabelMutationPayload>;
  /** Mutation for updating a RubricHeading */
  updateRubricHeading: Maybe<UpdateRubricHeadingMutationPayload>;
  /** Mutation for updating SchoolClass settings */
  updateSchoolClassSettings: Maybe<UpdateSchoolClassSettingsMutationPayload>;
  /** Mutation for updating a Slide */
  updateSlide: Maybe<UpdateSlideMutationPayload>;
  /** Mutation for updating a SlideImage */
  updateSlideImage: Maybe<UpdateSlideImageMutationPayload>;
  /** Mutation for updating a SlideVideo */
  updateSlideVideo: Maybe<UpdateSlideVideoMutationPayload>;
  /** Mutation for updating a StandardSet */
  updateStandardSet: Maybe<UpdateStandardSetMutationPayload>;
  /** Mutation for updating Student settings */
  updateStudentSettings: Maybe<UpdateStudentSettingsMutationPayload>;
  /** Mutation for updating a Tag */
  updateTag: Maybe<UpdateTagMutationPayload>;
  /** Mutation for updating a Task */
  updateTask: Maybe<UpdateTaskMutationPayload>;
  /** Mutation for updating a TaskFile */
  updateTaskFile: Maybe<UpdateTaskFileMutationPayload>;
  /** Mutation for updating a Text */
  updateText: Maybe<UpdateTextMutationPayload>;
  /** Mutation for updating a Track */
  updateTrack: Maybe<UpdateTrackMutationPayload>;
  /** Mutation for updating an Unit */
  updateUnit: Maybe<UpdateUnitMutationPayload>;
  /** Mutation for updating an User */
  updateUser: Maybe<UpdateUserMutationPayload>;
  /** Mutation for updating a Video */
  updateVideo: Maybe<UpdateVideoMutationPayload>;
  /** Mutation for updating a Virtual Internship */
  updateVirtualInternship: Maybe<UpdateVirtualInternshipMutationPayload>;
  /** Mutation for updating a Vocabulary */
  updateVocabulary: Maybe<UpdateVocabularyMutationPayload>;
};


/** All mutations for user */
export type MutationUserAlignPlanGroupStatementToRubricHeadingArgs = {
  input: AlignPlanGroupStatementToRubricHeadingMutationInput;
};


/** All mutations for user */
export type MutationUserAnswerPlanGroupStatementQuestionArgs = {
  input: AnswerPlanGroupStatementQuestionMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveAssignmentArgs = {
  input: ArchiveAssignmentMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveAttachmentArgs = {
  input: ArchiveAttachmentMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveAttachmentFileArgs = {
  input: ArchiveAttachmentFileMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveBadgeArgs = {
  input: ArchiveBadgeMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveCatalogArgs = {
  input: ArchiveCatalogMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveCheckInGroupArgs = {
  input: ArchiveCheckInGroupMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveCheckInQuestionArgs = {
  input: ArchiveCheckInQuestionMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveCourseArgs = {
  input: ArchiveCourseMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveExtensionFieldArgs = {
  input: ArchiveExtensionFieldMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveExtensionFieldFileArgs = {
  input: ArchiveExtensionFieldFileMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveExternalPresentationArgs = {
  input: ArchiveExternalPresentationMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveLessonArgs = {
  input: ArchiveLessonMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveOpportunityArgs = {
  input: ArchiveOpportunityMutationInput;
};


/** All mutations for user */
export type MutationUserArchivePartnerArgs = {
  input: ArchivePartnerMutationInput;
};


/** All mutations for user */
export type MutationUserArchivePlanArgs = {
  input: ArchivePlanMutationInput;
};


/** All mutations for user */
export type MutationUserArchivePlanGroupArgs = {
  input: ArchivePlanGroupMutationInput;
};


/** All mutations for user */
export type MutationUserArchivePlanGroupStatementArgs = {
  input: ArchivePlanGroupStatementMutationInput;
};


/** All mutations for user */
export type MutationUserArchivePresentationArgs = {
  input: ArchivePresentationMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveProductArgs = {
  input: ArchiveProductMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveResearchLinkArgs = {
  input: ArchiveResearchLinkMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveRubricArgs = {
  input: ArchiveRubricMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveSlideArgs = {
  input: ArchiveSlideMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveSlideBackgroundImageArgs = {
  input: ArchiveSlideBackgroundImageMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveSlideImageArgs = {
  input: ArchiveSlideImageMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveSlideVideoArgs = {
  input: ArchiveSlideVideoMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveTaskArgs = {
  input: ArchiveTaskMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveTextArgs = {
  input: ArchiveTextMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveTrackArgs = {
  input: ArchiveTrackMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveUnitArgs = {
  input: ArchiveUnitMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveVideoArgs = {
  input: ArchiveVideoMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveVirtualInternshipArgs = {
  input: ArchiveVirtualInternshipMutationInput;
};


/** All mutations for user */
export type MutationUserArchiveVocabularyArgs = {
  input: ArchiveVocabularyMutationInput;
};


/** All mutations for user */
export type MutationUserAssignCatalogsToEntityArgs = {
  input: AssignCatalogsToEntityMutationInput;
};


/** All mutations for user */
export type MutationUserAssignExtensionFieldToEntityArgs = {
  input: AssignExtensionFieldToEntityMutationInput;
};


/** All mutations for user */
export type MutationUserAssignPlanToEntityArgs = {
  input: AssignPlanToEntityMutationInput;
};


/** All mutations for user */
export type MutationUserAssignRubricToAssignmentArgs = {
  input: AssignRubricToAssignmentMutationInput;
};


/** All mutations for user */
export type MutationUserAssignRubricToProductArgs = {
  input: AssignRubricToProductMutationInput;
};


/** All mutations for user */
export type MutationUserAssignSchoolClassToCourseArgs = {
  input: AssignSchoolClassToCourseMutationInput;
};


/** All mutations for user */
export type MutationUserAssignStandardSetToEntityArgs = {
  input: AssignStandardSetToEntityMutationInput;
};


/** All mutations for user */
export type MutationUserAssignStudentToCourseArgs = {
  input: AssignStudentToCourseMutationInput;
};


/** All mutations for user */
export type MutationUserAssignStudentsToCounselorArgs = {
  input: AssignStudentsToCounselorMutationInput;
};


/** All mutations for user */
export type MutationUserClearCacheArgs = {
  input: ClearCacheMutationInput;
};


/** All mutations for user */
export type MutationUserCreateAnnouncementArgs = {
  input: CreateAnnouncementMutationInput;
};


/** All mutations for user */
export type MutationUserCreateAssignmentArgs = {
  input: CreateAssignmentMutationInput;
};


/** All mutations for user */
export type MutationUserCreateAttachmentArgs = {
  input: CreateAttachmentMutationInput;
};


/** All mutations for user */
export type MutationUserCreateAttachmentFileArgs = {
  input: CreateAttachmentFileMutationInput;
};


/** All mutations for user */
export type MutationUserCreateBadgeArgs = {
  input: CreateBadgeMutationInput;
};


/** All mutations for user */
export type MutationUserCreateCatalogArgs = {
  input: CreateCatalogMutationInput;
};


/** All mutations for user */
export type MutationUserCreateCheckInGroupArgs = {
  input: CreateCheckInGroupMutationInput;
};


/** All mutations for user */
export type MutationUserCreateCheckInQuestionArgs = {
  input: CreateCheckInQuestionMutationInput;
};


/** All mutations for user */
export type MutationUserCreateCourseArgs = {
  input: CreateCourseMutationInput;
};


/** All mutations for user */
export type MutationUserCreateEvaluationArgs = {
  input: CreateEvaluationMutationInput;
};


/** All mutations for user */
export type MutationUserCreateEvaluationCommentArgs = {
  input: CreateEvaluationCommentMutationInput;
};


/** All mutations for user */
export type MutationUserCreateExtensionFieldArgs = {
  input: CreateExtensionFieldMutationInput;
};


/** All mutations for user */
export type MutationUserCreateExtensionFieldFileArgs = {
  input: CreateExtensionFieldFileMutationInput;
};


/** All mutations for user */
export type MutationUserCreateExternalPresentationArgs = {
  input: CreateExternalPresentationMutationInput;
};


/** All mutations for user */
export type MutationUserCreateLessonArgs = {
  input: CreateLessonMutationInput;
};


/** All mutations for user */
export type MutationUserCreateOpportunityArgs = {
  input: CreateOpportunityMutationInput;
};


/** All mutations for user */
export type MutationUserCreatePartnerArgs = {
  input: CreatePartnerMutationInput;
};


/** All mutations for user */
export type MutationUserCreatePartnerFileArgs = {
  input: CreatePartnerFileMutationInput;
};


/** All mutations for user */
export type MutationUserCreatePlanArgs = {
  input: CreatePlanMutationInput;
};


/** All mutations for user */
export type MutationUserCreatePlanGroupArgs = {
  input: CreatePlanGroupMutationInput;
};


/** All mutations for user */
export type MutationUserCreatePlanGroupStatementArgs = {
  input: CreatePlanGroupStatementMutationInput;
};


/** All mutations for user */
export type MutationUserCreatePlanGroupStatementEvidenceArgs = {
  input: CreatePlanGroupStatementEvidenceMutationInput;
};


/** All mutations for user */
export type MutationUserCreatePresentationArgs = {
  input: CreatePresentationMutationInput;
};


/** All mutations for user */
export type MutationUserCreateProductArgs = {
  input: CreateProductMutationInput;
};


/** All mutations for user */
export type MutationUserCreatePublicResourceArgs = {
  input: CreatePublicResourceMutationInput;
};


/** All mutations for user */
export type MutationUserCreateResearchLinkArgs = {
  input: CreateResearchLinkMutationInput;
};


/** All mutations for user */
export type MutationUserCreateRubricArgs = {
  input: CreateRubricMutationInput;
};


/** All mutations for user */
export type MutationUserCreateRubricCriteriaArgs = {
  input: CreateRubricCriteriaMutationInput;
};


/** All mutations for user */
export type MutationUserCreateRubricCriteriaLabelArgs = {
  input: CreateRubricCriteriaLabelMutationInput;
};


/** All mutations for user */
export type MutationUserCreateRubricHeadingArgs = {
  input: CreateRubricHeadingMutationInput;
};


/** All mutations for user */
export type MutationUserCreateSharedSessionTokenArgs = {
  input: CreateSharedSessionTokenMutationInput;
};


/** All mutations for user */
export type MutationUserCreateSlideArgs = {
  input: CreateSlideMutationInput;
};


/** All mutations for user */
export type MutationUserCreateSlideBackgroundImageArgs = {
  input: CreateSlideBackgroundImageMutationInput;
};


/** All mutations for user */
export type MutationUserCreateSlideImageArgs = {
  input: CreateSlideImageMutationInput;
};


/** All mutations for user */
export type MutationUserCreateSlideVideoArgs = {
  input: CreateSlideVideoMutationInput;
};


/** All mutations for user */
export type MutationUserCreateTagArgs = {
  input: CreateTagMutationInput;
};


/** All mutations for user */
export type MutationUserCreateTaskArgs = {
  input: CreateTaskMutationInput;
};


/** All mutations for user */
export type MutationUserCreateTaskFileArgs = {
  input: CreateTaskFileMutationInput;
};


/** All mutations for user */
export type MutationUserCreateTextArgs = {
  input: CreateTextMutationInput;
};


/** All mutations for user */
export type MutationUserCreateTrackArgs = {
  input: CreateTrackMutationInput;
};


/** All mutations for user */
export type MutationUserCreateUnitArgs = {
  input: CreateUnitMutationInput;
};


/** All mutations for user */
export type MutationUserCreateVideoArgs = {
  input: CreateVideoMutationInput;
};


/** All mutations for user */
export type MutationUserCreateVirtualInternshipArgs = {
  input: CreateVirtualInternshipMutationInput;
};


/** All mutations for user */
export type MutationUserCreateVocabularyArgs = {
  input: CreateVocabularyMutationInput;
};


/** All mutations for user */
export type MutationUserDeletePartnerFileArgs = {
  input: DeletePartnerFileMutationInput;
};


/** All mutations for user */
export type MutationUserDeletePlanGroupStatementEvidenceArgs = {
  input: DeletePlanGroupStatementEvidenceMutationInput;
};


/** All mutations for user */
export type MutationUserDeletePublicResourcesArgs = {
  input: DeletePublicResourcesMutationInput;
};


/** All mutations for user */
export type MutationUserDeleteRubricCriteriaLabelArgs = {
  input: DeleteRubricCriteriaLabelMutationInput;
};


/** All mutations for user */
export type MutationUserDeleteRubricHeadingArgs = {
  input: DeleteRubricHeadingMutationInput;
};


/** All mutations for user */
export type MutationUserDeleteTagArgs = {
  input: DeleteTagMutationInput;
};


/** All mutations for user */
export type MutationUserDeleteTaskFileArgs = {
  input: DeleteTaskFileMutationInput;
};


/** All mutations for user */
export type MutationUserDuplicateCourseArgs = {
  input: DuplicateCourseMutationInput;
};


/** All mutations for user */
export type MutationUserDuplicateRubricArgs = {
  input: DuplicateRubricMutationInput;
};


/** All mutations for user */
export type MutationUserDuplicateTaskArgs = {
  input: DuplicateTaskMutationInput;
};


/** All mutations for user */
export type MutationUserEvaluateStudentArgs = {
  input: EvaluateStudentMutationInput;
};


/** All mutations for user */
export type MutationUserFindOrCreateConversationArgs = {
  input: FindOrCreateConversationMutationInput;
};


/** All mutations for user */
export type MutationUserGenerateAssessmentReportArgs = {
  input: GenerateAssessmentReportMutationInput;
};


/** All mutations for user */
export type MutationUserGenerateCareerReviewSurveyReportArgs = {
  input: GenerateCareerReviewSurveyReportMutationInput;
};


/** All mutations for user */
export type MutationUserGenerateCourseReportArgs = {
  input: GenerateCourseReportMutationInput;
};


/** All mutations for user */
export type MutationUserGenerateGoalsPerformanceIndicatorsReportArgs = {
  input: GenerateGoalsPerformanceIndicatorsReportMutationInput;
};


/** All mutations for user */
export type MutationUserGenerateGoalsPlanReportArgs = {
  input: GenerateGoalsPlanReportMutationInput;
};


/** All mutations for user */
export type MutationUserGenerateOpportunityReportArgs = {
  input: GenerateOpportunityReportMutationInput;
};


/** All mutations for user */
export type MutationUserGeneratePathwayReportArgs = {
  input: GeneratePathwayReportMutationInput;
};


/** All mutations for user */
export type MutationUserGeneratePlanReportArgs = {
  input: GeneratePlanReportMutationInput;
};


/** All mutations for user */
export type MutationUserGeneratePresignedUploadUrlArgs = {
  input: GeneratePresignedUploadUrlMutationInput;
};


/** All mutations for user */
export type MutationUserGradeAssignmentSubmissionArgs = {
  input: GradeAssignmentSubmissionMutationInput;
};


/** All mutations for user */
export type MutationUserGradeSubmissionArgs = {
  input: GradeSubmissionMutationInput;
};


/** All mutations for user */
export type MutationUserLockStatementArgs = {
  input: LockStatementMutationInput;
};


/** All mutations for user */
export type MutationUserPerformContractsSyncArgs = {
  input: PerformContractsSyncMutationInput;
};


/** All mutations for user */
export type MutationUserPerformFullContractSyncArgs = {
  input: PerformFullContractSyncMutationInput;
};


/** All mutations for user */
export type MutationUserRecommendOpportunityArgs = {
  input: RecommendOpportunityMutationInput;
};


/** All mutations for user */
export type MutationUserReindexTasksArgs = {
  input: ReindexTasksMutationInput;
};


/** All mutations for user */
export type MutationUserResetPostSecondaryApplicationsForStudentArgs = {
  input: ResetPostSecondaryApplicationsForStudentMutationInput;
};


/** All mutations for user */
export type MutationUserRestoreCatalogArgs = {
  input: RestoreCatalogMutationInput;
};


/** All mutations for user */
export type MutationUserRestoreExtensionFieldArgs = {
  input: RestoreExtensionFieldMutationInput;
};


/** All mutations for user */
export type MutationUserRestorePartnerArgs = {
  input: RestorePartnerMutationInput;
};


/** All mutations for user */
export type MutationUserRestoreTrackArgs = {
  input: RestoreTrackMutationInput;
};


/** All mutations for user */
export type MutationUserRestoreUnitArgs = {
  input: RestoreUnitMutationInput;
};


/** All mutations for user */
export type MutationUserSaveCommonAppFormResponsesArgs = {
  input: SaveCommonAppFormResponsesMutationInput;
};


/** All mutations for user */
export type MutationUserSendMessageArgs = {
  input: SendMessageMutationInput;
};


/** All mutations for user */
export type MutationUserSetEntityCatalogsArgs = {
  input: SetEntityCatalogsMutationInput;
};


/** All mutations for user */
export type MutationUserSetEntityReportTypesArgs = {
  input: SetEntityReportTypesMutationInput;
};


/** All mutations for user */
export type MutationUserSetEntityTagsArgs = {
  input: SetEntityTagsMutationInput;
};


/** All mutations for user */
export type MutationUserShareResourceArgs = {
  input: ShareResourceMutationInput;
};


/** All mutations for user */
export type MutationUserSubmitCommonAppFormResponsesArgs = {
  input: SubmitCommonAppFormResponsesMutationInput;
};


/** All mutations for user */
export type MutationUserSyncCommonAppDataArgs = {
  input: SyncCommonAppDataMutationInput;
};


/** All mutations for user */
export type MutationUserSyncStandardSetsArgs = {
  input: SyncStandardSetsMutationInput;
};


/** All mutations for user */
export type MutationUserToggleEntityReportTypeAvailabilityArgs = {
  input: ToggleEntityReportTypeAvailabilityMutationInput;
};


/** All mutations for user */
export type MutationUserTogglePostSecondaryApplicationsForStudentsArgs = {
  input: TogglePostSecondaryApplicationsForStudentsMutationInput;
};


/** All mutations for user */
export type MutationUserUnassignCatalogFromEntityArgs = {
  input: UnassignCatalogFromEntityMutationInput;
};


/** All mutations for user */
export type MutationUserUnassignExtensionFieldFromEntityArgs = {
  input: UnassignExtensionFieldFromEntityMutationInput;
};


/** All mutations for user */
export type MutationUserUnassignPlanFromEntityArgs = {
  input: UnassignPlanFromEntityMutationInput;
};


/** All mutations for user */
export type MutationUserUnassignRubricFromAssignmentArgs = {
  input: UnassignRubricFromAssignmentMutationInput;
};


/** All mutations for user */
export type MutationUserUnassignRubricFromProductArgs = {
  input: UnassignRubricFromProductMutationInput;
};


/** All mutations for user */
export type MutationUserUnassignSchoolClassFromCourseArgs = {
  input: UnassignSchoolClassFromCourseMutationInput;
};


/** All mutations for user */
export type MutationUserUnassignStandardSetFromEntityArgs = {
  input: UnassignStandardSetFromEntityMutationInput;
};


/** All mutations for user */
export type MutationUserUnassignStudentFromCourseArgs = {
  input: UnassignStudentFromCourseMutationInput;
};


/** All mutations for user */
export type MutationUserUnlockStatementArgs = {
  input: UnlockStatementMutationInput;
};


/** All mutations for user */
export type MutationUserUnsubmitCommonAppFormResponsesArgs = {
  input: UnsubmitCommonAppFormResponsesMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateAssignmentArgs = {
  input: UpdateAssignmentMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateAttachmentArgs = {
  input: UpdateAttachmentMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateBadgeArgs = {
  input: UpdateBadgeMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateCatalogArgs = {
  input: UpdateCatalogMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateCheckInGroupArgs = {
  input: UpdateCheckInGroupMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateCheckInQuestionArgs = {
  input: UpdateCheckInQuestionMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateContractArgs = {
  input: UpdateContractMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateCourseArgs = {
  input: UpdateCourseMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateEntityArgs = {
  input: UpdateEntityMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateEntityCatalogsArgs = {
  input: UpdateEntityCatalogsMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateEntityPlansArgs = {
  input: UpdateEntityPlansMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateEntitySettingsArgs = {
  input: UpdateEntitySettingsMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateExtensionFieldArgs = {
  input: UpdateExtensionFieldMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateExternalPresentationArgs = {
  input: UpdateExternalPresentationMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateLessonArgs = {
  input: UpdateLessonMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateOpportunityArgs = {
  input: UpdateOpportunityMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateOpportunityApplicationArgs = {
  input: UpdateOpportunityApplicationMutationInput;
};


/** All mutations for user */
export type MutationUserUpdatePartnerArgs = {
  input: UpdatePartnerMutationInput;
};


/** All mutations for user */
export type MutationUserUpdatePlanArgs = {
  input: UpdatePlanMutationInput;
};


/** All mutations for user */
export type MutationUserUpdatePlanGroupArgs = {
  input: UpdatePlanGroupMutationInput;
};


/** All mutations for user */
export type MutationUserUpdatePlanGroupStatementArgs = {
  input: UpdatePlanGroupStatementMutationInput;
};


/** All mutations for user */
export type MutationUserUpdatePresentationArgs = {
  input: UpdatePresentationMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateProductArgs = {
  input: UpdateProductMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateResearchLinkArgs = {
  input: UpdateResearchLinkMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateRubricArgs = {
  input: UpdateRubricMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateRubricCriteriaArgs = {
  input: UpdateRubricCriteriaMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateRubricCriteriaLabelArgs = {
  input: UpdateRubricCriteriaLabelMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateRubricHeadingArgs = {
  input: UpdateRubricHeadingMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateSchoolClassSettingsArgs = {
  input: UpdateSchoolClassSettingsMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateSlideArgs = {
  input: UpdateSlideMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateSlideImageArgs = {
  input: UpdateSlideImageMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateSlideVideoArgs = {
  input: UpdateSlideVideoMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateStandardSetArgs = {
  input: UpdateStandardSetMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateStudentSettingsArgs = {
  input: UpdateStudentSettingsMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateTagArgs = {
  input: UpdateTagMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateTaskArgs = {
  input: UpdateTaskMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateTaskFileArgs = {
  input: UpdateTaskFileMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateTextArgs = {
  input: UpdateTextMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateTrackArgs = {
  input: UpdateTrackMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateUnitArgs = {
  input: UpdateUnitMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateUserArgs = {
  input: UpdateUserMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateVideoArgs = {
  input: UpdateVideoMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateVirtualInternshipArgs = {
  input: UpdateVirtualInternshipMutationInput;
};


/** All mutations for user */
export type MutationUserUpdateVocabularyArgs = {
  input: UpdateVocabularyMutationInput;
};

export type OnboardingEnabledSettings = {
  origin: StudentSettingsOrigins;
  value: Scalars['Boolean']['output'];
};

/** Opportunity */
export type Opportunity = ConversationContext & {
  applications: OpportunityApplicationPage;
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  automaticAcceptance: Maybe<Scalars['Boolean']['output']>;
  availableSpots: Maybe<Scalars['Int']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  creditsOutcomes: Maybe<Scalars['String']['output']>;
  deadline: Maybe<Scalars['ISO8601Date']['output']>;
  description: Scalars['String']['output'];
  entities: Array<Entity>;
  hasPendingApplications: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  imageFitToContainer: Scalars['Boolean']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  location: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  opportunityType: OpportunityTypes;
  partner: Maybe<Partner>;
  pathways: Array<Pathway>;
  periodEnd: Maybe<Scalars['ISO8601Date']['output']>;
  periodStart: Maybe<Scalars['ISO8601Date']['output']>;
  questions: Array<OpportunityQuestion>;
  salaryInformation: Maybe<Scalars['String']['output']>;
  tags: Array<Scalars['String']['output']>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  virtualInternship: Maybe<VirtualInternship>;
  visibilityScope: VisibilityScope;
};


/** Opportunity */
export type OpportunityApplicationsArgs = {
  filter?: InputMaybe<OpportunityApplicationFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** Opportunity */
export type OpportunityVirtualInternshipArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};

/** OpportunityApplication */
export type OpportunityApplication = {
  answers: Array<OpportunityApplicationAnswer>;
  appliedAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  isFinished: Scalars['Boolean']['output'];
  lastChangedBy: Maybe<WblAdmin>;
  opportunity: Opportunity;
  status: ApplicationStatus;
  student: Student;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** OpportunityApplication Answer */
export type OpportunityApplicationAnswer = {
  answer: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  opportunityQuestionId: Scalars['ID']['output'];
};

/** The connection type for OpportunityApplication. */
export type OpportunityApplicationConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<OpportunityApplicationEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<OpportunityApplication>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type OpportunityApplicationEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<OpportunityApplication>;
};

/** Attributes for filtering OpportunityApplications */
export type OpportunityApplicationFilter = {
  studentFullNameCont?: InputMaybe<Scalars['String']['input']>;
};

export type OpportunityApplicationPage = {
  nodes: Array<OpportunityApplication>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type OpportunityApplicationResult = {
  applicationDeadline: Maybe<Scalars['ISO8601Date']['output']>;
  applicationStatus: ApplicationStatus;
  assignmentsSubmitted: Maybe<Scalars['Int']['output']>;
  assignmentsToSubmit: Maybe<Scalars['Int']['output']>;
  checkInsSubmitted: Maybe<Scalars['Int']['output']>;
  checkInsToSubmit: Maybe<Scalars['Int']['output']>;
  clusterNames: Array<Scalars['String']['output']>;
  isFavorite: Scalars['Boolean']['output'];
  opportunityName: Maybe<Scalars['String']['output']>;
  opportunityPartnerNames: Array<Scalars['String']['output']>;
  opportunityType: OpportunityTypes;
  pathwayNames: Array<Scalars['String']['output']>;
  studentGradeLevel: Maybe<Scalars['String']['output']>;
  studentId: Scalars['ID']['output'];
  studentName: Maybe<Scalars['String']['output']>;
  studentSisId: Maybe<Scalars['String']['output']>;
};

export type OpportunityApplicationResultFilter = {
  clusterIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  pathwayIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  studentSearchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
};

export type OpportunityApplicationResultPage = {
  nodes: Array<OpportunityApplicationResult>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type OpportunityApplicationSummary = {
  opportunitiesCount: Scalars['Int']['output'];
  virtualInternshipsCount: Scalars['Int']['output'];
};

/** Attributes for filtering Opportunities */
export type OpportunityFilter = {
  entitiesUuidIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  excludeAssigned?: InputMaybe<Scalars['Boolean']['input']>;
  includeGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
  partnersIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  pathwaysIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  tagsContain?: InputMaybe<Array<Scalars['String']['input']>>;
  typeIn?: InputMaybe<Array<OpportunityTypes>>;
};

export type OpportunityPage = {
  nodes: Array<Opportunity>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Opportunity Question */
export type OpportunityQuestion = {
  id: Scalars['ID']['output'];
  question: Scalars['String']['output'];
  step: Scalars['Int']['output'];
};

export type OpportunityReport = {
  clusterCounts: Array<ClusterApplicationCount>;
  pathwayCounts: Array<PathwayApplicationCount>;
  results: OpportunityApplicationResultPage;
  studentsCount: Scalars['Int']['output'];
  summary: OpportunityApplicationSummary;
  typeCounts: Array<OpportunityTypeApplicationCount>;
};


export type OpportunityReportResultsArgs = {
  filter?: InputMaybe<OpportunityApplicationResultFilter>;
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
};

export type OpportunityReportFile = {
  id: Scalars['ID']['output'];
  schoolYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type OpportunityReportFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering opportunity reports */
export type OpportunityReportFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type OpportunityReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type OpportunityReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type OpportunityReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type OpportunityReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type OpportunityTypeApplicationCount = {
  applicationsCount: Scalars['Int']['output'];
  opportunityType: OpportunityTypes;
};

export enum OpportunityTypes {
  /** Apprenticeship opportunity type */
  APPRENTICESHIP = 'APPRENTICESHIP',
  /** Clinical experience opportunity type */
  CLINICAL_EXPERIENCE = 'CLINICAL_EXPERIENCE',
  /** College visit opportunity type */
  COLLEGE_VISIT = 'COLLEGE_VISIT',
  /** Internship opportunity type */
  INTERNSHIP = 'INTERNSHIP',
  /** Job opportunity type */
  JOB = 'JOB',
  /** Job shadow opportunity type */
  JOB_SHADOW = 'JOB_SHADOW',
  /** Other opportunity type */
  OTHER = 'OTHER',
  /** Practicum opportunity type */
  PRACTICUM = 'PRACTICUM',
  /** Pre apprenticeship opportunity type */
  PRE_APPRENTICESHIP = 'PRE_APPRENTICESHIP',
  /** Speaker opportunity type */
  SPEAKER = 'SPEAKER',
  /** Virtual internship opportunity type */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP',
  /** Workplace tour opportunity type */
  WORKPLACE_TOUR = 'WORKPLACE_TOUR'
}

export type OverallData = {
  completed: Scalars['Int']['output'];
  inProgress: Scalars['Int']['output'];
  notMet: Scalars['Int']['output'];
  notStarted: Scalars['Int']['output'];
  /** @deprecated Use plan { name } instead */
  planName: Scalars['String']['output'];
  /** @deprecated Use student { full_name } instead */
  studentFullName: Scalars['String']['output'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  /** When paginating forwards, the cursor to continue. */
  endCursor: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor: Maybe<Scalars['String']['output']>;
};

export type Partner = {
  about: Scalars['String']['output'];
  additionalUrls: Maybe<Array<Scalars['String']['output']>>;
  address: Maybe<Scalars['String']['output']>;
  canEdit: Scalars['Boolean']['output'];
  courses: Array<Course>;
  coursesCount: Scalars['Int']['output'];
  details: Maybe<Scalars['String']['output']>;
  documents: Array<PartnerFile>;
  email: Maybe<Scalars['String']['output']>;
  entities: Array<Entity>;
  id: Scalars['ID']['output'];
  imageFitToContainer: Scalars['Boolean']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  isArchived: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  opportunities: Array<Opportunity>;
  opportunitiesCount: Scalars['Int']['output'];
  pathways: Array<Pathway>;
  phone: Maybe<Scalars['String']['output']>;
  status: PartnerStatuses;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  url: Maybe<Scalars['String']['output']>;
  virtualInternshipsCount: Scalars['Int']['output'];
  visibilityScope: VisibilityScope;
};

export type PartnerFile = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  partner: Partner;
  submitter: FileSubmitter;
  url: Scalars['String']['output'];
};


export type PartnerFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering Partners */
export type PartnerFilter = {
  entitiesUuidIn?: InputMaybe<Array<Scalars['String']['input']>>;
  includeGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
  statusIn?: InputMaybe<Array<PartnerIndexStatuses>>;
};

export enum PartnerIndexStatuses {
  /** Status for archived partners */
  ARCHIVED = 'ARCHIVED',
  /** Status for draft partners */
  DRAFT = 'DRAFT',
  /** Status for published partners */
  PUBLISHED = 'PUBLISHED'
}

export type PartnerPage = {
  nodes: Array<Partner>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum PartnerStatuses {
  /** Status for draft partners */
  DRAFT = 'DRAFT',
  /** Status for published partners */
  PUBLISHED = 'PUBLISHED'
}

export type Pathway = {
  cluster: Cluster;
  courses: Array<Course>;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
};

export type PathwayApplicationCount = {
  applicationsCount: Scalars['Int']['output'];
  pathway: Pathway;
};

export type PathwayEnrollmentStatsEntry = {
  pathway: Pathway;
  studentsCount: Scalars['Int']['output'];
};

export type PathwayRecommendationCount = {
  pathway: Pathway;
  recommendationsCount: Scalars['Int']['output'];
};

export type PathwayRecommendationStatsEntry = {
  pathway: Pathway;
  studentsCount: Scalars['Int']['output'];
};

export type PathwayReport = {
  clusterVisitCounts: Array<ClusterVisitCount>;
  pathwayVisitCounts: Array<PathwayVisitCount>;
  summary: PathwayVisitSummary;
  /** @deprecated Use clusterVisitCounts instead */
  visitCounts: Array<ClusterVisitCount>;
  visitResults: PathwayVisitResultPage;
};


export type PathwayReportVisitResultsArgs = {
  filter?: InputMaybe<PathwayVisitResultFilter>;
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
};

export type PathwayReportFile = {
  id: Scalars['ID']['output'];
  schoolYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type PathwayReportFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering pathway reports */
export type PathwayReportFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type PathwayReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type PathwayReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type PathwayReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type PathwayReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type PathwayVisitCount = {
  pathway: Pathway;
  visitsCount: Scalars['Int']['output'];
};

export type PathwayVisitResult = {
  clusterNames: Array<Scalars['String']['output']>;
  isEnrolled: Scalars['Boolean']['output'];
  pathwayNames: Array<Scalars['String']['output']>;
  resourceId: Scalars['ID']['output'];
  resourceName: Scalars['String']['output'];
  resourceType: Scalars['String']['output'];
  visitorEmail: Scalars['String']['output'];
  visitorId: Scalars['ID']['output'];
  visitorName: Scalars['String']['output'];
  visitorSisId: Maybe<Scalars['String']['output']>;
  visitorType: Scalars['String']['output'];
  visitsCount: Scalars['Int']['output'];
};

export type PathwayVisitResultFilter = {
  clusterIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  fullNameOrSisIdCont?: InputMaybe<Scalars['String']['input']>;
  pathwayIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type PathwayVisitResultPage = {
  nodes: Array<PathwayVisitResult>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type PathwayVisitSummary = {
  clustersCount: Scalars['Int']['output'];
  engagementsCount: Scalars['Int']['output'];
  pathwaysCount: Scalars['Int']['output'];
  resourcesCount: Scalars['Int']['output'];
  studentsCount: Scalars['Int']['output'];
  usersCount: Scalars['Int']['output'];
};

/** Autogenerated input type of PerformContractsSyncMutation */
export type PerformContractsSyncMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of PerformContractsSyncMutation. */
export type PerformContractsSyncMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of PerformFullContractSyncMutation */
export type PerformFullContractSyncMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  definedLearningContractUuid: Scalars['ID']['input'];
  resources?: InputMaybe<Array<SyncResources>>;
};

/** Autogenerated return type of PerformFullContractSyncMutation. */
export type PerformFullContractSyncMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

export type Plan = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  description: Maybe<Scalars['String']['output']>;
  entities: EntityPage;
  /** @deprecated Use `results` and `coments` in `PlanGroupStatment` instead */
  evaluation: Maybe<Evaluation>;
  groups: Array<PlanGroup>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  progress: PlanProgress;
};


export type PlanEntitiesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for filtering Plans */
export type PlanFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type PlanFulfillmentReport = {
  groups: Array<PlanGroupFullfilmentStatsEntry>;
  id: Scalars['ID']['output'];
};

export type PlanGroup = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  statements: Array<PlanGroupStatement>;
  step: Maybe<Scalars['Int']['output']>;
};

/** Attributes for ordering plan groups */
export type PlanGroupAttributes = {
  id: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type PlanGroupBreakdown = {
  completed: Scalars['Int']['output'];
  group: PlanGroup;
  inProgress: Scalars['Int']['output'];
  notMet: Scalars['Int']['output'];
  notStarted: Scalars['Int']['output'];
};

/** Attributes for filtering PlanGroups */
export type PlanGroupFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type PlanGroupFullfilmentStatsEntry = {
  groupId: Scalars['ID']['output'];
  statements: Array<PlanGroupStatementFullfilmentStatsEntry>;
};

export type PlanGroupPage = {
  nodes: Array<PlanGroup>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type PlanGroupStatement = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  comments: Array<EvaluationComment>;
  evidences: Array<PlanGroupStatementEvidence>;
  group: Maybe<PlanGroup>;
  id: Scalars['ID']['output'];
  isAligned: Scalars['Boolean']['output'];
  isLocked: Scalars['Boolean']['output'];
  isRequired: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  /** DEPRECATED */
  planGroup: Maybe<PlanGroup>;
  question: Maybe<PlanGroupStatementQuestion>;
  results: Array<EvaluationResult>;
  step: Maybe<Scalars['Int']['output']>;
};


export type PlanGroupStatementIsAlignedArgs = {
  rubricHeadingId: Scalars['ID']['input'];
};

/** Attributes for updating plan group statements order */
export type PlanGroupStatementAttributes = {
  id: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type PlanGroupStatementBreakdown = {
  completed: Scalars['Int']['output'];
  inProgress: Scalars['Int']['output'];
  notMet: Scalars['Int']['output'];
  notStarted: Scalars['Int']['output'];
};

export type PlanGroupStatementEvidence = {
  contextType: Maybe<EvidenceContextKind>;
  id: Maybe<Scalars['ID']['output']>;
  isTeamSubmission: Scalars['Boolean']['output'];
  itemId: Maybe<Scalars['ID']['output']>;
  label: Scalars['String']['output'];
  rubricScores: Maybe<Array<RubricScore>>;
  service: ServiceNames;
  type: EvidenceKind;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type PlanGroupStatementEvidenceItemAttributes = {
  itemId: Scalars['ID']['input'];
  itemType: EvidenceKind;
};

export type PlanGroupStatementFullfilmentStatsEntry = {
  fulfillments: Scalars['Int']['output'];
  statementId: Scalars['ID']['output'];
};

export type PlanGroupStatementQuestion = {
  answer: Maybe<PlanGroupStatementQuestionAnswer>;
  id: Scalars['ID']['output'];
  options: Array<PlanGroupStatementQuestionOption>;
  questionType: PlanGroupStatementQuestionTypes;
  text: Scalars['String']['output'];
};

export type PlanGroupStatementQuestionAnswer = {
  answer: Array<Scalars['String']['output']>;
  author: Maybe<Evaluator>;
  id: Scalars['ID']['output'];
};

/** Attributes for creating a plan group statement question */
export type PlanGroupStatementQuestionAttributes = {
  options?: InputMaybe<Array<PlanGroupStatementQuestionOptionAttributes>>;
  questionType: PlanGroupStatementQuestionTypes;
  text: Scalars['String']['input'];
};

export type PlanGroupStatementQuestionOption = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  option: Scalars['String']['output'];
  step: Scalars['Int']['output'];
};

/** Attributes for creating a plan group statement question option */
export type PlanGroupStatementQuestionOptionAttributes = {
  option: Scalars['String']['input'];
  step: Scalars['Int']['input'];
};

export enum PlanGroupStatementQuestionTypes {
  /** Long text question type */
  LONG_TEXT = 'LONG_TEXT',
  /** Multiple choice question type */
  MULTIPLE_CHOICE = 'MULTIPLE_CHOICE',
  /** Multiple choice dropdown question type */
  MULTIPLE_CHOICE_DROPDOWN = 'MULTIPLE_CHOICE_DROPDOWN',
  /** Short text question type */
  SHORT_TEXT = 'SHORT_TEXT',
  /** Single choice question type */
  SINGLE_CHOICE = 'SINGLE_CHOICE'
}

export type PlanGroupStatementResult = {
  answer: Maybe<Array<Scalars['String']['output']>>;
  evidencesCount: Scalars['Int']['output'];
  lastUpdatedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  status: EvaluationResultValues;
  studentName: Scalars['String']['output'];
  studentSisId: Maybe<Scalars['String']['output']>;
};

export type PlanGroupStatementResultFilter = {
  fullNameOrSisIdCont?: InputMaybe<Scalars['String']['input']>;
  resultEq?: InputMaybe<EvaluationResultValues>;
};

export type PlanGroupStatementResultPage = {
  nodes: Array<PlanGroupStatementResult>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type PlanGroupStatementResultSortAttributes = {
  column?: InputMaybe<PlanGroupStatementResultSortColumns>;
  order?: InputMaybe<SortOrders>;
};

export enum PlanGroupStatementResultSortColumns {
  /** Sorting by Evidences count */
  EVIDENCES_COUNT = 'EVIDENCES_COUNT',
  /** Sorting by Last updated at */
  LAST_UPDATED_AT = 'LAST_UPDATED_AT',
  /** Sorting by Status */
  STATUS = 'STATUS',
  /** Sorting by Student name */
  STUDENT_NAME = 'STUDENT_NAME',
  /** Sorting by Student sis id */
  STUDENT_SIS_ID = 'STUDENT_SIS_ID'
}

export type PlanPage = {
  nodes: Array<Plan>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type PlanProgress = {
  completed: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export type PlanReport = {
  groups: Array<PlanGroupBreakdown>;
  statementBreakdown: PlanGroupStatementBreakdown;
  statementResults: PlanGroupStatementResultPage;
  summary: Summary;
};


export type PlanReportStatementBreakdownArgs = {
  statementId: Scalars['ID']['input'];
};


export type PlanReportStatementResultsArgs = {
  filter?: InputMaybe<PlanGroupStatementResultFilter>;
  page?: InputMaybe<Scalars['Int']['input']>;
  perPage?: InputMaybe<Scalars['Int']['input']>;
  sort?: InputMaybe<PlanGroupStatementResultSortAttributes>;
  statementId: Scalars['ID']['input'];
};

export type PlanReportFile = {
  id: Scalars['ID']['output'];
  schoolYear: Maybe<Scalars['Int']['output']>;
  /** @deprecated Use schoolYear instead */
  startYear: Maybe<Scalars['Int']['output']>;
  uploadStatus: Maybe<ReportUploadStatuses>;
  url: Maybe<Scalars['String']['output']>;
};


export type PlanReportFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for filtering plan reports */
export type PlanReportFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  planId: Scalars['ID']['input'];
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear?: InputMaybe<Scalars['Int']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type PlanReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type PlanReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type PlanReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type PlanReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export enum PlanReportLevels {
  /** Entity level */
  ENTITY = 'ENTITY',
  /** School Class level */
  SCHOOL_CLASS = 'SCHOOL_CLASS',
  /** User level */
  USER = 'USER'
}

export type Portfolio = {
  careerExperience: Maybe<CareerExperienceEntry>;
  careerExperiences: Array<CareerExperienceEntry>;
  currentCourses: Array<Course>;
  plan: Plan;
  plans: Array<Maybe<Plan>>;
  projects: Maybe<PortfolioProjectConnection>;
  resumes: Maybe<Array<ExternalResume>>;
  sharedResume: Maybe<Resume>;
  studentId: Scalars['ID']['output'];
};


export type PortfolioCareerExperienceArgs = {
  id: Scalars['ID']['input'];
};


export type PortfolioPlanArgs = {
  id: Scalars['ID']['input'];
};


export type PortfolioProjectsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  type: PortfolioKind;
};

export enum PortfolioKind {
  /** Portfolio projects created in Careers */
  CAREERS = 'CAREERS',
  /** Portfolio projects created in Learning */
  LEARNING = 'LEARNING',
  /**
   * Portfolio projects created in Learning (PBL)
   * @deprecated {:reason=>"Use LEARNING instead"}
   */
  PBL = 'PBL',
  /** Personal portfolio projects */
  PERSONAL = 'PERSONAL'
}

export type PortfolioProject = {
  contextType: Maybe<PortfolioProjectKind>;
  description: Maybe<Scalars['String']['output']>;
  finishedAt: Scalars['ISO8601Date']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  isTeamSubmission: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  parentName: Maybe<Scalars['String']['output']>;
  portfolioKind: PortfolioKind;
  resourceClass: PortfolioResourceClass;
  startedAt: Maybe<Scalars['ISO8601Date']['output']>;
  submission: PortfolioSubmission;
  /** @deprecated Use `finished_at` instead */
  submittedAt: Scalars['ISO8601DateTime']['output'];
  /** @deprecated Use `is_team_submission` instead */
  teamSubmission: Maybe<Scalars['Boolean']['output']>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  /** @deprecated Use `context_type` instead */
  type: Maybe<PortfolioProjectKind>;
};

/** The connection type for PortfolioProject. */
export type PortfolioProjectConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<PortfolioProjectEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<PortfolioProject>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type PortfolioProjectEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<PortfolioProject>;
};

export enum PortfolioProjectKind {
  /** Course */
  COURSE = 'COURSE',
  /**
   * Lesson
   * @deprecated Use `COURSE` instead
   */
  LESSON = 'LESSON',
  /** Opportunity */
  OPPORTUNITY = 'OPPORTUNITY',
  /** Virtual Internship */
  VIRTUAL_INTERNSHIP = 'VIRTUAL_INTERNSHIP'
}

export enum PortfolioResourceClass {
  /** Portfolio projects created in Careers */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** All portfolio projects */
  OPPORTUNITY_APPLICATION = 'OPPORTUNITY_APPLICATION',
  /** Personal portfolio projects */
  PORTFOLIO_PROJECT = 'PORTFOLIO_PROJECT',
  /** Portfolio projects created in Learning */
  PRODUCT_SUBMISSION = 'PRODUCT_SUBMISSION'
}

export type PortfolioSubmission = {
  files: Array<PortfolioSubmissionFile>;
  status: Maybe<SubmissionStatus>;
};

export type PortfolioSubmissionFile = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  filename: Scalars['String']['output'];
  googleWeblink: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isOwner: Scalars['Boolean']['output'];
  source: Maybe<SubmissionFileSource>;
  submitter: Maybe<ProductSubmissionFileSubmitter>;
  url: Scalars['String']['output'];
};

export type PostSecondaryApplicationsEnabledSettings = {
  origin: StudentSettingsOrigins;
  value: Scalars['Boolean']['output'];
};

export type PostSecondaryApplicationsStatus = {
  isEnabled: Scalars['Boolean']['output'];
  isOverridden: Scalars['Boolean']['output'];
};

export type Presentation = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  color: Maybe<Scalars['String']['output']>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  slideBackgroundImages: Array<SlideBackgroundImage>;
  slides: Array<Slide>;
  status: PresentationStatuses;
  transition: Maybe<Scalars['String']['output']>;
  type: PresentationTypes;
  typography: Maybe<Scalars['String']['output']>;
};

export type PresentationAttributes = {
  id: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

/** Attributes for creating and updating presentation slides and their subslides */
export type PresentationSlideAttributes = {
  slideId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
  subslides?: InputMaybe<Array<PresentationSlideAttributes>>;
};

export enum PresentationStatuses {
  /** Status for draft presentations */
  DRAFT = 'DRAFT',
  /** Status for published presentations */
  PUBLISHED = 'PUBLISHED'
}

export enum PresentationTypes {
  /** Status for full screen presentations */
  FULL_SCREEN = 'FULL_SCREEN',
  /** Status for legacy presentations */
  LEGACY = 'LEGACY'
}

/** Options for AWS Presigned URLs */
export type PresignedUrlOptions = {
  responseContentDisposition?: InputMaybe<Scalars['String']['input']>;
};

export type Product = ConversationContext & StudentBadgeResource & {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  badges: Array<Badge>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  owner: Maybe<ResourceDuplicateOwner>;
  rubrics: Array<Rubric>;
  rubricsUrl: Maybe<Scalars['String']['output']>;
  status: ProductStatuses;
  step: Maybe<Scalars['Int']['output']>;
  tasks: Array<Task>;
};

/** Attributes for filtering Products */
export type ProductFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  statusEq?: InputMaybe<ProductStatuses>;
};

export type ProductPage = {
  nodes: Array<Product>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum ProductStatuses {
  /** Status for draft products */
  DRAFT = 'DRAFT',
  /** Status for published products */
  PUBLISHED = 'PUBLISHED'
}

export type ProductSubmission = ConversationContext & {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** Returns who submitted the product submission file */
export type ProductSubmissionFileSubmitter = {
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type Program = {
  definition: Maybe<Scalars['String']['output']>;
  degrees: Array<Scalars['String']['output']>;
  title: Scalars['String']['output'];
};

/** Attributes for filtering Programs */
export type ProgramFilter = {
  degrees?: InputMaybe<Array<Degree>>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type ProgramPage = {
  nodes: Array<Program>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type PublicResource = {
  id: Scalars['ID']['output'];
};

export type QuestionAnswerCount = {
  baselineCounts: Array<AnswerCount>;
  currentCounts: Array<AnswerCount>;
  question: CareerReviewSurveyQuestion;
};

/** Autogenerated input type of RecommendOpportunityMutation */
export type RecommendOpportunityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  opportunityId: Scalars['ID']['input'];
  studentUuids: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of RecommendOpportunityMutation. */
export type RecommendOpportunityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

export type RecommendationRequest = {
  applicant: Applicant;
  deadline: Maybe<Scalars['ISO8601DateTime']['output']>;
  form: Maybe<CommonAppForm>;
  forms: Array<CommonAppForm>;
  status: InstitutionApplicationStatus;
  submittedFormsCount: Scalars['Int']['output'];
  totalFormsCount: Scalars['Int']['output'];
};


export type RecommendationRequestFormArgs = {
  type: CommonAppFormTypes;
};

export type RecommendationRequestPage = {
  nodes: Array<RecommendationRequest>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Autogenerated input type of ReindexTasksMutation */
export type ReindexTasksMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of ReindexTasksMutation. */
export type ReindexTasksMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Maybe<Scalars['String']['output']>;
};

export enum ReportFileUploadStatuses {
  /** Upload completed */
  COMPLETED = 'COMPLETED',
  /** Upload failed */
  FAILED = 'FAILED',
  /** Upload in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Upload not started */
  NOT_STARTED = 'NOT_STARTED'
}

/** Attributes for filtering reports filters query */
export type ReportFiltersFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export enum ReportTypes {
  /** Assessment */
  ASSESSMENT = 'ASSESSMENT',
  /** Career Pathway */
  CAREER_PATHWAY = 'CAREER_PATHWAY',
  /** Career Review Survey */
  CAREER_REVIEW_SURVEY = 'CAREER_REVIEW_SURVEY',
  /** College & Future */
  COLLEGE_AND_FUTURE = 'COLLEGE_AND_FUTURE',
  /** Goal Performance Indicators */
  GOAL_PERFORMANCE_INDICATORS = 'GOAL_PERFORMANCE_INDICATORS',
  /** Goal Plans */
  GOAL_PLANS = 'GOAL_PLANS',
  /**
   * Key Performance Indicators
   * @deprecated Use "GOAL_PERFORMANCE_INDICATORS" instead
   */
  KEY_PERFORMANCE_INDICATORS = 'KEY_PERFORMANCE_INDICATORS',
  /** Opportunities */
  OPPORTUNITIES = 'OPPORTUNITIES',
  /**
   * Student Plans
   * @deprecated Use "GOAL_PLANS" instead
   */
  STUDENT_PLANS = 'STUDENT_PLANS'
}

export enum ReportUploadStatuses {
  /** Upload completed */
  COMPLETED = 'COMPLETED',
  /** Upload failed */
  FAILED = 'FAILED',
  /** Upload in progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Upload not started */
  NOT_STARTED = 'NOT_STARTED'
}

export type Reports = {
  assessmentReport: Maybe<AssessmentReport>;
  careerReviewSurveyReport: Maybe<CareerReviewSurveyReport>;
  opportunityReport: Maybe<OpportunityReport>;
  pathwayReport: Maybe<PathwayReport>;
  planReport: Maybe<PlanReport>;
  tagReport: Maybe<TagReport>;
};


export type ReportsAssessmentReportArgs = {
  filter: InputMaybe<AssessmentReportFilter>;
};


export type ReportsCareerReviewSurveyReportArgs = {
  filter: InputMaybe<CareerReviewSurveyReportFilter>;
};


export type ReportsOpportunityReportArgs = {
  filter: InputMaybe<OpportunityReportFilter>;
};


export type ReportsPathwayReportArgs = {
  filter: InputMaybe<PathwayReportFilter>;
};


export type ReportsPlanReportArgs = {
  filter: PlanReportFilter;
};

export type ResearchLink = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  author: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lessons: Array<Lesson>;
  name: Scalars['String']['output'];
  resourceLink: Scalars['String']['output'];
  sourceName: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
};

/** Attributes for filtering Research Links */
export type ResearchLinkFilter = {
  authorCont?: InputMaybe<Scalars['String']['input']>;
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
  resourceLinkCont?: InputMaybe<Scalars['String']['input']>;
  sourceNameCont?: InputMaybe<Scalars['String']['input']>;
};

export type ResearchLinkPage = {
  nodes: Array<ResearchLink>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Autogenerated input type of ResetPostSecondaryApplicationsForStudentMutation */
export type ResetPostSecondaryApplicationsForStudentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of ResetPostSecondaryApplicationsForStudentMutation. */
export type ResetPostSecondaryApplicationsForStudentMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  student: Student;
};

export enum ResourceClass {
  /** Attachment file resource */
  ATTACHMENT = 'ATTACHMENT',
  /** Badge resource */
  BADGE = 'BADGE',
  /** Catalog resource */
  CATALOG = 'CATALOG',
  /** Course resource */
  COURSE = 'COURSE',
  /** Entity resource */
  ENTITY = 'ENTITY',
  /** ExtensionField resource */
  EXTENSION_FIELD = 'EXTENSION_FIELD',
  /** ExtensionFieldFile resource */
  EXTENSION_FIELD_FILE = 'EXTENSION_FIELD_FILE',
  /** Lesson resource */
  LESSON = 'LESSON',
  /** Opportunity resource */
  OPPORTUNITY = 'OPPORTUNITY',
  /** Partner resource */
  PARTNER = 'PARTNER',
  /** PartnerFile resource */
  PARTNER_FILE = 'PARTNER_FILE',
  /** Resource available for public read */
  PUBLIC_RESOURCE = 'PUBLIC_RESOURCE',
  /** SlideBackgroundImage resource */
  SLIDE_BACKGROUND_IMAGE = 'SLIDE_BACKGROUND_IMAGE',
  /** SlideImage resource */
  SLIDE_IMAGE = 'SLIDE_IMAGE',
  /** SlideVideo resource */
  SLIDE_VIDEO = 'SLIDE_VIDEO',
  /** Task resource */
  TASK = 'TASK',
  /** TaskFile resource */
  TASK_FILE = 'TASK_FILE',
  /** Track resource */
  TRACK = 'TRACK',
  /** Unit resource */
  UNIT = 'UNIT',
  /** Video resource */
  VIDEO = 'VIDEO'
}

/** Resource Duplicate Owner */
export type ResourceDuplicateOwner = {
  name: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

/** Autogenerated input type of RestoreCatalogMutation */
export type RestoreCatalogMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RestoreCatalogMutation. */
export type RestoreCatalogMutationPayload = {
  catalog: Catalog;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of RestoreExtensionFieldMutation */
export type RestoreExtensionFieldMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RestoreExtensionFieldMutation. */
export type RestoreExtensionFieldMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  extensionField: ExtensionField;
};

/** Autogenerated input type of RestorePartnerMutation */
export type RestorePartnerMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RestorePartnerMutation. */
export type RestorePartnerMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  partner: Partner;
};

/** Autogenerated input type of RestoreTrackMutation */
export type RestoreTrackMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RestoreTrackMutation. */
export type RestoreTrackMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  track: Track;
};

/** Autogenerated input type of RestoreUnitMutation */
export type RestoreUnitMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of RestoreUnitMutation. */
export type RestoreUnitMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  unit: Unit;
};

export type Result = {
  contextName: Scalars['String']['output'];
  gradedAt: Scalars['ISO8601Date']['output'];
  origin: ServiceNames;
  rubricName: Scalars['String']['output'];
  scoreEarned: Scalars['Int']['output'];
  tag: Tag;
};

export type Resume = {
  avatarUrl: Maybe<Scalars['String']['output']>;
  bio: Maybe<Scalars['String']['output']>;
  contactLinks: Array<ContactLink>;
  educations: Array<ResumeItem>;
  experiences: Array<ResumeItem>;
  externalResumes: Array<ExternalResume>;
  extraCurriculars: Array<ResumeItem>;
  highlightedBadges: Array<StudentBadge>;
  highlightedProjects: Array<PortfolioProject>;
  highlightedProjectsEnabled: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  shareCode: Maybe<Scalars['String']['output']>;
  sharedUrlEnabled: Scalars['Boolean']['output'];
  uuid: Scalars['ID']['output'];
};

export type ResumeItem = {
  description: Maybe<Scalars['String']['output']>;
  endedAt: Maybe<Scalars['ISO8601Date']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  startedAt: Scalars['ISO8601Date']['output'];
  type: ResumeItemTypes;
};

export enum ResumeItemTypes {
  /** Education Resume Item */
  EDUCATION = 'EDUCATION',
  /** Experience Resume Item */
  EXPERIENCE = 'EXPERIENCE',
  /** Extra curricular Resume Item */
  EXTRA_CURRICULAR = 'EXTRA_CURRICULAR'
}

/** All queries for User */
export type Root = {
  academyCourses: Array<AcademyCourse>;
  adminDashboard: Maybe<AdminDashboard>;
  announcement: Maybe<Announcement>;
  announcements: AnnouncementConnection;
  assessmentReport: Maybe<AssessmentReportFile>;
  assessmentReportFilters: AssessmentReportFilters;
  assignment: Maybe<Assignment>;
  assignments: AssignmentPage;
  attachment: Maybe<Attachment>;
  attachments: AttachmentPage;
  badge: Maybe<Badge>;
  badges: BadgePage;
  careerReviewSurveyLesson: Lesson;
  careerReviewSurveyReport: Maybe<CareerReviewSurveyReportFile>;
  careerReviewSurveyReportFilters: CareerReviewSurveyReportFilters;
  careersCatalog: Maybe<Catalog>;
  catalog: Maybe<Catalog>;
  catalogs: CatalogPage;
  checkInGroup: Maybe<CheckInGroup>;
  checkInGroups: CheckInGroupPage;
  checkInQuestion: Maybe<CheckInQuestion>;
  checkInQuestions: CheckInQuestionPage;
  clusters: Array<Cluster>;
  collections: Array<Collection>;
  commonAppForm: Maybe<Form>;
  contract: Maybe<Contract>;
  contracts: ContractPage;
  conversation: Maybe<Conversation>;
  conversationGroup: ConversationGroup;
  conversationGroups: ConversationGroupConnection;
  conversationRecipients: ConversationRecipientConnection;
  conversations: ConversationConnection;
  counselors: UserPage;
  course: Maybe<Course>;
  courseReport: Maybe<CourseReport>;
  courses: CoursePage;
  customCourses: CoursePage;
  entities: EntityPage;
  entity: Maybe<Entity>;
  extensionField: Maybe<ExtensionField>;
  extensionFields: Maybe<ExtensionFieldPage>;
  externalPresentation: Maybe<ExternalPresentation>;
  externalPresentations: ExternalPresentationPage;
  goalsPerformanceIndicatorsReport: Maybe<GoalsPerformanceIndicatorsReport>;
  goalsPlanReport: Maybe<GoalsPlanReport>;
  institution: Maybe<Institution>;
  institutions: InstitutionPage;
  lesson: Maybe<Lesson>;
  lessons: LessonPage;
  opportunities: OpportunityPage;
  opportunity: Maybe<Opportunity>;
  opportunityReport: Maybe<OpportunityReportFile>;
  opportunityReportFilters: OpportunityReportFilters;
  opportunityTags: Array<Scalars['String']['output']>;
  partner: Partner;
  partners: PartnerPage;
  pathwayReport: Maybe<PathwayReportFile>;
  pathwayReportFilters: PathwayReportFilters;
  pathways: Array<Pathway>;
  plan: Maybe<Plan>;
  planGroup: Maybe<PlanGroup>;
  planGroups: PlanGroupPage;
  planReport: Maybe<PlanReportFile>;
  planReportFilters: PlanReportFilters;
  plans: PlanPage;
  product: Maybe<Product>;
  products: ProductPage;
  recentApplications: OpportunityApplicationConnection;
  recommendationRequest: Maybe<RecommendationRequest>;
  recommendationRequests: RecommendationRequestPage;
  reports: Maybe<Reports>;
  researchLink: Maybe<ResearchLink>;
  researchLinks: ResearchLinkPage;
  rubric: Maybe<Rubric>;
  rubrics: RubricPage;
  schoolClass: Maybe<SchoolClass>;
  schoolClasses: SchoolClassPage;
  schoolClassesEnrolledInCourse: SchoolClassPage;
  services: Array<Service>;
  sharedResume: Resume;
  slide: Maybe<Slide>;
  slides: SlidePage;
  standardSet: Maybe<StandardSet>;
  standardSets: StandardSetPage;
  student: Maybe<Student>;
  studentApplications: Array<StudentApplication>;
  studentReport: StudentReport;
  students: StudentPage;
  studentsEnrolledInCourse: StudentPage;
  syncAttempts: SyncAttemptPage;
  tag: Maybe<Tag>;
  tagReportFilters: TagReportFilters;
  tags: TagPage;
  task: Maybe<Task>;
  tasks: TaskPage;
  teacherDashboard: Maybe<TeacherDashboard>;
  text: Maybe<Text>;
  texts: TextPage;
  track: Maybe<Track>;
  tracks: TrackPage;
  unit: Maybe<Unit>;
  units: UnitPage;
  user: Maybe<User>;
  userInfo: UserInfo;
  video: Maybe<Video>;
  videos: VideoPage;
  virtualInternship: Maybe<VirtualInternship>;
  virtualInternships: VirtualInternshipPage;
  vocabularies: VocabularyPage;
  vocabulary: Maybe<Vocabulary>;
};


/** All queries for User */
export type RootAnnouncementArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootAnnouncementsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootAssessmentReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootAssessmentReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
};


/** All queries for User */
export type RootAssignmentArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootAssignmentsArgs = {
  filter: InputMaybe<AssignmentFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootAttachmentArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootAttachmentsArgs = {
  filter: InputMaybe<AttachmentFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootBadgeArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootBadgesArgs = {
  filter?: InputMaybe<BadgeFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootCareerReviewSurveyReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootCareerReviewSurveyReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
};


/** All queries for User */
export type RootCatalogArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootCatalogsArgs = {
  filter: InputMaybe<CatalogFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootCheckInGroupArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootCheckInGroupsArgs = {
  filter?: InputMaybe<CheckInGroupFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootCheckInQuestionArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootCheckInQuestionsArgs = {
  filter?: InputMaybe<CheckInQuestionFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootCommonAppFormArgs = {
  studentUuid?: InputMaybe<Scalars['ID']['input']>;
  type: CommonAppFormTypes;
};


/** All queries for User */
export type RootContractArgs = {
  uuid: Scalars['ID']['input'];
};


/** All queries for User */
export type RootContractsArgs = {
  filter: InputMaybe<ContractFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootConversationArgs = {
  id: Scalars['ID']['input'];
  markAsRead: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootConversationGroupArgs = {
  with: InputMaybe<ConversationParticipantFilter>;
};


/** All queries for User */
export type RootConversationGroupsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootConversationRecipientsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConversationRecipientFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootConversationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  with: InputMaybe<ConversationParticipantFilter>;
};


/** All queries for User */
export type RootCounselorsArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootCourseArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootCourseReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootCoursesArgs = {
  filter: InputMaybe<CourseFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootCustomCoursesArgs = {
  filter: InputMaybe<CourseFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootEntityArgs = {
  uuid: Scalars['ID']['input'];
};


/** All queries for User */
export type RootExtensionFieldArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootExtensionFieldsArgs = {
  filter?: InputMaybe<ExtensionFieldFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootExternalPresentationArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootExternalPresentationsArgs = {
  filter: InputMaybe<ExternalPresentationFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootGoalsPerformanceIndicatorsReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootGoalsPlanReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootInstitutionArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootInstitutionsArgs = {
  filter?: InputMaybe<UserInstitutionFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootLessonArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootLessonsArgs = {
  filter: InputMaybe<LessonFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootOpportunitiesArgs = {
  filter?: InputMaybe<OpportunityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootOpportunityArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootOpportunityReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootOpportunityReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
};


/** All queries for User */
export type RootPartnerArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootPartnersArgs = {
  filter?: InputMaybe<PartnerFilter>;
  nameSortOrder?: InputMaybe<SortingOrder>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootPathwayReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootPathwayReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
};


/** All queries for User */
export type RootPlanArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootPlanGroupArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootPlanGroupsArgs = {
  filter?: InputMaybe<PlanGroupFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootPlanReportArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootPlanReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
  planId: Scalars['ID']['input'];
};


/** All queries for User */
export type RootPlansArgs = {
  filter: InputMaybe<PlanFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootProductArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootProductsArgs = {
  filter?: InputMaybe<ProductFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootRecentApplicationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootRecommendationRequestArgs = {
  studentUuid: Scalars['ID']['input'];
};


/** All queries for User */
export type RootRecommendationRequestsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootResearchLinkArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootResearchLinksArgs = {
  filter: InputMaybe<ResearchLinkFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootRubricArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootRubricsArgs = {
  filter: InputMaybe<RubricFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootSchoolClassArgs = {
  uuid: Scalars['ID']['input'];
};


/** All queries for User */
export type RootSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootSchoolClassesEnrolledInCourseArgs = {
  courseId: Scalars['ID']['input'];
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootSharedResumeArgs = {
  shareCode: Scalars['String']['input'];
};


/** All queries for User */
export type RootSlideArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootSlidesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootStandardSetArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootStandardSetsArgs = {
  filter?: InputMaybe<StandardSetFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootStudentArgs = {
  uuid: Scalars['ID']['input'];
};


/** All queries for User */
export type RootStudentApplicationsArgs = {
  studentUuid: Scalars['ID']['input'];
};


/** All queries for User */
export type RootStudentReportArgs = {
  planId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};


/** All queries for User */
export type RootStudentsArgs = {
  filter?: InputMaybe<StudentFilter>;
  fullNameSortOrder?: InputMaybe<SortingOrder>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootStudentsEnrolledInCourseArgs = {
  courseId: Scalars['ID']['input'];
  filter?: InputMaybe<StudentFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootSyncAttemptsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootTagArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootTagReportFiltersArgs = {
  filters?: InputMaybe<ReportFiltersFilter>;
  tagIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};


/** All queries for User */
export type RootTagsArgs = {
  filter?: InputMaybe<TagFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


/** All queries for User */
export type RootTaskArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootTasksArgs = {
  filter: InputMaybe<TaskFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootTeacherDashboardArgs = {
  userUuid?: InputMaybe<Scalars['ID']['input']>;
};


/** All queries for User */
export type RootTextArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootTextsArgs = {
  filter: InputMaybe<TextFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootTrackArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootTracksArgs = {
  filter: InputMaybe<TrackFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootUnitArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootUnitsArgs = {
  filter: InputMaybe<UnitFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootUserArgs = {
  uuid: Scalars['ID']['input'];
};


/** All queries for User */
export type RootVideoArgs = {
  id: Scalars['ID']['input'];
};


/** All queries for User */
export type RootVideosArgs = {
  filter: InputMaybe<VideoFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootVirtualInternshipArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootVirtualInternshipsArgs = {
  filter?: InputMaybe<VirtualInternshipFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


/** All queries for User */
export type RootVocabulariesArgs = {
  filter: InputMaybe<VocabularyFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope: InputMaybe<ArchivableStatus>;
  withCopies?: InputMaybe<Scalars['Boolean']['input']>;
};


/** All queries for User */
export type RootVocabularyArgs = {
  id: Scalars['ID']['input'];
};

export type Rubric = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  assignments: Array<Assignment>;
  canEdit: Scalars['Boolean']['output'];
  criteriaLabels: Array<RubricCriteriaLabel>;
  criterias: Array<RubricCriteria>;
  description: Scalars['String']['output'];
  displayName: Maybe<Scalars['String']['output']>;
  hasAlignedStatements: Scalars['Boolean']['output'];
  headings: Array<RubricHeading>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  owner: Maybe<User>;
  pointsAvailable: Scalars['Int']['output'];
  products: Array<Product>;
  uuid: Scalars['ID']['output'];
};

export type RubricCriteria = {
  id: Scalars['ID']['output'];
  rubricCriteriaLabelId: Scalars['ID']['output'];
  rubricHeadingId: Scalars['ID']['output'];
  text: Scalars['String']['output'];
  uuid: Scalars['ID']['output'];
};

export type RubricCriteriaLabel = {
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  rubric: Rubric;
  score: Scalars['Int']['output'];
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering Rubrics */
export type RubricFilter = {
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type RubricGradeResult = {
  criteriaId: Scalars['ID']['output'];
  trait: Maybe<Scalars['String']['output']>;
};

/** Attributes for creating and updating RubricGradeResult */
export type RubricGradeResultAttributes = {
  criteriaId: Scalars['ID']['input'];
  trait?: InputMaybe<Scalars['String']['input']>;
};

export type RubricHeading = {
  id: Scalars['ID']['output'];
  multiplier: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  plans: Array<Plan>;
  rubric: Rubric;
  statements: Array<PlanGroupStatement>;
  tags: Array<Tag>;
  uuid: Scalars['ID']['output'];
};

export type RubricHeadingPage = {
  nodes: Array<RubricHeading>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type RubricPage = {
  nodes: Array<Rubric>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type RubricScore = {
  currentScore: Scalars['Int']['output'];
  label: Scalars['String']['output'];
  maxScore: Scalars['Int']['output'];
};

/** Autogenerated input type of SaveCommonAppFormResponsesMutation */
export type SaveCommonAppFormResponsesMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  responses: Array<CommonAppFormResponseAttributes>;
  studentUuid?: InputMaybe<Scalars['ID']['input']>;
  type: CommonAppFormTypes;
};

/** Autogenerated return type of SaveCommonAppFormResponsesMutation. */
export type SaveCommonAppFormResponsesMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  errorCode: Maybe<Scalars['String']['output']>;
  errorMessage: Maybe<Scalars['String']['output']>;
  form: Form;
  incompleteResponses: Array<Scalars['ID']['output']>;
  invalidResponses: Array<InvalidResponse>;
  validResponses: Array<Scalars['ID']['output']>;
};

export type SchoolClass = AnnouncementTarget & {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  entity: Entity;
  gradingNeeded: Scalars['Boolean']['output'];
  isDemo: Scalars['Boolean']['output'];
  name: Maybe<Scalars['String']['output']>;
  parentName: Maybe<Scalars['String']['output']>;
  settings: SchoolClassSettings;
  students: StudentPage;
  studentsEnrolledInCourse: StudentPage;
  users: Maybe<UserPage>;
  uuid: Scalars['ID']['output'];
};


export type SchoolClassGradingNeededArgs = {
  filter: InputMaybe<GradingNeededFilter>;
};


export type SchoolClassStudentsArgs = {
  filter?: InputMaybe<StudentFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


export type SchoolClassStudentsEnrolledInCourseArgs = {
  courseId: Scalars['ID']['input'];
  gradingNeeded?: InputMaybe<Scalars['Boolean']['input']>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type SchoolClassUsersArgs = {
  filter: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type SchoolClassData = {
  enrolledCoursesCount: Scalars['Int']['output'];
  entityName: Scalars['String']['output'];
  finishedAssessmentsCount: Scalars['Int']['output'];
  finishedCoursesCount: Scalars['Int']['output'];
  gradingNeeded: Scalars['Boolean']['output'];
  isDemo: Scalars['Boolean']['output'];
  schoolClassName: Scalars['String']['output'];
  schoolClassUuid: Scalars['ID']['output'];
  settings: SchoolClassSettings;
  studentsCount: Scalars['Int']['output'];
};

/** Attributes for filtering SchoolClasses */
export type SchoolClassFilter = {
  entityNameCont?: InputMaybe<Scalars['String']['input']>;
  isDemoEq?: InputMaybe<Scalars['Boolean']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type SchoolClassPage = {
  nodes: Array<SchoolClass>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type SchoolClassSettings = {
  assessmentType: AssessmentTypes;
};

/** Attributes for updating School Class settings */
export type SchoolClassSettingsAttributes = {
  assessmentType?: InputMaybe<AssessmentTypes>;
};

export type SchoolYearStartDate = {
  day: Scalars['Int']['output'];
  month: Scalars['Int']['output'];
};

/** Attributes for updating entity school year start date */
export type SchoolYearStartDateAttributes = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  force?: InputMaybe<Scalars['Boolean']['input']>;
  value: DateAttributes;
};

export type SelfEvaluationEnabledSettings = {
  origin: StudentSettingsOrigins;
  value: Scalars['Boolean']['output'];
};

/** Autogenerated input type of SendMessageMutation */
export type SendMessageMutationInput = {
  body: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  conversationId: Scalars['ID']['input'];
};

/** Autogenerated return type of SendMessageMutation. */
export type SendMessageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  message: Message;
};

export type Service = {
  active: Scalars['Boolean']['output'];
  contracts: Array<Contract>;
  definedLearningId: Scalars['ID']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export enum ServiceNames {
  /** Careers service */
  CAREERS = 'CAREERS',
  /** Learning service */
  LEARNING = 'LEARNING',
  /**
   * Pbl service
   * @deprecated Use LEARNING instead
   */
  PBL = 'PBL'
}

export enum Services {
  /** Enum for resources related with `careers` service */
  CAREERS = 'CAREERS',
  /** Enum for resources related with `learning` service */
  LEARNING = 'LEARNING'
}

/** Autogenerated input type of SetEntityCatalogsMutation */
export type SetEntityCatalogsMutationInput = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  catalogIds: Array<Scalars['ID']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of SetEntityCatalogsMutation. */
export type SetEntityCatalogsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Entity;
};

/** Autogenerated input type of SetEntityReportTypesMutation */
export type SetEntityReportTypesMutationInput = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  reportTypes: Array<ReportTypes>;
};

/** Autogenerated return type of SetEntityReportTypesMutation. */
export type SetEntityReportTypesMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Entity;
};

/** Autogenerated input type of SetEntityTagsMutation */
export type SetEntityTagsMutationInput = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  tagIds: Array<Scalars['ID']['input']>;
};

/** Autogenerated return type of SetEntityTagsMutation. */
export type SetEntityTagsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Entity;
};

/** Attributes for settings */
export type SettingsAttributes = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  force?: InputMaybe<Scalars['Boolean']['input']>;
  value: Scalars['Boolean']['input'];
};

/** Autogenerated input type of ShareResourceMutation */
export type ShareResourceMutationInput = {
  allowLogin?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  resourceId: Scalars['ID']['input'];
  resourceType: SharedResourceTypes;
};

/** Autogenerated return type of ShareResourceMutation. */
export type ShareResourceMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  sharedResource: SharedResource;
};

export type SharedResource = {
  allowLogin: Scalars['Boolean']['output'];
  code: Scalars['String']['output'];
};

export enum SharedResourceTypes {
  /** Course recource */
  COURSE = 'COURSE'
}

export enum SizeTypes {
  /** Size for large institutions */
  LARGE = 'LARGE',
  /** Size for medium institutions */
  MEDIUM = 'MEDIUM',
  /** Size for small institutions */
  SMALL = 'SMALL',
  /** Size for very large institutions */
  VERY_LARGE = 'VERY_LARGE',
  /** Size for very small institutions */
  VERY_SMALL = 'VERY_SMALL'
}

export type Slide = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  backgroundColor: Maybe<Scalars['String']['output']>;
  backgroundImage: Maybe<Scalars['String']['output']>;
  checkInGroups: Array<CheckInGroup>;
  checkInQuestions: Array<CheckInQuestion>;
  content: SlideContent;
  description: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  iframeUrl: Maybe<Scalars['String']['output']>;
  isShared: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  notes: Maybe<Scalars['String']['output']>;
  products: Array<Product>;
  slideBackgroundImages: Array<SlideBackgroundImage>;
  step: Scalars['Int']['output'];
  subslides: Maybe<Array<Slide>>;
  template: Scalars['String']['output'];
};

export type SlideAttributes = {
  id: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type SlideBackgroundImage = {
  id: Scalars['ID']['output'];
  thumbnailUrl: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type SlideContent = {
  id: Scalars['ID']['output'];
  images: Array<SlideImage>;
  links: Array<SlideLink>;
  texts: Array<SlideTextItem>;
  videos: Array<SlideVideo>;
};

export type SlideImage = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  contentId: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  position: Maybe<Scalars['String']['output']>;
  style: Scalars['String']['output'];
  thumbnailUrl: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type SlideLink = {
  contentId: Scalars['ID']['output'];
  targetId: Scalars['ID']['output'];
  targetName: Scalars['String']['output'];
  text: Scalars['String']['output'];
};

/** Attributes for creating and updating slide links */
export type SlideLinksAttributes = {
  contentId: Scalars['ID']['input'];
  targetId: Scalars['ID']['input'];
  targetName: Scalars['String']['input'];
  text: Scalars['String']['input'];
};

export type SlidePage = {
  nodes: Array<Slide>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for creating and updating slide products */
export type SlideProductAttributes = {
  productId: Scalars['ID']['input'];
  step?: InputMaybe<Scalars['Int']['input']>;
};

export type SlideTextItem = {
  contentId: Scalars['String']['output'];
  /** @deprecated Use `contentId` */
  id: Scalars['String']['output'];
  style: Scalars['String']['output'];
  type: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

/** Attributes for creating and updating slide text items */
export type SlideTextItemsAttributes = {
  contentId: Scalars['ID']['input'];
  style: Scalars['String']['input'];
  type: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type SlideVideo = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  contentId: Scalars['String']['output'];
  filename: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  url: Maybe<Scalars['String']['output']>;
  videoUrl: Maybe<Scalars['String']['output']>;
};

export enum SortOrders {
  /** Ascending order */
  ASC = 'ASC',
  /** Descending order */
  DESC = 'DESC'
}

export enum SortingOrder {
  /** Sorting in ascending order */
  ASC = 'ASC',
  /** Sorting in descending order */
  DESC = 'DESC'
}

export type StandardSet = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  displayName: Maybe<Scalars['String']['output']>;
  entities: EntityPage;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  setId: Scalars['ID']['output'];
};


export type StandardSetEntitiesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for filtering StandardSets */
export type StandardSetFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type StandardSetPage = {
  nodes: Array<StandardSet>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type Student = ConversationMember & ConversationParticipant & Evaluator & ProductSubmissionFileSubmitter & {
  allCourses: CoursePage;
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  assessmentCompleted: Scalars['Boolean']['output'];
  assessmentResult: Maybe<AssessmentResult>;
  canPostSecondarySettingBeChanged: Scalars['Boolean']['output'];
  conversation: Maybe<Conversation>;
  conversationGroups: ConversationGroupConnection;
  conversations: ConversationConnection;
  counselor: Maybe<User>;
  course: Course;
  coursesCompleted: Scalars['Int']['output'];
  coursesEnrolled: Scalars['Int']['output'];
  currentCourses: Array<Course>;
  email: Maybe<Scalars['String']['output']>;
  entity: Maybe<StudentEntity>;
  finalReport: FinalReport;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  gradYear: Maybe<Scalars['Int']['output']>;
  gradingNeeded: Scalars['Boolean']['output'];
  hasPlans: Scalars['Boolean']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  onboardingCompleted: Scalars['Boolean']['output'];
  owner: Maybe<ConversationMember>;
  plan: Plan;
  plans: Array<Plan>;
  portfolio: Maybe<Portfolio>;
  postSecondaryApplicationsStatus: PostSecondaryApplicationsStatus;
  recommendedCourses: Array<Course>;
  schoolClasses: Array<SchoolClass>;
  settings: StudentSettings;
  sisId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};


export type StudentAllCoursesArgs = {
  filter: InputMaybe<StudentCourseFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};


export type StudentConversationArgs = {
  id: Scalars['ID']['input'];
};


export type StudentConversationGroupsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


export type StudentConversationsArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  with: ConversationParticipantFilter;
};


export type StudentCourseArgs = {
  id: Scalars['ID']['input'];
};


export type StudentFinalReportArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};


export type StudentPlanArgs = {
  id: Scalars['ID']['input'];
};


export type StudentPortfolioArgs = {
  track?: InputMaybe<Scalars['Boolean']['input']>;
};

/** StudentActivity Context */
export type StudentActivityContext = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type StudentActivityLogEntry = {
  activity: Maybe<Scalars['String']['output']>;
  context: Maybe<StudentActivityContext>;
  /** @deprecated Use updatedAt instead */
  createdAt: Scalars['ISO8601DateTime']['output'];
  student: Student;
  target: Maybe<StudentActivityTarget>;
  type: Maybe<StudentActivityTypes>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** The connection type for StudentActivityLogEntry. */
export type StudentActivityLogEntryConnection = {
  /** A list of edges. */
  edges: Maybe<Array<Maybe<StudentActivityLogEntryEdge>>>;
  /** A list of nodes. */
  nodes: Maybe<Array<Maybe<StudentActivityLogEntry>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int']['output'];
};

/** An edge in a connection. */
export type StudentActivityLogEntryEdge = {
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node: Maybe<StudentActivityLogEntry>;
};

/** StudentActivity Target */
export type StudentActivityTarget = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export enum StudentActivityTypes {
  /** Assignment submission student activity type */
  ASSIGNMENT_SUBMISSION = 'ASSIGNMENT_SUBMISSION',
  /** Check in question answer student activity type */
  CHECK_IN_QUESTION_ANSWER = 'CHECK_IN_QUESTION_ANSWER',
  /** Course assignment student activity type */
  COURSE_ASSIGNMENT = 'COURSE_ASSIGNMENT',
  /** Course enrollment student activity type */
  COURSE_ENROLLMENT = 'COURSE_ENROLLMENT'
}

export type StudentApplication = {
  /** @deprecated Use forms instead */
  formTypes: Array<CommonAppFormTypes>;
  forms: Array<CommonAppForm>;
  institution: Institution;
  /** @deprecated Use institution.name instead */
  institutionName: Scalars['String']['output'];
};

export type StudentBadge = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  isHighlighted: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  resource: StudentBadgeResource;
  thumbnailUrl: Scalars['String']['output'];
};

/** Returns for which resource badge was awarded */
export type StudentBadgeResource = {
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** Attributes for filtering Courses */
export type StudentCourseFilter = {
  collectionIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  pathwayIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  searchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<CourseTypes>;
};

/** Student Entity */
export type StudentEntity = {
  catalogs: Maybe<Array<Catalog>>;
  extensionFields: Maybe<Array<ExtensionField>>;
  gradingNeeded: Scalars['Boolean']['output'];
  name: Maybe<Scalars['String']['output']>;
  plans: Maybe<Array<Plan>>;
  regionName: Maybe<Scalars['String']['output']>;
  standardSets: Maybe<Array<StandardSet>>;
  uuid: Scalars['ID']['output'];
};

/** Attributes for filtering Students */
export type StudentFilter = {
  counselorUuidEq?: InputMaybe<Scalars['ID']['input']>;
  currentCoursesIdEq?: InputMaybe<Scalars['ID']['input']>;
  entityUuidIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  fullNameCont?: InputMaybe<Scalars['String']['input']>;
  gradYearIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  gradingStatus?: InputMaybe<StudentGradingStatusInput>;
  searchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
};

export type StudentGradingStatusInput = {
  courseId?: InputMaybe<Scalars['ID']['input']>;
  itemId: Scalars['ID']['input'];
  itemType: GradingItemTypes;
  status: GradingStatuses;
};

export type StudentMetrics = {
  enrolledCoursesCount: Scalars['Int']['output'];
  finishedAssessmentsCount: Scalars['Int']['output'];
  finishedCoursesCount: Scalars['Int']['output'];
  studentsCount: Scalars['Int']['output'];
};

export type StudentPage = {
  nodes: Array<Student>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type StudentReport = {
  goalPerformanceIndicatorsData: Array<GoalPerformanceData>;
  overallData: OverallData;
  plan: Plan;
  student: Student;
};

export type StudentSettings = {
  assessmentEnabled: AssessmentEnabledSettings;
  assessmentType: AssessmentTypeSettings;
  onboardingEnabled: OnboardingEnabledSettings;
  postSecondaryApplicationsEnabled: PostSecondaryApplicationsEnabledSettings;
  selfEvaluationEnabled: SelfEvaluationEnabledSettings;
};

/** Attributes for updating Student settings */
export type StudentSettingsAttributes = {
  assessmentEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  assessmentType?: InputMaybe<AssessmentTypes>;
  onboardingEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  postSecondaryApplicationsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  selfEvaluationEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum StudentSettingsOrigins {
  /** Default system settings value */
  DEFAULT = 'DEFAULT',
  /** Settings value set individually for student */
  INDIVIDUAL = 'INDIVIDUAL',
  /** Settings value set on student's entity/class */
  INHERITED = 'INHERITED'
}

export type StudyPreferencesPositionsDistribution = {
  area: Scalars['String']['output'];
  results: StudyPreferencesResult;
};

export type StudyPreferencesResult = {
  area: Scalars['String']['output'];
  description: Scalars['String']['output'];
  position: Scalars['Int']['output'];
  position1: Scalars['Int']['output'];
  position2: Scalars['Int']['output'];
  position3: Scalars['Int']['output'];
  position4: Scalars['Int']['output'];
  position5: Scalars['Int']['output'];
  position6: Scalars['Int']['output'];
  position7: Scalars['Int']['output'];
};

export enum SubmissionFileSource {
  /** Submissions uploaded from Google Drive */
  GOOGLE = 'GOOGLE',
  /** Submissions uploaded from disk */
  LOCAL = 'LOCAL'
}

export type SubmissionGrade = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  lastGradedBy: Maybe<User>;
  status: SubmissionGradeStatuses;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export enum SubmissionGradeStatuses {
  /** Status for accepted submission grades */
  ACCEPTED = 'ACCEPTED',
  /** Status for not accepted submission grades */
  NOT_ACCEPTED = 'NOT_ACCEPTED'
}

export enum SubmissionStatus {
  /** Submissions of draft status */
  DRAFT = 'DRAFT',
  /** Submissions of submitted status */
  SUBMITTED = 'SUBMITTED'
}

export enum SubmissionTypes {
  /** Assignment submission type */
  ASSIGNMENT = 'ASSIGNMENT',
  /** Check-in answer submission type */
  CHECK_IN = 'CHECK_IN'
}

/** Autogenerated input type of SubmitCommonAppFormResponsesMutation */
export type SubmitCommonAppFormResponsesMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  institutionId?: InputMaybe<Scalars['ID']['input']>;
  studentUuid: Scalars['ID']['input'];
  type: CommonAppFormTypes;
};

/** Autogenerated return type of SubmitCommonAppFormResponsesMutation. */
export type SubmitCommonAppFormResponsesMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Attributes for creating and updating subslides */
export type SubslideAttributes = {
  slideId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type Summary = {
  assessmentCompleted: Scalars['Int']['output'];
  assessmentTaken: Scalars['Int']['output'];
  averageCompletion: Scalars['Float']['output'];
  studentsCompleted: Scalars['Int']['output'];
  studentsInProgress: Scalars['Int']['output'];
  studentsTotal: Scalars['Int']['output'];
};

export type SyncAttempt = {
  contract: Contract;
  duration: Maybe<Scalars['Int']['output']>;
  errorMessage: Maybe<Scalars['String']['output']>;
  finishedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  resources: Array<SyncResources>;
  startedAt: Scalars['ISO8601DateTime']['output'];
  status: SyncAttemptStatuses;
};

export type SyncAttemptPage = {
  nodes: Array<SyncAttempt>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum SyncAttemptStatuses {
  /** Failed */
  FAILED = 'FAILED',
  /** In progress */
  IN_PROGRESS = 'IN_PROGRESS',
  /** Queued */
  QUEUED = 'QUEUED',
  /** Success */
  SUCCESS = 'SUCCESS'
}

/** Autogenerated input type of SyncCommonAppDataMutation */
export type SyncCommonAppDataMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of SyncCommonAppDataMutation. */
export type SyncCommonAppDataMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: CommonAppSyncStatus;
};

export enum SyncResources {
  /** Entity level */
  ENTITY = 'ENTITY',
  /** School Class level */
  SCHOOL_CLASS = 'SCHOOL_CLASS',
  /** Student level */
  STUDENT = 'STUDENT',
  /** User level */
  USER = 'USER'
}

/** Autogenerated input type of SyncStandardSetsMutation */
export type SyncStandardSetsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of SyncStandardSetsMutation. */
export type SyncStandardSetsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

export type Tag = {
  hasEntities: Scalars['Boolean']['output'];
  hasRubricHeadings: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  isDefault: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  rubricHeadings: RubricHeadingPage;
  type: TagTypes;
};


export type TagRubricHeadingsArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for filtering Tags */
export type TagFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  typeEq?: InputMaybe<TagTypes>;
};

export type TagPage = {
  nodes: Array<Tag>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type TagPeriod = {
  averageScore: Scalars['Float']['output'];
  period: Scalars['Int']['output'];
  periodEnd: Scalars['ISO8601Date']['output'];
  periodStart: Scalars['ISO8601Date']['output'];
  studentsCount: Scalars['Int']['output'];
};

export type TagReport = {
  studentsCount: Scalars['Int']['output'];
  tagSummary: TagSummary;
  tagsResults: TagResultPage;
};


export type TagReportTagSummaryArgs = {
  filter: TagReportSummaryFilter;
};


export type TagReportTagsResultsArgs = {
  filter: TagReportResultsFilter;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  sort: InputMaybe<TagReportResultsSortAttributes>;
};

export type TagReportFilters = {
  entities: EntityPage;
  gradeLevels: Array<Scalars['String']['output']>;
  schoolClasses: SchoolClassPage;
  users: UserPage;
};


export type TagReportFiltersEntitiesArgs = {
  filter?: InputMaybe<EntityFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type TagReportFiltersSchoolClassesArgs = {
  filter?: InputMaybe<SchoolClassFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type TagReportFiltersUsersArgs = {
  filter?: InputMaybe<UserFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for filtering tag reports */
export type TagReportResultsFilter = {
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  resultsFilter?: InputMaybe<TagReportTagResultsFilter>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear: Scalars['Int']['input'];
  tagIds: Array<Scalars['ID']['input']>;
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type TagReportResultsSortAttributes = {
  column?: InputMaybe<TagReportResultsSortColumns>;
  order?: InputMaybe<SortingOrder>;
};

export enum TagReportResultsSortColumns {
  /** Sorting by graded at */
  GRADED_AT = 'GRADED_AT',
  /** Sorting by rubric name */
  RUBRIC_NAME = 'RUBRIC_NAME',
  /** Sorting by Student name */
  STUDENT_NAME = 'STUDENT_NAME',
  /** Sorting by Student sis id */
  STUDENT_SIS_ID = 'STUDENT_SIS_ID'
}

/** Attributes for filtering summary of tag reports */
export type TagReportSummaryFilter = {
  aggregationPeriod: AggregationPeriod;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  gradeLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  schoolClassUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  schoolYear: Scalars['Int']['input'];
  tagId: Scalars['ID']['input'];
  userUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type TagReportTagResultsFilter = {
  fullNameOrSisIdCont?: InputMaybe<Scalars['String']['input']>;
  tagIdIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type TagResult = {
  contextName: Scalars['String']['output'];
  gradedAt: Scalars['ISO8601DateTime']['output'];
  platform: ServiceNames;
  rubricName: Scalars['String']['output'];
  scoreEarned: Scalars['Int']['output'];
  scoreMaximum: Scalars['Int']['output'];
  sourceName: Scalars['String']['output'];
  studentFullName: Scalars['String']['output'];
  studentSisId: Maybe<Scalars['String']['output']>;
  tags: Array<Tag>;
};

export type TagResultPage = {
  nodes: Array<TagResult>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type TagSummary = {
  aggregationPeriods: Array<TagPeriod>;
  cumulativeAverageScore: Scalars['Float']['output'];
  studentsCount: Scalars['Int']['output'];
  tag: Tag;
};

export enum TagTypes {
  /** Entity */
  ENTITY = 'ENTITY',
  /** System */
  SYSTEM = 'SYSTEM'
}

export type Task = ConversationContext & StudentBadgeResource & {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  badges: Array<Badge>;
  checkInGroups: Array<CheckInGroup>;
  checkInQuestions: Array<CheckInQuestion>;
  courses: Array<Course>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Maybe<Scalars['String']['output']>;
  files: Array<TaskFile>;
  id: Scalars['ID']['output'];
  imageUrl: Maybe<Scalars['String']['output']>;
  introduction: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  owner: Maybe<ResourceDuplicateOwner>;
  pathways: Array<Pathway>;
  presentation: Maybe<Presentation>;
  presentationUrl: Maybe<Scalars['String']['output']>;
  products: Array<Product>;
  standard: Maybe<Scalars['String']['output']>;
  status: TaskStatuses;
  step: Maybe<Scalars['Int']['output']>;
  studentResources: Maybe<Scalars['String']['output']>;
  teachingResources: Maybe<Scalars['String']['output']>;
  thumbnailUrl: Maybe<Scalars['String']['output']>;
  units: Array<Unit>;
};

export type TaskFile = {
  description: Maybe<Scalars['String']['output']>;
  displayName: Scalars['String']['output'];
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  step: Maybe<Scalars['Int']['output']>;
  task: Task;
  url: Scalars['String']['output'];
};


export type TaskFileUrlArgs = {
  options?: InputMaybe<PresignedUrlOptions>;
};

/** Attributes for updating task files order */
export type TaskFileAttributes = {
  id: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

/** Attributes for filtering Tasks */
export type TaskFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  searchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
  statusEq?: InputMaybe<TaskStatuses>;
};

export type TaskPage = {
  nodes: Array<Task>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for creating and updating task products */
export type TaskProductAttributes = {
  productId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export enum TaskStatuses {
  /** Status for draft tasks */
  DRAFT = 'DRAFT',
  /** Status for published tasks */
  PUBLISHED = 'PUBLISHED'
}

export type TeacherDashboard = {
  activityLog: StudentActivityLogEntryConnection;
  careerReviewSurveyReport: Array<CareerReviewSurveyQuestionReport>;
  clusterCompletionStats: Array<ClusterCompletionStatsEntry>;
  clusterEnrollmentStats: Array<TeacherDashboardClusterEnrollmentStatsEntry>;
  clusterRecommendationStats: Array<ClusterRecommendationStatsEntry>;
  courseCompletionStats: Array<CourseCompletionStatsEntry>;
  courseEnrollmentStats: Array<CourseEnrollmentStatsEntry>;
  myReports: TeacherDashboardMyReport;
  pathwayCompletionStats: Array<TeacherDashboardPathwayEnrollmentStatsEntry>;
  pathwayEnrollmentStats: Array<PathwayEnrollmentStatsEntry>;
  pathwayRecommendationStats: Array<PathwayRecommendationStatsEntry>;
  planFulfillmentReport: PlanFulfillmentReport;
  plans: Array<Plan>;
  schoolClasses: Array<SchoolClassData>;
  userId: Scalars['ID']['output'];
};


export type TeacherDashboardActivityLogArgs = {
  after: InputMaybe<Scalars['String']['input']>;
  before: InputMaybe<Scalars['String']['input']>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardClusterCompletionStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardClusterEnrollmentStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardClusterRecommendationStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardCourseCompletionStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardCourseEnrollmentStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardPathwayCompletionStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardPathwayEnrollmentStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardPathwayRecommendationStatsArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardPlanFulfillmentReportArgs = {
  planId: Scalars['ID']['input'];
};


export type TeacherDashboardSchoolClassesArgs = {
  scope?: InputMaybe<ArchivableStatus>;
};

export type TeacherDashboardClusterEnrollmentStatsEntry = {
  cluster: Cluster;
  studentsCount: Scalars['Int']['output'];
};

export type TeacherDashboardMyReport = {
  assessmentsFinished: Scalars['Int']['output'];
  assignmentsSubmitted: Scalars['Int']['output'];
  coursesEnrolled: Scalars['Int']['output'];
  coursesFinished: Scalars['Int']['output'];
};


export type TeacherDashboardMyReportAssessmentsFinishedArgs = {
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardMyReportAssignmentsSubmittedArgs = {
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardMyReportCoursesEnrolledArgs = {
  startYear?: InputMaybe<Scalars['Int']['input']>;
};


export type TeacherDashboardMyReportCoursesFinishedArgs = {
  startYear?: InputMaybe<Scalars['Int']['input']>;
};

export type TeacherDashboardPathwayEnrollmentStatsEntry = {
  pathway: Pathway;
  studentsCount: Scalars['Int']['output'];
};

export type Team = ConversationParticipant & {
  email: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isArchived: Scalars['Boolean']['output'];
  members: Maybe<Array<ConversationMember>>;
  name: Scalars['String']['output'];
  owner: TeamOwner;
  students: StudentPage;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};


export type TeamStudentsArgs = {
  filter?: InputMaybe<StudentFilter>;
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

export type TeamOwner = {
  email: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  lastName: Maybe<Scalars['String']['output']>;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type Text = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  content: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  lessons: Array<Lesson>;
  name: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
};

/** Attributes for filtering Texts */
export type TextFilter = {
  contentCont?: InputMaybe<Scalars['String']['input']>;
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type TextPage = {
  nodes: Array<Text>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Autogenerated input type of ToggleEntityReportTypeAvailabilityMutation */
export type ToggleEntityReportTypeAvailabilityMutationInput = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  reportType: ReportTypes;
  value: Scalars['Boolean']['input'];
};

/** Autogenerated return type of ToggleEntityReportTypeAvailabilityMutation. */
export type ToggleEntityReportTypeAvailabilityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Entity;
};

/** Autogenerated input type of TogglePostSecondaryApplicationsForStudentsMutation */
export type TogglePostSecondaryApplicationsForStudentsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  studentUuids: Array<Scalars['ID']['input']>;
  value: Scalars['Boolean']['input'];
};

/** Autogenerated return type of TogglePostSecondaryApplicationsForStudentsMutation. */
export type TogglePostSecondaryApplicationsForStudentsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  students: Array<Student>;
};

export type Track = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  catalogs: Array<Catalog>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Maybe<Scalars['String']['output']>;
  grades: Array<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  resourcesCount: Scalars['Int']['output'];
  service: Services;
  shortDescription: Maybe<Scalars['String']['output']>;
  status: TrackStatuses;
  step: Maybe<Scalars['Int']['output']>;
  thumbnailUrl: Scalars['String']['output'];
  units: Array<Unit>;
};

/** Attributes for filtering Tracks */
export type TrackFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  serviceEq?: InputMaybe<Services>;
  statusEq?: InputMaybe<TrackStatuses>;
};

export type TrackPage = {
  nodes: Array<Track>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum TrackStatuses {
  /** Status for draft tracks */
  DRAFT = 'DRAFT',
  /** Status for published tracks */
  PUBLISHED = 'PUBLISHED'
}

/** Attributes for creating and updating track units */
export type TrackUnitAttributes = {
  step: Scalars['Int']['input'];
  unitId: Scalars['ID']['input'];
};

/** Autogenerated input type of UnassignCatalogFromEntityMutation */
export type UnassignCatalogFromEntityMutationInput = {
  catalogId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  unassignFromHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UnassignCatalogFromEntityMutation. */
export type UnassignCatalogFromEntityMutationPayload = {
  catalog: Maybe<Catalog>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UnassignExtensionFieldFromEntityMutation */
export type UnassignExtensionFieldFromEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  extensionFieldId: Scalars['ID']['input'];
  unassignFromHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UnassignExtensionFieldFromEntityMutation. */
export type UnassignExtensionFieldFromEntityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  extensionField: Maybe<ExtensionField>;
};

/** Autogenerated input type of UnassignPlanFromEntityMutation */
export type UnassignPlanFromEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  planId: Scalars['ID']['input'];
  unassignFromHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UnassignPlanFromEntityMutation. */
export type UnassignPlanFromEntityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  plan: Maybe<Plan>;
};

/** Autogenerated input type of UnassignRubricFromAssignmentMutation */
export type UnassignRubricFromAssignmentMutationInput = {
  assignmentId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  rubricId: Scalars['ID']['input'];
};

/** Autogenerated return type of UnassignRubricFromAssignmentMutation. */
export type UnassignRubricFromAssignmentMutationPayload = {
  assignment: Maybe<Assignment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UnassignRubricFromProductMutation */
export type UnassignRubricFromProductMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  productId: Scalars['ID']['input'];
  rubricId: Scalars['ID']['input'];
};

/** Autogenerated return type of UnassignRubricFromProductMutation. */
export type UnassignRubricFromProductMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  product: Maybe<Product>;
};

/** Autogenerated input type of UnassignSchoolClassFromCourseMutation */
export type UnassignSchoolClassFromCourseMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId: Scalars['ID']['input'];
  schoolClassUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UnassignSchoolClassFromCourseMutation. */
export type UnassignSchoolClassFromCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of UnassignStandardSetFromEntityMutation */
export type UnassignStandardSetFromEntityMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  entityUuid: Scalars['ID']['input'];
  standardSetId: Scalars['ID']['input'];
  unassignFromHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UnassignStandardSetFromEntityMutation. */
export type UnassignStandardSetFromEntityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  standardSet: Maybe<StandardSet>;
};

/** Autogenerated input type of UnassignStudentFromCourseMutation */
export type UnassignStudentFromCourseMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UnassignStudentFromCourseMutation. */
export type UnassignStudentFromCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  courseId: Scalars['ID']['output'];
};

export type Unit = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  courses: Array<Course>;
  description: Maybe<Scalars['String']['output']>;
  displayName: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  imageUrl: Scalars['String']['output'];
  name: Scalars['String']['output'];
  opportunities: Array<Opportunity>;
  resources: Array<UnitResource>;
  service: Maybe<Services>;
  status: UnitStatuses;
  step: Maybe<Scalars['Int']['output']>;
  tasks: Array<Task>;
  thumbnailUrl: Scalars['String']['output'];
  tracks: Array<Track>;
};

/** Attributes for filtering Units */
export type UnitFilter = {
  nameCont?: InputMaybe<Scalars['String']['input']>;
  serviceEq?: InputMaybe<Services>;
  statusEq?: InputMaybe<UnitStatuses>;
};

export type UnitPage = {
  nodes: Array<Unit>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type UnitResource = {
  description: Maybe<Scalars['String']['output']>;
  imageUrl: Maybe<Scalars['String']['output']>;
  isVirtualInternship: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  pathways: Array<Pathway>;
  resourceId: Scalars['ID']['output'];
  resourceType: UnitResourceTypes;
  step: Scalars['Int']['output'];
  thumbnailUrl: Maybe<Scalars['String']['output']>;
};

/** Attributes for creating and updating unit resources */
export type UnitResourceAttributes = {
  resourceId: Scalars['ID']['input'];
  resourceType: UnitResourceTypes;
  step: Scalars['Int']['input'];
};

export enum UnitResourceTypes {
  /** Course resource type */
  COURSE = 'COURSE',
  /** Opportunity resource type */
  OPPORTUNITY = 'OPPORTUNITY'
}

export enum UnitStatuses {
  /** Status for draft units */
  DRAFT = 'DRAFT',
  /** Status for published units */
  PUBLISHED = 'PUBLISHED'
}

/** Attributes for creating and updating unit tasks */
export type UnitTaskAttributes = {
  step: Scalars['Int']['input'];
  taskId: Scalars['ID']['input'];
};

/** Autogenerated input type of UnlockStatementMutation */
export type UnlockStatementMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  statementId: Scalars['ID']['input'];
  studentUuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UnlockStatementMutation. */
export type UnlockStatementMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  student: Maybe<Student>;
};

/** Autogenerated input type of UnsubmitCommonAppFormResponsesMutation */
export type UnsubmitCommonAppFormResponsesMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  institutionId?: InputMaybe<Scalars['ID']['input']>;
  studentUuid: Scalars['ID']['input'];
  type: CommonAppFormTypes;
};

/** Autogenerated return type of UnsubmitCommonAppFormResponsesMutation. */
export type UnsubmitCommonAppFormResponsesMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
};

/** Autogenerated input type of UpdateAssignmentMutation */
export type UpdateAssignmentMutationInput = {
  assetName: Scalars['String']['input'];
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  rubricIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of UpdateAssignmentMutation. */
export type UpdateAssignmentMutationPayload = {
  assignment: Maybe<Assignment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateAttachmentMutation */
export type UpdateAttachmentMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateAttachmentMutation. */
export type UpdateAttachmentMutationPayload = {
  attachment: Maybe<Attachment>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateBadgeMutation */
export type UpdateBadgeMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateBadgeMutation. */
export type UpdateBadgeMutationPayload = {
  badge: Maybe<Badge>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateCatalogMutation */
export type UpdateCatalogMutationInput = {
  catalogTracks?: InputMaybe<Array<CatalogTrackAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<CatalogStatuses>;
};

/** Autogenerated return type of UpdateCatalogMutation. */
export type UpdateCatalogMutationPayload = {
  catalog: Maybe<Catalog>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateCheckInGroupMutation */
export type UpdateCheckInGroupMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  checkInQuestions?: InputMaybe<Array<CheckInQuestionAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateCheckInGroupMutation. */
export type UpdateCheckInGroupMutationPayload = {
  checkInGroup: Maybe<CheckInGroup>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateCheckInQuestionMutation */
export type UpdateCheckInQuestionMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  question?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateCheckInQuestionMutation. */
export type UpdateCheckInQuestionMutationPayload = {
  checkInQuestion: Maybe<CheckInQuestion>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateContractMutation */
export type UpdateContractMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  syncable: Scalars['Boolean']['input'];
};

/** Autogenerated return type of UpdateContractMutation. */
export type UpdateContractMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  contract: Maybe<Contract>;
};

/** Autogenerated input type of UpdateCourseMutation */
export type UpdateCourseMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  collectionId?: InputMaybe<Scalars['ID']['input']>;
  courseLessons?: InputMaybe<Array<CourseLessonAttributes>>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  isGlobal?: InputMaybe<Scalars['Boolean']['input']>;
  metadata?: InputMaybe<CourseMetadataAttributes>;
  name?: InputMaybe<Scalars['String']['input']>;
  pathwayId?: InputMaybe<Scalars['ID']['input']>;
  status?: InputMaybe<CourseStatuses>;
  type?: InputMaybe<CourseTypes>;
};

/** Autogenerated return type of UpdateCourseMutation. */
export type UpdateCourseMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  course: Maybe<Course>;
};

/** Autogenerated input type of UpdateEntityCatalogsMutation */
export type UpdateEntityCatalogsMutationInput = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  catalogs: Array<EntityCatalogAttributes>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateEntityCatalogsMutation. */
export type UpdateEntityCatalogsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Maybe<Entity>;
};

/** Autogenerated input type of UpdateEntityMutation */
export type UpdateEntityMutationInput = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  dcIconFilename?: InputMaybe<Scalars['String']['input']>;
  dcIconUuid?: InputMaybe<Scalars['ID']['input']>;
  dcLogoFilename?: InputMaybe<Scalars['String']['input']>;
  dcLogoUuid?: InputMaybe<Scalars['ID']['input']>;
  dlIconFilename?: InputMaybe<Scalars['String']['input']>;
  dlIconUuid?: InputMaybe<Scalars['ID']['input']>;
  dlLogoFilename?: InputMaybe<Scalars['String']['input']>;
  dlLogoUuid?: InputMaybe<Scalars['ID']['input']>;
  uuid: Scalars['ID']['input'];
  welcomeMessage?: InputMaybe<WelcomeMessageAttributes>;
};

/** Autogenerated return type of UpdateEntityMutation. */
export type UpdateEntityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Maybe<Entity>;
};

/** Autogenerated input type of UpdateEntityPlansMutation */
export type UpdateEntityPlansMutationInput = {
  applyToHierarchy?: InputMaybe<Scalars['Boolean']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  plans: Array<EntityPlanAttributes>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateEntityPlansMutation. */
export type UpdateEntityPlansMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Maybe<Entity>;
};

/** Autogenerated input type of UpdateEntitySettingsMutation */
export type UpdateEntitySettingsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  settings: EntitySettingsAttributes;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateEntitySettingsMutation. */
export type UpdateEntitySettingsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  entity: Maybe<Entity>;
};

/** Autogenerated input type of UpdateExtensionFieldMutation */
export type UpdateExtensionFieldMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  clusterIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  courseIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  links?: InputMaybe<Array<ExtensionFieldLinkAttributes>>;
  name?: InputMaybe<Scalars['String']['input']>;
  pathwayIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  publishedFrom?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  publishedTo?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  status?: InputMaybe<ExtensionFieldStatuses>;
};

/** Autogenerated return type of UpdateExtensionFieldMutation. */
export type UpdateExtensionFieldMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  extensionField: Maybe<ExtensionField>;
};

/** Autogenerated input type of UpdateExternalPresentationMutation */
export type UpdateExternalPresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  isExpandable?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  source: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateExternalPresentationMutation. */
export type UpdateExternalPresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  externalPresentation: Maybe<ExternalPresentation>;
};

/** Autogenerated input type of UpdateLessonMutation */
export type UpdateLessonMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  checkInItems?: InputMaybe<Array<CheckInItemAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<LessonDescriptionAttributes>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  lessonItems?: InputMaybe<Array<LessonItemAttributes>>;
  name?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<LessonTypes>;
};

/** Autogenerated return type of UpdateLessonMutation. */
export type UpdateLessonMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  lesson: Maybe<Lesson>;
};

/** Autogenerated input type of UpdateOpportunityApplicationMutation */
export type UpdateOpportunityApplicationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  status: ApplicationStatus;
};

/** Autogenerated return type of UpdateOpportunityApplicationMutation. */
export type UpdateOpportunityApplicationMutationPayload = {
  application: Maybe<OpportunityApplication>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of UpdateOpportunityMutation */
export type UpdateOpportunityMutationInput = {
  automaticAcceptance?: InputMaybe<Scalars['Boolean']['input']>;
  availableSpots?: InputMaybe<Scalars['Int']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  creditsOutcomes?: InputMaybe<Scalars['String']['input']>;
  deadline?: InputMaybe<Scalars['ISO8601Date']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageFitToContainer?: InputMaybe<Scalars['Boolean']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  opportunityType?: InputMaybe<OpportunityTypes>;
  partnerId?: InputMaybe<Scalars['ID']['input']>;
  pathwayIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  periodEnd?: InputMaybe<Scalars['ISO8601Date']['input']>;
  periodStart?: InputMaybe<Scalars['ISO8601Date']['input']>;
  salaryInformation?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  visibilityScope?: InputMaybe<VisibilityScope>;
};

/** Autogenerated return type of UpdateOpportunityMutation. */
export type UpdateOpportunityMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  opportunity: Maybe<Opportunity>;
};

/** Autogenerated input type of UpdatePartnerMutation */
export type UpdatePartnerMutationInput = {
  about?: InputMaybe<Scalars['String']['input']>;
  additionalUrls?: InputMaybe<Array<Scalars['String']['input']>>;
  address?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  details?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  entityUuids?: InputMaybe<Array<Scalars['ID']['input']>>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageFitToContainer?: InputMaybe<Scalars['Boolean']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  opportunityIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  pathwayIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  phone?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<PartnerStatuses>;
  url?: InputMaybe<Scalars['String']['input']>;
  visibilityScope?: InputMaybe<VisibilityScope>;
};

/** Autogenerated return type of UpdatePartnerMutation. */
export type UpdatePartnerMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  partner: Maybe<Partner>;
};

/** Autogenerated input type of UpdatePlanGroupMutation */
export type UpdatePlanGroupMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  statementsOrder?: InputMaybe<Array<PlanGroupStatementAttributes>>;
};

/** Autogenerated return type of UpdatePlanGroupMutation. */
export type UpdatePlanGroupMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroup: Maybe<PlanGroup>;
};

/** Autogenerated input type of UpdatePlanGroupStatementMutation */
export type UpdatePlanGroupStatementMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  question?: InputMaybe<PlanGroupStatementQuestionAttributes>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Autogenerated return type of UpdatePlanGroupStatementMutation. */
export type UpdatePlanGroupStatementMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  planGroupStatement: Maybe<PlanGroupStatement>;
};

/** Autogenerated input type of UpdatePlanMutation */
export type UpdatePlanMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  planGroups?: InputMaybe<Array<PlanGroupAttributes>>;
};

/** Autogenerated return type of UpdatePlanMutation. */
export type UpdatePlanMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  plan: Maybe<Plan>;
};

/** Autogenerated input type of UpdatePresentationMutation */
export type UpdatePresentationMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  presentationSlides?: InputMaybe<Array<PresentationSlideAttributes>>;
  status?: InputMaybe<PresentationStatuses>;
  transition?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<PresentationTypes>;
  typography?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdatePresentationMutation. */
export type UpdatePresentationMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  presentation: Maybe<Presentation>;
};

/** Autogenerated input type of UpdateProductMutation */
export type UpdateProductMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  rubricIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  rubricsUrl?: InputMaybe<Scalars['String']['input']>;
  status: ProductStatuses;
};

/** Autogenerated return type of UpdateProductMutation. */
export type UpdateProductMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  product: Maybe<Product>;
};

/** Autogenerated input type of UpdateResearchLinkMutation */
export type UpdateResearchLinkMutationInput = {
  author?: InputMaybe<Scalars['String']['input']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
  resourceLink: Scalars['String']['input'];
  sourceName: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateResearchLinkMutation. */
export type UpdateResearchLinkMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  researchLink: Maybe<ResearchLink>;
};

/** Autogenerated input type of UpdateRubricCriteriaLabelMutation */
export type UpdateRubricCriteriaLabelMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  score?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated return type of UpdateRubricCriteriaLabelMutation. */
export type UpdateRubricCriteriaLabelMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricCriteriaLabel: Maybe<RubricCriteriaLabel>;
};

/** Autogenerated input type of UpdateRubricCriteriaMutation */
export type UpdateRubricCriteriaMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  rubricCriteriaLabelId?: InputMaybe<Scalars['ID']['input']>;
  rubricHeadingId?: InputMaybe<Scalars['ID']['input']>;
  text?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateRubricCriteriaMutation. */
export type UpdateRubricCriteriaMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricCriteria: Maybe<RubricCriteria>;
};

/** Autogenerated input type of UpdateRubricHeadingMutation */
export type UpdateRubricHeadingMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  multiplier?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  tagIds?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/** Autogenerated return type of UpdateRubricHeadingMutation. */
export type UpdateRubricHeadingMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubricHeading: Maybe<RubricHeading>;
};

/** Autogenerated input type of UpdateRubricMutation */
export type UpdateRubricMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateRubricMutation. */
export type UpdateRubricMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  rubric: Maybe<Rubric>;
};

/** Autogenerated input type of UpdateSchoolClassSettingsMutation */
export type UpdateSchoolClassSettingsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  force?: InputMaybe<Scalars['Boolean']['input']>;
  settings?: InputMaybe<SchoolClassSettingsAttributes>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateSchoolClassSettingsMutation. */
export type UpdateSchoolClassSettingsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  schoolClass: Maybe<SchoolClass>;
};

/** Autogenerated input type of UpdateSlideImageMutation */
export type UpdateSlideImageMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  position?: InputMaybe<Scalars['String']['input']>;
  style?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateSlideImageMutation. */
export type UpdateSlideImageMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideImage: Maybe<SlideImage>;
};

/** Autogenerated input type of UpdateSlideMutation */
export type UpdateSlideMutationInput = {
  backgroundColor?: InputMaybe<Scalars['String']['input']>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  checkInItems?: InputMaybe<Array<CheckInItemAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  iframeUrl?: InputMaybe<Scalars['String']['input']>;
  isShared?: InputMaybe<Scalars['Boolean']['input']>;
  links?: InputMaybe<Array<SlideLinksAttributes>>;
  name?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  products?: InputMaybe<Array<SlideProductAttributes>>;
  subslides?: InputMaybe<Array<SubslideAttributes>>;
  template?: InputMaybe<Scalars['String']['input']>;
  textItems?: InputMaybe<Array<SlideTextItemsAttributes>>;
};

/** Autogenerated return type of UpdateSlideMutation. */
export type UpdateSlideMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slide: Maybe<Slide>;
};

/** Autogenerated input type of UpdateSlideVideoMutation */
export type UpdateSlideVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  contentId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  videoUrl?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateSlideVideoMutation. */
export type UpdateSlideVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  slideVideo: Maybe<SlideVideo>;
};

/** Autogenerated input type of UpdateStandardSetMutation */
export type UpdateStandardSetMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateStandardSetMutation. */
export type UpdateStandardSetMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  standardSet: Maybe<StandardSet>;
};

/** Autogenerated input type of UpdateStudentSettingsMutation */
export type UpdateStudentSettingsMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  settings: StudentSettingsAttributes;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateStudentSettingsMutation. */
export type UpdateStudentSettingsMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  student: Maybe<Student>;
};

/** Autogenerated input type of UpdateTagMutation */
export type UpdateTagMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  isDefault?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateTagMutation. */
export type UpdateTagMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  tag: Maybe<Tag>;
};

/** Autogenerated input type of UpdateTaskFileMutation */
export type UpdateTaskFileMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateTaskFileMutation. */
export type UpdateTaskFileMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  taskFile: Maybe<TaskFile>;
};

/** Autogenerated input type of UpdateTaskMutation */
export type UpdateTaskMutationInput = {
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  checkInItems?: InputMaybe<Array<CheckInItemAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  courseIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  filesOrder?: InputMaybe<Array<TaskFileAttributes>>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  introduction?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  pathwayIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  presentationUrl?: InputMaybe<Scalars['String']['input']>;
  standard?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<TaskStatuses>;
  studentResources?: InputMaybe<Scalars['String']['input']>;
  taskProducts?: InputMaybe<Array<TaskProductAttributes>>;
  teachingResources?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of UpdateTaskMutation. */
export type UpdateTaskMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  task: Maybe<Task>;
};

/** Autogenerated input type of UpdateTextMutation */
export type UpdateTextMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  content: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateTextMutation. */
export type UpdateTextMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  text: Maybe<Text>;
};

/** Autogenerated input type of UpdateTrackMutation */
export type UpdateTrackMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  grades?: InputMaybe<Array<Scalars['String']['input']>>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  shortDescription?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<TrackStatuses>;
  trackUnits?: InputMaybe<Array<TrackUnitAttributes>>;
};

/** Autogenerated return type of UpdateTrackMutation. */
export type UpdateTrackMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  track: Maybe<Track>;
};

/** Autogenerated input type of UpdateUnitMutation */
export type UpdateUnitMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['ID']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<UnitStatuses>;
  unitResources?: InputMaybe<Array<UnitResourceAttributes>>;
  unitTasks?: InputMaybe<Array<UnitTaskAttributes>>;
};

/** Autogenerated return type of UpdateUnitMutation. */
export type UpdateUnitMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  unit: Maybe<Unit>;
};

/** Autogenerated input type of UpdateUserMutation */
export type UpdateUserMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  permissions?: InputMaybe<UserPermissionsAttributes>;
  role?: InputMaybe<UserRoles>;
  uuid: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateUserMutation. */
export type UpdateUserMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  user: User;
};

/** Autogenerated input type of UpdateVideoMutation */
export type UpdateVideoMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  displayName?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  name: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateVideoMutation. */
export type UpdateVideoMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  video: Maybe<Video>;
};

/** Autogenerated input type of UpdateVirtualInternshipMutation */
export type UpdateVirtualInternshipMutationInput = {
  availableSpots?: InputMaybe<Scalars['Int']['input']>;
  badgeIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  calendarLessonsIds?: InputMaybe<Array<VirtualInternshipLessonAttributes>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  creditsOutcomes?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  experienceOpportunityLessonsIds?: InputMaybe<Array<VirtualInternshipLessonAttributes>>;
  id: Scalars['ID']['input'];
  imageFilename?: InputMaybe<Scalars['String']['input']>;
  imageUuid?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  pathwayIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  postExperienceLessonsIds?: InputMaybe<Array<VirtualInternshipLessonAttributes>>;
  readinessSkillsLessonsIds?: InputMaybe<Array<VirtualInternshipLessonAttributes>>;
  requiredExperiences?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<VirtualInternshipStatuses>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};

/** Autogenerated return type of UpdateVirtualInternshipMutation. */
export type UpdateVirtualInternshipMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  virtualInternship: Maybe<VirtualInternship>;
};

/** Autogenerated input type of UpdateVocabularyMutation */
export type UpdateVocabularyMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  definition: Scalars['String']['input'];
  id: Scalars['ID']['input'];
  term: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateVocabularyMutation. */
export type UpdateVocabularyMutationPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  vocabulary: Maybe<Vocabulary>;
};

export enum UsStates {
  /** Alabama */
  ALABAMA = 'ALABAMA',
  /** Alaska */
  ALASKA = 'ALASKA',
  /** American Samoa */
  AMERICAN_SAMOA = 'AMERICAN_SAMOA',
  /** Arizona */
  ARIZONA = 'ARIZONA',
  /** Arkansas */
  ARKANSAS = 'ARKANSAS',
  /** California */
  CALIFORNIA = 'CALIFORNIA',
  /** Colorado */
  COLORADO = 'COLORADO',
  /** Connecticut */
  CONNECTICUT = 'CONNECTICUT',
  /** Delaware */
  DELAWARE = 'DELAWARE',
  /** District Of Columbia */
  DISTRICT_OF_COLUMBIA = 'DISTRICT_OF_COLUMBIA',
  /** Florida */
  FLORIDA = 'FLORIDA',
  /** Georgia */
  GEORGIA = 'GEORGIA',
  /** Guam */
  GUAM = 'GUAM',
  /** Hawaii */
  HAWAII = 'HAWAII',
  /** Idaho */
  IDAHO = 'IDAHO',
  /** Illinois */
  ILLINOIS = 'ILLINOIS',
  /** Indiana */
  INDIANA = 'INDIANA',
  /** International */
  INTERNATIONAL = 'INTERNATIONAL',
  /** Iowa */
  IOWA = 'IOWA',
  /** Kansas */
  KANSAS = 'KANSAS',
  /** Kentucky */
  KENTUCKY = 'KENTUCKY',
  /** Louisiana */
  LOUISIANA = 'LOUISIANA',
  /** Maine */
  MAINE = 'MAINE',
  /** Maryland */
  MARYLAND = 'MARYLAND',
  /** Massachusetts */
  MASSACHUSETTS = 'MASSACHUSETTS',
  /** Michigan */
  MICHIGAN = 'MICHIGAN',
  /** Minnesota */
  MINNESOTA = 'MINNESOTA',
  /** Mississippi */
  MISSISSIPPI = 'MISSISSIPPI',
  /** Missouri */
  MISSOURI = 'MISSOURI',
  /** Montana */
  MONTANA = 'MONTANA',
  /** Nebraska */
  NEBRASKA = 'NEBRASKA',
  /** Nevada */
  NEVADA = 'NEVADA',
  /** New Hampshire */
  NEW_HAMPSHIRE = 'NEW_HAMPSHIRE',
  /** New Jersey */
  NEW_JERSEY = 'NEW_JERSEY',
  /** New Mexico */
  NEW_MEXICO = 'NEW_MEXICO',
  /** New York */
  NEW_YORK = 'NEW_YORK',
  /** North Carolina */
  NORTH_CAROLINA = 'NORTH_CAROLINA',
  /** North Dakota */
  NORTH_DAKOTA = 'NORTH_DAKOTA',
  /** Ohio */
  OHIO = 'OHIO',
  /** Oklahoma */
  OKLAHOMA = 'OKLAHOMA',
  /** Oregon */
  OREGON = 'OREGON',
  /** Pennsylvania */
  PENNSYLVANIA = 'PENNSYLVANIA',
  /** Puerto Rico */
  PUERTO_RICO = 'PUERTO_RICO',
  /** Rhode Island */
  RHODE_ISLAND = 'RHODE_ISLAND',
  /** South Carolina */
  SOUTH_CAROLINA = 'SOUTH_CAROLINA',
  /** South Dakota */
  SOUTH_DAKOTA = 'SOUTH_DAKOTA',
  /** Tennessee */
  TENNESSEE = 'TENNESSEE',
  /** Texas */
  TEXAS = 'TEXAS',
  /** Utah */
  UTAH = 'UTAH',
  /** Vermont */
  VERMONT = 'VERMONT',
  /** Virginia */
  VIRGINIA = 'VIRGINIA',
  /** Virgin Islands */
  VIRGIN_ISLANDS = 'VIRGIN_ISLANDS',
  /** Washington */
  WASHINGTON = 'WASHINGTON',
  /** West Virginia */
  WEST_VIRGINIA = 'WEST_VIRGINIA',
  /** Wisconsin */
  WISCONSIN = 'WISCONSIN',
  /** Wyoming */
  WYOMING = 'WYOMING'
}

export type User = AnnouncementAuthor & ConversationMember & ConversationParticipant & Evaluator & ExtensionFieldAuthor & FileSubmitter & ProductSubmissionFileSubmitter & ResourceDuplicateOwner & StudentActivityContext & TeamOwner & WblAdmin & {
  commonAppData: CommonAppData;
  currentSchoolYear: Scalars['Int']['output'];
  email: Maybe<Scalars['String']['output']>;
  /** @deprecated Use the `entity` field instead */
  entities: EntityPage;
  entity: Entity;
  entityName: Maybe<Scalars['String']['output']>;
  firstName: Maybe<Scalars['String']['output']>;
  fullName: Maybe<Scalars['String']['output']>;
  gradingNeeded: Scalars['Boolean']['output'];
  hasAccessToCareers: Scalars['Boolean']['output'];
  hasAccessToLearning: Scalars['Boolean']['output'];
  /** @deprecated Use hasAccessToLearning instead */
  hasAccessToPbl: Scalars['Boolean']['output'];
  hasOpportunitiesEnabled: Scalars['Boolean']['output'];
  hasUnreadConversation: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  isLti: Scalars['Boolean']['output'];
  isLtiSearch: Scalars['Boolean']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  members: Maybe<Array<ConversationMember>>;
  name: Maybe<Scalars['String']['output']>;
  owner: Maybe<ConversationMember>;
  permissions: UserPermissions;
  role: UserRoles;
  schoolClasses: SchoolClassPage;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};


export type UserEntitiesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};


export type UserSchoolClassesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
  scope?: InputMaybe<ArchivableStatus>;
};

export type UserData = {
  entity: Maybe<EntityData>;
  firstName: Maybe<Scalars['String']['output']>;
  gradingNeeded: Scalars['Boolean']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  role: UserRoles;
  schoolClassesCount: Scalars['Int']['output'];
  uuid: Scalars['ID']['output'];
};

export type UserDataPage = {
  nodes: Array<UserData>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

/** Attributes for filtering Users */
export type UserFilter = {
  fullNameCont?: InputMaybe<Scalars['String']['input']>;
  searchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
};

export type UserInfo = {
  availableReportTypes: Array<ReportTypes>;
  commonAppData: CommonAppData;
  currentSchoolYear: Scalars['Int']['output'];
  definedLearningUuid: Maybe<Scalars['ID']['output']>;
  email: Maybe<Scalars['String']['output']>;
  /** @deprecated Use the `entity` field instead */
  entities: EntityPage;
  entity: Entity;
  firstName: Maybe<Scalars['String']['output']>;
  gradingNeeded: Scalars['Boolean']['output'];
  hasAccessToCareers: Scalars['Boolean']['output'];
  hasAccessToLearning: Scalars['Boolean']['output'];
  /** @deprecated Use hasAccessToLearning instead */
  hasAccessToPbl: Scalars['Boolean']['output'];
  hasClassManagementEnabled: Scalars['Boolean']['output'];
  hasOpportunitiesEnabled: Scalars['Boolean']['output'];
  hasUnreadConversation: Scalars['Boolean']['output'];
  iconUrl: Maybe<Scalars['String']['output']>;
  isImpersonated: Scalars['Boolean']['output'];
  isLti: Scalars['Boolean']['output'];
  isLtiSearch: Scalars['Boolean']['output'];
  lastName: Maybe<Scalars['String']['output']>;
  logoUrl: Maybe<Scalars['String']['output']>;
  name: Maybe<Scalars['String']['output']>;
  permissions: UserPermissions;
  role: UserRoles;
  username: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
  welcomeMessage: Maybe<Scalars['String']['output']>;
};


export type UserInfoEntitiesArgs = {
  page: InputMaybe<Scalars['Int']['input']>;
  perPage: InputMaybe<Scalars['Int']['input']>;
};

/** Attributes for filtering Institutions */
export type UserInstitutionFilter = {
  commonAppEnabledEq?: InputMaybe<Scalars['Boolean']['input']>;
  costRange?: InputMaybe<Array<CostRanges>>;
  searchableColumnsCont?: InputMaybe<Scalars['String']['input']>;
  sizeTypeIn?: InputMaybe<Array<SizeTypes>>;
  stateIn?: InputMaybe<Array<UsStates>>;
  typeIn?: InputMaybe<Array<InstitutionTypes>>;
};

export type UserPage = {
  nodes: Array<User>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type UserPermissions = {
  canBrowseReports: Scalars['Boolean']['output'];
  canImpersonate: Scalars['Boolean']['output'];
  counselor: Scalars['Boolean']['output'];
  wblAdmin: Scalars['Boolean']['output'];
};

/** Attributes for updating user permissions */
export type UserPermissionsAttributes = {
  canBrowseReports?: InputMaybe<Scalars['Boolean']['input']>;
  canImpersonate?: InputMaybe<Scalars['Boolean']['input']>;
  counselor?: InputMaybe<Scalars['Boolean']['input']>;
  wblAdmin?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum UserRoles {
  /** Entity Admin role */
  ENTITY_ADMIN = 'ENTITY_ADMIN',
  /** Sales Admin role */
  SALES_ADMIN = 'SALES_ADMIN',
  /** System Admin role */
  SYSTEM_ADMIN = 'SYSTEM_ADMIN',
  /** Teacher role */
  TEACHER = 'TEACHER'
}

export type Video = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  description: Scalars['String']['output'];
  displayName: Maybe<Scalars['String']['output']>;
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  lessons: Array<Lesson>;
  name: Scalars['String']['output'];
  step: Maybe<Scalars['Int']['output']>;
  url: Scalars['String']['output'];
};

/** Attributes for filtering Videos */
export type VideoFilter = {
  descriptionCont?: InputMaybe<Scalars['String']['input']>;
  displayNameCont?: InputMaybe<Scalars['String']['input']>;
  nameCont?: InputMaybe<Scalars['String']['input']>;
};

export type VideoPage = {
  nodes: Array<Video>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type VirtualInternship = StudentBadgeResource & {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  badges: Array<Badge>;
  calendarLessons: Array<Lesson>;
  content: Array<VirtualInternshipContent>;
  experienceOpportunityLessons: Array<Lesson>;
  id: Scalars['ID']['output'];
  lesson: Lesson;
  name: Scalars['String']['output'];
  opportunity: Opportunity;
  postExperienceLessons: Array<Lesson>;
  readinessSkillsLessons: Array<Lesson>;
  requiredExperiences: Scalars['Int']['output'];
  roadmapItemsCount: Scalars['Int']['output'];
  status: VirtualInternshipStatuses;
};


export type VirtualInternshipLessonArgs = {
  id: Scalars['ID']['input'];
  track?: InputMaybe<Scalars['Boolean']['input']>;
};

export type VirtualInternshipContent = {
  checkIns: Array<LessonItem>;
  extensionFields: Array<ExtensionField>;
  id: Scalars['ID']['output'];
  items: Array<LessonItem>;
  name: Scalars['String']['output'];
  type: LessonTypes;
};

/** Attributes for filtering VirtualInternship */
export type VirtualInternshipFilter = {
  statusEq?: InputMaybe<VirtualInternshipStatuses>;
};

/** Attributes for creating and updating virtual internship lessons */
export type VirtualInternshipLessonAttributes = {
  lessonId: Scalars['ID']['input'];
  step: Scalars['Int']['input'];
};

export type VirtualInternshipPage = {
  nodes: Array<VirtualInternship>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export enum VirtualInternshipStatuses {
  /** Status for draft virtual internships */
  DRAFT = 'DRAFT',
  /** Status for published virtual internships */
  PUBLISHED = 'PUBLISHED'
}

export enum VisibilityScope {
  /** Resource visible in all Entities */
  ALL = 'ALL',
  /** Resource visible only in provided Entities */
  ENTITY = 'ENTITY'
}

export type Vocabulary = {
  archivedAt: Maybe<Scalars['ISO8601DateTime']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  definition: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  lessons: Array<Lesson>;
  step: Maybe<Scalars['Int']['output']>;
  term: Scalars['String']['output'];
};

/** Attributes for filtering Vocabularies */
export type VocabularyFilter = {
  definitionCont?: InputMaybe<Scalars['String']['input']>;
  termCont?: InputMaybe<Scalars['String']['input']>;
};

export type VocabularyPage = {
  nodes: Array<Vocabulary>;
  nodesCount: Scalars['Int']['output'];
  pagesCount: Scalars['Int']['output'];
};

export type WblAdmin = {
  name: Maybe<Scalars['String']['output']>;
  uuid: Scalars['ID']['output'];
};

export type WelcomeMessage = {
  dcStudent: Maybe<Scalars['String']['output']>;
  dcTeacher: Maybe<Scalars['String']['output']>;
  dlStudent: Maybe<Scalars['String']['output']>;
  dlTeacher: Maybe<Scalars['String']['output']>;
};

/** Attributes for entity welcome message */
export type WelcomeMessageAttributes = {
  dcStudent?: InputMaybe<Scalars['String']['input']>;
  dcTeacher?: InputMaybe<Scalars['String']['input']>;
  dlStudent?: InputMaybe<Scalars['String']['input']>;
  dlTeacher?: InputMaybe<Scalars['String']['input']>;
};

export type WorkValuesCategoryAverageTokens = {
  averageTokens: Scalars['Float']['output'];
  category: Scalars['String']['output'];
};

export type WorkValuesResult = {
  score: Scalars['Int']['output'];
  workValue: Scalars['String']['output'];
};
